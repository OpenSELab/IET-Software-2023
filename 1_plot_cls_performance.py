# -*- coding: utf-8 -*-
"""1-plot_cls_performance

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eHRC2uniFvjZ4aGkwkaX4QxHrSL-4VN6
"""

!pip install cliffs-delta
!pip install researchpy
!pip install pingouin

# Commented out IPython magic to ensure Python compatibility.

import pandas as pd
import numpy as np

#Import graphical plotting libraries
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

from scipy import stats

from cliffs_delta import cliffs_delta

# 忽略警告
import warnings
warnings.filterwarnings('ignore')

# click load google drive
rootpath = "/content/drive/MyDrive/Colab Notebooks/1/"

results = "results/"

test_o = rootpath + results + "test-o.xlsx"
test_log = rootpath + results + "test-log.xlsx"
test_min = rootpath + results + "test-min.xlsx"
test_sta = rootpath + results + "test-sta.xlsx"

test_o_data = pd.DataFrame(pd.read_excel(test_o))
test_log_data = pd.DataFrame(pd.read_excel(test_log))
test_min_data = pd.DataFrame(pd.read_excel(test_min))
test_sta_data = pd.DataFrame(pd.read_excel(test_sta))

print(stats.wilcoxon(test_o_data.accuracy,test_log_data.accuracy))
print(stats.wilcoxon(test_o_data.accuracy,test_min_data.accuracy))
print(stats.wilcoxon(test_o_data.accuracy,test_sta_data.accuracy))
print(stats.wilcoxon(test_o_data.precision,test_log_data.precision)) #
print(stats.wilcoxon(test_o_data.precision,test_min_data.precision))
print(stats.wilcoxon(test_o_data.precision,test_sta_data.precision))
print(stats.wilcoxon(test_o_data.recall,test_log_data.recall))
print(stats.wilcoxon(test_o_data.recall,test_min_data.recall)) #
print(stats.wilcoxon(test_o_data.recall,test_sta_data.recall))
print(stats.wilcoxon(test_o_data.f1,test_log_data.f1))
print(stats.wilcoxon(test_o_data.f1,test_min_data.f1)) #
print(stats.wilcoxon(test_o_data.f1,test_sta_data.f1))
print(stats.wilcoxon(test_o_data.auc,test_log_data.auc))
print(stats.wilcoxon(test_o_data.auc,test_min_data.auc))
print(stats.wilcoxon(test_o_data.auc,test_sta_data.auc))
print(stats.wilcoxon(test_o_data.mcc,test_log_data.mcc))
print(stats.wilcoxon(test_o_data.mcc,test_min_data.mcc))
print(stats.wilcoxon(test_o_data.mcc,test_sta_data.mcc))


# 表示无显著性 其他表示有显著性 显著性很明显 性能有提升

"""**下面分类器作图**"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np

#Import graphical plotting libraries
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

from scipy import stats

from cliffs_delta import cliffs_delta

# 忽略警告
import warnings
warnings.filterwarnings('ignore')
# click load google drive
rootpath = "/content/drive/MyDrive/Colab Notebooks/1/"

results = "results/"

O_RF = rootpath + results + "O-RF.xlsx"
O_LR = rootpath + results + "O-LR.xlsx"
O_DT = rootpath + results + "O-DT.xlsx"
O_NB = rootpath + results + "O-NB.xlsx"
O_KNN = rootpath + results + "O-KNN.xlsx"
O_MLP = rootpath + results + "O-MLP.xlsx"

Log_RF = rootpath + results + "Log-RF.xlsx"
Log_LR = rootpath + results + "Log-LR.xlsx"
Log_DT = rootpath + results + "Log-DT.xlsx"
Log_NB = rootpath + results + "Log-NB.xlsx"
Log_KNN = rootpath + results + "Log-KNN.xlsx"
Log_MLP = rootpath + results + "Log-MLP.xlsx"

Min_RF = rootpath + results + "Min-RF.xlsx"
Min_LR = rootpath + results + "Min-LR.xlsx"
Min_DT = rootpath + results + "Min-DT.xlsx"
Min_NB = rootpath + results + "Min-NB.xlsx"
Min_KNN = rootpath + results + "Min-KNN.xlsx"
Min_MLP = rootpath + results + "Min-MLP.xlsx"

Sta_RF = rootpath + results + "Sta-RF.xlsx"
Sta_LR = rootpath + results + "Sta-LR.xlsx"
Sta_DT = rootpath + results + "Sta-DT.xlsx"
Sta_NB = rootpath + results + "Sta-NB.xlsx"
Sta_KNN = rootpath + results + "Sta-KNN.xlsx"
Sta_MLP = rootpath + results + "Sta-MLP.xlsx"

Log_O_RF = rootpath + results + "Log-O-RF.xlsx"
Log_O_LR = rootpath + results + "Log-O-LR.xlsx"
Log_O_DT = rootpath + results + "Log-O-DT.xlsx"
Log_O_NB = rootpath + results + "Log-O-NB.xlsx"
Log_O_KNN = rootpath + results + "Log-O-KNN.xlsx"
Log_O_MLP = rootpath + results + "Log-O-MLP.xlsx"

Min_O_RF = rootpath + results + "Min-O-RF.xlsx"
Min_O_LR = rootpath + results + "Min-O-LR.xlsx"
Min_O_DT = rootpath + results + "Min-O-DT.xlsx"
Min_O_NB = rootpath + results + "Min-O-NB.xlsx"
Min_O_KNN = rootpath + results + "Min-O-KNN.xlsx"
Min_O_MLP = rootpath + results + "Min-O-MLP.xlsx"

Sta_O_RF = rootpath + results + "Sta-O-RF.xlsx"
Sta_O_LR = rootpath + results + "Sta-O-LR.xlsx"
Sta_O_DT = rootpath + results + "Sta-O-DT.xlsx"
Sta_O_NB = rootpath + results + "Sta-O-NB.xlsx"
Sta_O_KNN = rootpath + results + "Sta-O-KNN.xlsx"
Sta_O_MLP = rootpath + results + "Sta-O-MLP.xlsx"


res_O_RF = pd.DataFrame(pd.read_excel(O_RF))
res_O_LR = pd.DataFrame(pd.read_excel(O_LR))
res_O_DT = pd.DataFrame(pd.read_excel(O_DT))
res_O_NB = pd.DataFrame(pd.read_excel(O_NB))
res_O_KNN = pd.DataFrame(pd.read_excel(O_KNN))
res_O_MLP = pd.DataFrame(pd.read_excel(O_MLP))

res_Log_RF = pd.DataFrame(pd.read_excel(Log_RF))
res_Log_LR = pd.DataFrame(pd.read_excel(Log_LR))
res_Log_DT = pd.DataFrame(pd.read_excel(Log_DT))
res_Log_NB = pd.DataFrame(pd.read_excel(Log_NB))
res_Log_KNN = pd.DataFrame(pd.read_excel(Log_KNN))
res_Log_MLP = pd.DataFrame(pd.read_excel(Log_MLP))

res_Min_RF = pd.DataFrame(pd.read_excel(Min_RF))
res_Min_LR = pd.DataFrame(pd.read_excel(Min_LR))
res_Min_DT = pd.DataFrame(pd.read_excel(Min_DT))
res_Min_NB = pd.DataFrame(pd.read_excel(Min_NB))
res_Min_KNN = pd.DataFrame(pd.read_excel(Min_KNN))
res_Min_MLP = pd.DataFrame(pd.read_excel(Min_MLP))

res_Sta_RF = pd.DataFrame(pd.read_excel(Sta_RF))
res_Sta_LR = pd.DataFrame(pd.read_excel(Sta_LR))
res_Sta_DT = pd.DataFrame(pd.read_excel(Sta_DT))
res_Sta_NB = pd.DataFrame(pd.read_excel(Sta_NB))
res_Sta_KNN = pd.DataFrame(pd.read_excel(Sta_KNN))
res_Sta_MLP = pd.DataFrame(pd.read_excel(Sta_MLP))




res_Log_O_RF = pd.DataFrame(pd.read_excel(Log_O_RF))
res_Log_O_LR = pd.DataFrame(pd.read_excel(Log_O_LR))
res_Log_O_DT = pd.DataFrame(pd.read_excel(Log_O_DT))
res_Log_O_NB = pd.DataFrame(pd.read_excel(Log_O_NB))
res_Log_O_KNN = pd.DataFrame(pd.read_excel(Log_O_KNN))
res_Log_O_MLP = pd.DataFrame(pd.read_excel(Log_O_MLP))

res_Min_O_RF = pd.DataFrame(pd.read_excel(Min_O_RF))
res_Min_O_LR = pd.DataFrame(pd.read_excel(Min_O_LR))
res_Min_O_DT = pd.DataFrame(pd.read_excel(Min_O_DT))
res_Min_O_NB = pd.DataFrame(pd.read_excel(Min_O_NB))
res_Min_O_KNN = pd.DataFrame(pd.read_excel(Min_O_KNN))
res_Min_O_MLP = pd.DataFrame(pd.read_excel(Min_O_MLP))

res_Sta_O_RF = pd.DataFrame(pd.read_excel(Sta_O_RF))
res_Sta_O_LR = pd.DataFrame(pd.read_excel(Sta_O_LR))
res_Sta_O_DT = pd.DataFrame(pd.read_excel(Sta_O_DT))
res_Sta_O_NB = pd.DataFrame(pd.read_excel(Sta_O_NB))
res_Sta_O_KNN = pd.DataFrame(pd.read_excel(Sta_O_KNN))
res_Sta_O_MLP = pd.DataFrame(pd.read_excel(Sta_O_MLP))

print("作图数据加载完毕")

# 威尔逊符号秩检验
print("威尔逊符号秩检验开始")

print("accuracy for RF on Log Minmax Sta p-value")
print(stats.wilcoxon(res_O_RF.accuracy,res_Log_RF.accuracy))
print(stats.wilcoxon(res_O_RF.accuracy,res_Min_RF.accuracy))
print(stats.wilcoxon(res_O_RF.accuracy,res_Sta_RF.accuracy))
print("precision for RF on Log Minmax Sta p-value")
print(stats.wilcoxon(res_O_RF.precision,res_Log_RF.precision))
print(stats.wilcoxon(res_O_RF.precision,res_Min_RF.precision))
print(stats.wilcoxon(res_O_RF.precision,res_Sta_RF.precision))
print("recall for RF on Log Minmax Sta p-value")
print(stats.wilcoxon(res_O_RF.recall,res_Log_RF.recall))
print(stats.wilcoxon(res_O_RF.recall,res_Min_RF.recall))
print(stats.wilcoxon(res_O_RF.recall,res_Sta_RF.recall))
print("f1 for RF on Log Minmax Sta p-value")
print(stats.wilcoxon(res_O_RF.f1,res_Log_RF.f1))
print(stats.wilcoxon(res_O_RF.f1,res_Min_RF.f1))
print(stats.wilcoxon(res_O_RF.f1,res_Sta_RF.f1))
print("auc for RF on Log Minmax Sta p-value")
print(stats.wilcoxon(res_O_RF.auc,res_Log_RF.auc))
print(stats.wilcoxon(res_O_RF.auc,res_Min_RF.auc))
print(stats.wilcoxon(res_O_RF.auc,res_Sta_RF.auc))
print("mcc for RF on Log Minmax Sta p-value")
print(stats.wilcoxon(res_O_RF.mcc,res_Log_RF.mcc))
print(stats.wilcoxon(res_O_RF.mcc,res_Min_RF.mcc))
print(stats.wilcoxon(res_O_RF.mcc,res_Sta_RF.mcc))


print("accuracy for LR on Log Minmax Sta p-value")
print(stats.wilcoxon(res_O_LR.accuracy,res_Log_LR.accuracy))
print(stats.wilcoxon(res_O_LR.accuracy,res_Min_LR.accuracy))
print(stats.wilcoxon(res_O_LR.accuracy,res_Sta_LR.accuracy))
print("precision for LR on Log Minmax Sta p-value")
print(stats.wilcoxon(res_O_LR.precision,res_Log_LR.precision))
print(stats.wilcoxon(res_O_LR.precision,res_Min_LR.precision))
print(stats.wilcoxon(res_O_LR.precision,res_Sta_LR.precision))
print("recall for LR on Log Minmax Sta p-value")
print(stats.wilcoxon(res_O_LR.recall,res_Log_LR.recall))
print(stats.wilcoxon(res_O_LR.recall,res_Min_LR.recall))
print(stats.wilcoxon(res_O_LR.recall,res_Sta_LR.recall))
print("f1 for LR on Log Minmax Sta p-value")
print(stats.wilcoxon(res_O_LR.f1,res_Log_LR.f1))
print(stats.wilcoxon(res_O_LR.f1,res_Min_LR.f1))
print(stats.wilcoxon(res_O_LR.f1,res_Sta_LR.f1))
print("auc for LR on Log Minmax Sta p-value")
print(stats.wilcoxon(res_O_LR.auc,res_Log_LR.auc))
print(stats.wilcoxon(res_O_LR.auc,res_Min_LR.auc))
print(stats.wilcoxon(res_O_LR.auc,res_Sta_LR.auc))
print("mcc for LR on Log Minmax Sta p-value")
print(stats.wilcoxon(res_O_LR.mcc,res_Log_LR.mcc))
print(stats.wilcoxon(res_O_LR.mcc,res_Min_LR.mcc))
print(stats.wilcoxon(res_O_LR.mcc,res_Sta_LR.mcc))

print("accuracy for DT on Log Minmax Sta p-value")
print(stats.wilcoxon(res_O_DT.accuracy,res_Log_DT.accuracy))
print(stats.wilcoxon(res_O_DT.accuracy,res_Min_DT.accuracy))
print(stats.wilcoxon(res_O_DT.accuracy,res_Sta_DT.accuracy))
print("precision for DT on Log Minmax Sta p-value")
print(stats.wilcoxon(res_O_DT.precision,res_Log_DT.precision))
print(stats.wilcoxon(res_O_DT.precision,res_Min_DT.precision))
print(stats.wilcoxon(res_O_DT.precision,res_Sta_DT.precision))
print("recall for DT on Log Minmax Sta p-value")
print(stats.wilcoxon(res_O_DT.recall,res_Log_DT.recall))
print(stats.wilcoxon(res_O_DT.recall,res_Min_DT.recall))
print(stats.wilcoxon(res_O_DT.recall,res_Sta_DT.recall))
print("f1 for DT on Log Minmax Sta p-value")
print(stats.wilcoxon(res_O_DT.f1,res_Log_DT.f1))
print(stats.wilcoxon(res_O_DT.f1,res_Min_DT.f1))
print(stats.wilcoxon(res_O_DT.f1,res_Sta_DT.f1))
print("auc for DT on Log Minmax Sta p-value")
print(stats.wilcoxon(res_O_DT.auc,res_Log_DT.auc))
print(stats.wilcoxon(res_O_DT.auc,res_Min_DT.auc))
print(stats.wilcoxon(res_O_DT.auc,res_Sta_DT.auc))
print("mcc for DT on Log Minmax Sta p-value")
print(stats.wilcoxon(res_O_DT.mcc,res_Log_DT.mcc))
print(stats.wilcoxon(res_O_DT.mcc,res_Min_DT.mcc))
print(stats.wilcoxon(res_O_DT.mcc,res_Sta_DT.mcc))


print("accuracy for NB on Log Minmax Sta p-value")
print(stats.wilcoxon(res_O_NB.accuracy,res_Log_NB.accuracy))
#print(stats.ranksums(res_O_NB.accuracy,res_Log_NB.accuracy))
#print(stats.mannwhitneyu(res_O_NB.accuracy,res_Log_NB.accuracy,alternative='two-sided'))
print(stats.wilcoxon(res_O_NB.accuracy,res_Min_NB.accuracy))
print(stats.wilcoxon(res_O_NB.accuracy,res_Sta_NB.accuracy))

print("precision for NB on Log Minmax Sta p-value")
print(stats.wilcoxon(res_O_NB.precision,res_Log_NB.precision))
print(stats.wilcoxon(res_O_NB.precision,res_Min_NB.precision))
print(stats.wilcoxon(res_O_NB.precision,res_Sta_NB.precision))
print("recall for NB on Log Minmax Sta p-value")
print(stats.wilcoxon(res_O_NB.recall,res_Log_NB.recall))
print(stats.wilcoxon(res_O_NB.recall,res_Min_NB.recall))
print(stats.wilcoxon(res_O_NB.recall,res_Sta_NB.recall))
print("f1 for NB on Log Minmax Sta p-value")
print(stats.wilcoxon(res_O_NB.f1,res_Log_NB.f1))
print(stats.wilcoxon(res_O_NB.f1,res_Min_NB.f1))
print(stats.wilcoxon(res_O_NB.f1,res_Sta_NB.f1))
print("auc for NB on Log Minmax Sta p-value")
print(stats.wilcoxon(res_O_NB.auc,res_Log_NB.auc))
print(stats.wilcoxon(res_O_NB.auc,res_Min_NB.auc))
print(stats.wilcoxon(res_O_NB.auc,res_Sta_NB.auc))
print("mcc for NB on Log Minmax Sta p-value")
print(stats.wilcoxon(res_O_NB.mcc,res_Log_NB.mcc))
print(stats.wilcoxon(res_O_NB.mcc,res_Min_NB.mcc))
print(stats.wilcoxon(res_O_NB.mcc,res_Sta_NB.mcc))

print("accuracy for KNN on Log Minmax Sta p-value")
print(stats.wilcoxon(res_O_KNN.accuracy,res_Log_KNN.accuracy))
print(stats.wilcoxon(res_O_KNN.accuracy,res_Min_KNN.accuracy))
print(stats.wilcoxon(res_O_KNN.accuracy,res_Sta_KNN.accuracy))
print("precision for KNN on Log Minmax Sta p-value")
print(stats.wilcoxon(res_O_KNN.precision,res_Log_KNN.precision))
print(stats.wilcoxon(res_O_KNN.precision,res_Min_KNN.precision))
print(stats.wilcoxon(res_O_KNN.precision,res_Sta_KNN.precision))
print("recall for KNN on Log Minmax Sta p-value")
print(stats.wilcoxon(res_O_KNN.recall,res_Log_KNN.recall))
print(stats.wilcoxon(res_O_KNN.recall,res_Min_KNN.recall))
print(stats.wilcoxon(res_O_KNN.recall,res_Sta_KNN.recall))
print("f1 for KNN on Log Minmax Sta p-value")
print(stats.wilcoxon(res_O_KNN.f1,res_Log_KNN.f1))
print(stats.wilcoxon(res_O_KNN.f1,res_Min_KNN.f1))
print(stats.wilcoxon(res_O_KNN.f1,res_Sta_KNN.f1))
print("auc for KNN on Log Minmax Sta p-value")
print(stats.wilcoxon(res_O_KNN.auc,res_Log_KNN.auc))
print(stats.wilcoxon(res_O_KNN.auc,res_Min_KNN.auc))
print(stats.wilcoxon(res_O_KNN.auc,res_Sta_KNN.auc))
print("mcc for KNN on Log Minmax Sta p-value")
print(stats.wilcoxon(res_O_KNN.mcc,res_Log_KNN.mcc))
print(stats.wilcoxon(res_O_KNN.mcc,res_Min_KNN.mcc))
print(stats.wilcoxon(res_O_KNN.mcc,res_Sta_KNN.mcc))


print("accuracy for MLP on Log Minmax Sta p-value")
print(stats.wilcoxon(res_O_MLP.accuracy,res_Log_MLP.accuracy))
print(stats.wilcoxon(res_O_MLP.accuracy,res_Min_MLP.accuracy))
print(stats.wilcoxon(res_O_MLP.accuracy,res_Sta_MLP.accuracy))
print("precision for MLP on Log Minmax Sta p-value")
print(stats.wilcoxon(res_O_MLP.precision,res_Log_MLP.precision))
print(stats.wilcoxon(res_O_MLP.precision,res_Min_MLP.precision))
print(stats.wilcoxon(res_O_MLP.precision,res_Sta_MLP.precision))
print("recall for MLP on Log Minmax Sta p-value")
print(stats.wilcoxon(res_O_MLP.recall,res_Log_MLP.recall))
print(stats.wilcoxon(res_O_MLP.recall,res_Min_MLP.recall))
print(stats.wilcoxon(res_O_MLP.recall,res_Sta_MLP.recall))
print("f1 for MLP on Log Minmax Sta p-value")
print(stats.wilcoxon(res_O_MLP.f1,res_Log_MLP.f1))
print(stats.wilcoxon(res_O_MLP.f1,res_Min_MLP.f1))
print(stats.wilcoxon(res_O_MLP.f1,res_Sta_MLP.f1))
print("auc for MLP on Log Minmax Sta p-value")
print(stats.wilcoxon(res_O_MLP.auc,res_Log_MLP.auc))
print(stats.wilcoxon(res_O_MLP.auc,res_Min_MLP.auc))
print(stats.wilcoxon(res_O_MLP.auc,res_Sta_MLP.auc))
print("mcc for MLP on Log Minmax Sta p-value")
print(stats.wilcoxon(res_O_MLP.mcc,res_Log_MLP.mcc))
print(stats.wilcoxon(res_O_MLP.mcc,res_Min_MLP.mcc))
print(stats.wilcoxon(res_O_MLP.mcc,res_Sta_MLP.mcc))

print("威尔逊符号秩检验完毕")

print("RF---------------------------------------------")
print( (res_Log_RF.accuracy.mean() - res_O_RF.accuracy.mean()) / res_O_RF.accuracy.mean() )
print( (res_Log_RF.precision.mean() - res_O_RF.precision.mean()) / res_O_RF.precision.mean() )
print( (res_Log_RF.recall.mean() - res_O_RF.recall.mean()) / res_O_RF.recall.mean() )
print( (res_Log_RF.f1.mean() - res_O_RF.f1.mean()) / res_O_RF.f1.mean() )
print( (res_Log_RF.auc.mean() - res_O_RF.auc.mean()) / res_O_RF.auc.mean() )
print( (res_Log_RF.mcc.mean() - res_O_RF.mcc.mean()) / res_O_RF.mcc.mean() )

print("LR---------------------------------------------")
print( (res_Log_LR.accuracy.mean() - res_O_LR.accuracy.mean()) / res_O_LR.accuracy.mean() )
print( (res_Log_LR.precision.mean() - res_O_LR.precision.mean()) / res_O_LR.precision.mean() )
print( (res_Log_LR.recall.mean() - res_O_LR.recall.mean()) / res_O_LR.recall.mean() )
print( (res_Log_LR.f1.mean() - res_O_LR.f1.mean()) / res_O_LR.f1.mean() )
print( (res_Log_LR.auc.mean() - res_O_LR.auc.mean()) / res_O_LR.auc.mean() )
print( (res_Log_LR.mcc.mean() - res_O_LR.mcc.mean()) / res_O_LR.mcc.mean() )


print("DT---------------------------------------------")
print( (res_Log_DT.accuracy.mean() - res_O_DT.accuracy.mean()) / res_O_DT.accuracy.mean() )
print( (res_Log_DT.precision.mean() - res_O_DT.precision.mean()) / res_O_DT.precision.mean() )
print( (res_Log_DT.recall.mean() - res_O_DT.recall.mean()) / res_O_DT.recall.mean() )
print( (res_Log_DT.f1.mean() - res_O_DT.f1.mean()) / res_O_DT.f1.mean() )
print( (res_Log_DT.auc.mean() - res_O_DT.auc.mean()) / res_O_DT.auc.mean() )
print( (res_Log_DT.mcc.mean() - res_O_DT.mcc.mean()) / res_O_DT.mcc.mean() )



print("NB---------------------------------------------")
print( (res_Log_NB.accuracy.mean() - res_O_NB.accuracy.mean()) / res_O_NB.accuracy.mean() )
print( (res_Log_NB.precision.mean() - res_O_NB.precision.mean()) / res_O_NB.precision.mean() )
print( (res_Log_NB.recall.mean() - res_O_NB.recall.mean()) / res_O_NB.recall.mean() )
print( (res_Log_NB.f1.mean() - res_O_NB.f1.mean()) / res_O_NB.f1.mean() )
print( (res_Log_NB.auc.mean() - res_O_NB.auc.mean()) / res_O_NB.auc.mean() )
print( (res_Log_NB.mcc.mean() - res_O_NB.mcc.mean()) / res_O_NB.mcc.mean() )

print("KNN---------------------------------------------")
print( (res_Log_KNN.accuracy.mean() - res_O_KNN.accuracy.mean()) / res_O_KNN.accuracy.mean() )
print( (res_Log_KNN.precision.mean() - res_O_KNN.precision.mean()) / res_O_KNN.precision.mean() )
print( (res_Log_KNN.recall.mean() - res_O_KNN.recall.mean()) / res_O_KNN.recall.mean() )
print( (res_Log_KNN.f1.mean() - res_O_KNN.f1.mean()) / res_O_KNN.f1.mean() )
print( (res_Log_KNN.auc.mean() - res_O_KNN.auc.mean()) / res_O_KNN.auc.mean() )
print( (res_Log_KNN.mcc.mean() - res_O_KNN.mcc.mean()) / res_O_KNN.mcc.mean() )


print("MLP---------------------------------------------")

print( (res_Log_MLP.accuracy.mean() - res_O_MLP.accuracy.mean()) / res_O_MLP.accuracy.mean() )
print( (res_Log_MLP.precision.mean() - res_O_MLP.precision.mean()) / res_O_MLP.precision.mean() )
print( (res_Log_MLP.recall.mean() - res_O_MLP.recall.mean()) / res_O_MLP.recall.mean() )
print( (res_Log_MLP.f1.mean() - res_O_MLP.f1.mean()) / res_O_MLP.f1.mean() )
print( (res_Log_MLP.auc.mean() - res_O_MLP.auc.mean()) / res_O_MLP.auc.mean() )
print( (res_Log_MLP.mcc.mean() - res_O_MLP.mcc.mean()) / res_O_MLP.mcc.mean() )

print("RF---------------------------------------------")
print( (res_Min_RF.accuracy.mean() - res_O_RF.accuracy.mean()) / res_O_RF.accuracy.mean() )
print( (res_Min_RF.precision.mean() - res_O_RF.precision.mean()) / res_O_RF.precision.mean() )
print( (res_Min_RF.recall.mean() - res_O_RF.recall.mean()) / res_O_RF.recall.mean() )
print( (res_Min_RF.f1.mean() - res_O_RF.f1.mean()) / res_O_RF.f1.mean() )
print( (res_Min_RF.auc.mean() - res_O_RF.auc.mean()) / res_O_RF.auc.mean() )
print( (res_Min_RF.mcc.mean() - res_O_RF.mcc.mean()) / res_O_RF.mcc.mean() )

print("LR---------------------------------------------")
print( (res_Min_LR.accuracy.mean() - res_O_LR.accuracy.mean()) / res_O_LR.accuracy.mean() )
print( (res_Min_LR.precision.mean() - res_O_LR.precision.mean()) / res_O_LR.precision.mean() )
print( (res_Min_LR.recall.mean() - res_O_LR.recall.mean()) / res_O_LR.recall.mean() )
print( (res_Min_LR.f1.mean() - res_O_LR.f1.mean()) / res_O_LR.f1.mean() )
print( (res_Min_LR.auc.mean() - res_O_LR.auc.mean()) / res_O_LR.auc.mean() )
print( (res_Min_LR.mcc.mean() - res_O_LR.mcc.mean()) / res_O_LR.mcc.mean() )


print("DT---------------------------------------------")
print( (res_Min_DT.accuracy.mean() - res_O_DT.accuracy.mean()) / res_O_DT.accuracy.mean() )
print( (res_Min_DT.precision.mean() - res_O_DT.precision.mean()) / res_O_DT.precision.mean() )
print( (res_Min_DT.recall.mean() - res_O_DT.recall.mean()) / res_O_DT.recall.mean() )
print( (res_Min_DT.f1.mean() - res_O_DT.f1.mean()) / res_O_DT.f1.mean() )
print( (res_Min_DT.auc.mean() - res_O_DT.auc.mean()) / res_O_DT.auc.mean() )
print( (res_Min_DT.mcc.mean() - res_O_DT.mcc.mean()) / res_O_DT.mcc.mean() )



print("NB---------------------------------------------")
print( (res_Min_NB.accuracy.mean() - res_O_NB.accuracy.mean()) / res_O_NB.accuracy.mean() )
print( (res_Min_NB.precision.mean() - res_O_NB.precision.mean()) / res_O_NB.precision.mean() )
print( (res_Min_NB.recall.mean() - res_O_NB.recall.mean()) / res_O_NB.recall.mean() )
print( (res_Min_NB.f1.mean() - res_O_NB.f1.mean()) / res_O_NB.f1.mean() )
print( (res_Min_NB.auc.mean() - res_O_NB.auc.mean()) / res_O_NB.auc.mean() )
print( (res_Min_NB.mcc.mean() - res_O_NB.mcc.mean()) / res_O_NB.mcc.mean() )

print("KNN---------------------------------------------")
print( (res_Min_KNN.accuracy.mean() - res_O_KNN.accuracy.mean()) / res_O_KNN.accuracy.mean() )
print( (res_Min_KNN.precision.mean() - res_O_KNN.precision.mean()) / res_O_KNN.precision.mean() )
print( (res_Min_KNN.recall.mean() - res_O_KNN.recall.mean()) / res_O_KNN.recall.mean() )
print( (res_Min_KNN.f1.mean() - res_O_KNN.f1.mean()) / res_O_KNN.f1.mean() )
print( (res_Min_KNN.auc.mean() - res_O_KNN.auc.mean()) / res_O_KNN.auc.mean() )
print( (res_Min_KNN.mcc.mean() - res_O_KNN.mcc.mean()) / res_O_KNN.mcc.mean() )


print("MLP---------------------------------------------")

print( (res_Min_MLP.accuracy.mean() - res_O_MLP.accuracy.mean()) / res_O_MLP.accuracy.mean() )
print( (res_Min_MLP.precision.mean() - res_O_MLP.precision.mean()) / res_O_MLP.precision.mean() )
print( (res_Min_MLP.recall.mean() - res_O_MLP.recall.mean()) / res_O_MLP.recall.mean() )
print( (res_Min_MLP.f1.mean() - res_O_MLP.f1.mean()) / res_O_MLP.f1.mean() )
print( (res_Min_MLP.auc.mean() - res_O_MLP.auc.mean()) / res_O_MLP.auc.mean() )
print( (res_Min_MLP.mcc.mean() - res_O_MLP.mcc.mean()) / res_O_MLP.mcc.mean() )

print("RF---------------------------------------------")
print( (res_Sta_RF.accuracy.mean() - res_O_RF.accuracy.mean()) / res_O_RF.accuracy.mean() )
print( (res_Sta_RF.precision.mean() - res_O_RF.precision.mean()) / res_O_RF.precision.mean() )
print( (res_Sta_RF.recall.mean() - res_O_RF.recall.mean()) / res_O_RF.recall.mean() )
print( (res_Sta_RF.f1.mean() - res_O_RF.f1.mean()) / res_O_RF.f1.mean() )
print( (res_Sta_RF.auc.mean() - res_O_RF.auc.mean()) / res_O_RF.auc.mean() )
print( (res_Sta_RF.mcc.mean() - res_O_RF.mcc.mean()) / res_O_RF.mcc.mean() )

print("LR---------------------------------------------")
print( (res_Sta_LR.accuracy.mean() - res_O_LR.accuracy.mean()) / res_O_LR.accuracy.mean() )
print( (res_Sta_LR.precision.mean() - res_O_LR.precision.mean()) / res_O_LR.precision.mean() )
print( (res_Sta_LR.recall.mean() - res_O_LR.recall.mean()) / res_O_LR.recall.mean() )
print( (res_Sta_LR.f1.mean() - res_O_LR.f1.mean()) / res_O_LR.f1.mean() )
print( (res_Sta_LR.auc.mean() - res_O_LR.auc.mean()) / res_O_LR.auc.mean() )
print( (res_Sta_LR.mcc.mean() - res_O_LR.mcc.mean()) / res_O_LR.mcc.mean() )


print("DT---------------------------------------------")
print( (res_Sta_DT.accuracy.mean() - res_O_DT.accuracy.mean()) / res_O_DT.accuracy.mean() )
print( (res_Sta_DT.precision.mean() - res_O_DT.precision.mean()) / res_O_DT.precision.mean() )
print( (res_Sta_DT.recall.mean() - res_O_DT.recall.mean()) / res_O_DT.recall.mean() )
print( (res_Sta_DT.f1.mean() - res_O_DT.f1.mean()) / res_O_DT.f1.mean() )
print( (res_Sta_DT.auc.mean() - res_O_DT.auc.mean()) / res_O_DT.auc.mean() )
print( (res_Sta_DT.mcc.mean() - res_O_DT.mcc.mean()) / res_O_DT.mcc.mean() )



print("NB---------------------------------------------")
print( (res_Sta_NB.accuracy.mean() - res_O_NB.accuracy.mean()) / res_O_NB.accuracy.mean() )
print( (res_Sta_NB.precision.mean() - res_O_NB.precision.mean()) / res_O_NB.precision.mean() )
print( (res_Sta_NB.recall.mean() - res_O_NB.recall.mean()) / res_O_NB.recall.mean() )
print( (res_Sta_NB.f1.mean() - res_O_NB.f1.mean()) / res_O_NB.f1.mean() )
print( (res_Sta_NB.auc.mean() - res_O_NB.auc.mean()) / res_O_NB.auc.mean() )
print( (res_Sta_NB.mcc.mean() - res_O_NB.mcc.mean()) / res_O_NB.mcc.mean() )

print("KNN---------------------------------------------")
print( (res_Sta_KNN.accuracy.mean() - res_O_KNN.accuracy.mean()) / res_O_KNN.accuracy.mean() )
print( (res_Sta_KNN.precision.mean() - res_O_KNN.precision.mean()) / res_O_KNN.precision.mean() )
print( (res_Sta_KNN.recall.mean() - res_O_KNN.recall.mean()) / res_O_KNN.recall.mean() )
print( (res_Sta_KNN.f1.mean() - res_O_KNN.f1.mean()) / res_O_KNN.f1.mean() )
print( (res_Sta_KNN.auc.mean() - res_O_KNN.auc.mean()) / res_O_KNN.auc.mean() )
print( (res_Sta_KNN.mcc.mean() - res_O_KNN.mcc.mean()) / res_O_KNN.mcc.mean() )


print("MLP---------------------------------------------")

print( (res_Sta_MLP.accuracy.mean() - res_O_MLP.accuracy.mean()) / res_O_MLP.accuracy.mean() )
print( (res_Sta_MLP.precision.mean() - res_O_MLP.precision.mean()) / res_O_MLP.precision.mean() )
print( (res_Sta_MLP.recall.mean() - res_O_MLP.recall.mean()) / res_O_MLP.recall.mean() )
print( (res_Sta_MLP.f1.mean() - res_O_MLP.f1.mean()) / res_O_MLP.f1.mean() )
print( (res_Sta_MLP.auc.mean() - res_O_MLP.auc.mean()) / res_O_MLP.auc.mean() )
print( (res_Sta_MLP.mcc.mean() - res_O_MLP.mcc.mean()) / res_O_MLP.mcc.mean() )

plt_O_RF_accuracy = {
    'O': res_O_RF.accuracy,
    'L': res_Log_RF.accuracy,
    'M': res_Min_RF.accuracy,
    'Z': res_Sta_RF.accuracy,
}
plt_O_RF_precision = {
    'O': res_O_RF.precision,
    'L': res_Log_RF.precision,
    'M': res_Min_RF.precision,
    'Z': res_Sta_RF.precision,
}
plt_O_RF_recall = {
    'O': res_O_RF.recall,
    'L': res_Log_RF.recall,
    'M': res_Min_RF.recall,
    'Z': res_Sta_RF.recall,
}

plt_O_RF_f1 = {
    'O': res_O_RF.f1,
    'L': res_Log_RF.f1,
    'M': res_Min_RF.f1,
    'Z': res_Sta_RF.f1,
}
plt_O_RF_auc = {
    'O': res_O_RF.auc,
    'L': res_Log_RF.auc,
    'M': res_Min_RF.auc,
    'Z': res_Sta_RF.auc,
}
plt_O_RF_mcc = {
    'O': res_O_RF.mcc,
    'L': res_Log_RF.mcc,
    'M': res_Min_RF.mcc,
    'Z': res_Sta_RF.mcc,
}
df1 = pd.DataFrame(plt_O_RF_accuracy)
df2 = pd.DataFrame(plt_O_RF_precision)
df3 = pd.DataFrame(plt_O_RF_recall)
df4 = pd.DataFrame(plt_O_RF_f1)
df5 = pd.DataFrame(plt_O_RF_auc)
df6 = pd.DataFrame(plt_O_RF_mcc)


plt_O_LR_accuracy = {
    'O': res_O_LR.accuracy,
    'L': res_Log_LR.accuracy,
    'M': res_Min_LR.accuracy,
    'Z': res_Sta_LR.accuracy,
}
plt_O_LR_precision = {
    'O': res_O_LR.precision,
    'L': res_Log_LR.precision,
    'M': res_Min_LR.precision,
    'Z': res_Sta_LR.precision,
}
plt_O_LR_recall = {
    'O': res_O_LR.recall,
    'L': res_Log_LR.recall,
    'M': res_Min_LR.recall,
    'Z': res_Sta_LR.recall,
}

plt_O_LR_f1 = {
    'O': res_O_LR.f1,
    'L': res_Log_LR.f1,
    'M': res_Min_LR.f1,
    'Z': res_Sta_LR.f1,
}
plt_O_LR_auc = {
    'O': res_O_LR.auc,
    'L': res_Log_LR.auc,
    'M': res_Min_LR.auc,
    'Z': res_Sta_LR.auc,
}
plt_O_LR_mcc = {
    'O': res_O_LR.mcc,
    'L': res_Log_LR.mcc,
    'M': res_Min_LR.mcc,
    'Z': res_Sta_LR.mcc,
}
df7 = pd.DataFrame(plt_O_LR_accuracy)
df8 = pd.DataFrame(plt_O_LR_precision)
df9 = pd.DataFrame(plt_O_LR_recall)
df10 = pd.DataFrame(plt_O_LR_f1)
df11 = pd.DataFrame(plt_O_LR_auc)
df12 = pd.DataFrame(plt_O_LR_mcc)



plt_O_DT_accuracy = {
    'O': res_O_DT.accuracy,
    'L': res_Log_DT.accuracy,
    'M': res_Min_DT.accuracy,
    'Z': res_Sta_DT.accuracy,
}
plt_O_DT_precision = {
    'O': res_O_DT.precision,
    'L': res_Log_DT.precision,
    'M': res_Min_DT.precision,
    'Z': res_Sta_DT.precision,
}
plt_O_DT_recall = {
    'O': res_O_DT.recall,
    'L': res_Log_DT.recall,
    'M': res_Min_DT.recall,
    'Z': res_Sta_DT.recall,
}

plt_O_DT_f1 = {
    'O': res_O_DT.f1,
    'L': res_Log_DT.f1,
    'M': res_Min_DT.f1,
    'Z': res_Sta_DT.f1,
}
plt_O_DT_auc = {
    'O': res_O_DT.auc,
    'L': res_Log_DT.auc,
    'M': res_Min_DT.auc,
    'Z': res_Sta_DT.auc,
}
plt_O_DT_mcc = {
    'O': res_O_DT.mcc,
    'L': res_Log_DT.mcc,
    'M': res_Min_DT.mcc,
    'Z': res_Sta_DT.mcc,
}
df13 = pd.DataFrame(plt_O_DT_accuracy)
df14 = pd.DataFrame(plt_O_DT_precision)
df15 = pd.DataFrame(plt_O_DT_recall)
df16 = pd.DataFrame(plt_O_DT_f1)
df17 = pd.DataFrame(plt_O_DT_auc)
df18 = pd.DataFrame(plt_O_DT_mcc)

plt_O_NB_accuracy = {
    'O': res_O_NB.accuracy,
    'L': res_Log_NB.accuracy,
    'M': res_Min_NB.accuracy,
    'Z': res_Sta_NB.accuracy,
}
plt_O_NB_precision = {
    'O': res_O_NB.precision,
    'L': res_Log_NB.precision,
    'M': res_Min_NB.precision,
    'Z': res_Sta_NB.precision,
}
plt_O_NB_recall = {
    'O': res_O_NB.recall,
    'L': res_Log_NB.recall,
    'M': res_Min_NB.recall,
    'Z': res_Sta_NB.recall,
}

plt_O_NB_f1 = {
    'O': res_O_NB.f1,
    'L': res_Log_NB.f1,
    'M': res_Min_NB.f1,
    'Z': res_Sta_NB.f1,
}
plt_O_NB_auc = {
    'O': res_O_NB.auc,
    'L': res_Log_NB.auc,
    'M': res_Min_NB.auc,
    'Z': res_Sta_NB.auc,
}
plt_O_NB_mcc = {
    'O': res_O_NB.mcc,
    'L': res_Log_NB.mcc,
    'M': res_Min_NB.mcc,
    'Z': res_Sta_NB.mcc,
}
df19 = pd.DataFrame(plt_O_NB_accuracy)
df20 = pd.DataFrame(plt_O_NB_precision)
df21 = pd.DataFrame(plt_O_NB_recall)
df22 = pd.DataFrame(plt_O_NB_f1)
df23 = pd.DataFrame(plt_O_NB_auc)
df24 = pd.DataFrame(plt_O_NB_mcc)

plt_O_KNN_accuracy = {
    'O': res_O_KNN.accuracy,
    'L': res_Log_KNN.accuracy,
    'M': res_Min_KNN.accuracy,
    'Z': res_Sta_KNN.accuracy,
}
plt_O_KNN_precision = {
    'O': res_O_KNN.precision,
    'L': res_Log_KNN.precision,
    'M': res_Min_KNN.precision,
    'Z': res_Sta_KNN.precision,
}
plt_O_KNN_recall = {
    'O': res_O_KNN.recall,
    'L': res_Log_KNN.recall,
    'M': res_Min_KNN.recall,
    'Z': res_Sta_KNN.recall,
}

plt_O_KNN_f1 = {
    'O': res_O_KNN.f1,
    'L': res_Log_KNN.f1,
    'M': res_Min_KNN.f1,
    'Z': res_Sta_KNN.f1,
}
plt_O_KNN_auc = {
    'O': res_O_KNN.auc,
    'L': res_Log_KNN.auc,
    'M': res_Min_KNN.auc,
    'Z': res_Sta_KNN.auc,
}
plt_O_KNN_mcc = {
    'O': res_O_KNN.mcc,
    'L': res_Log_KNN.mcc,
    'M': res_Min_KNN.mcc,
    'Z': res_Sta_KNN.mcc,
}
df25 = pd.DataFrame(plt_O_KNN_accuracy)
df26 = pd.DataFrame(plt_O_KNN_precision)
df27 = pd.DataFrame(plt_O_KNN_recall)
df28 = pd.DataFrame(plt_O_KNN_f1)
df29 = pd.DataFrame(plt_O_KNN_auc)
df30 = pd.DataFrame(plt_O_KNN_mcc)


plt_O_MLP_accuracy = {
    'O': res_O_MLP.accuracy,
    'L': res_Log_MLP.accuracy,
    'M': res_Min_MLP.accuracy,
    'Z': res_Sta_MLP.accuracy,
}
plt_O_MLP_precision = {
    'O': res_O_MLP.precision,
    'L': res_Log_MLP.precision,
    'M': res_Min_MLP.precision,
    'Z': res_Sta_MLP.precision,
}
plt_O_MLP_recall = {
    'O': res_O_MLP.recall,
    'L': res_Log_MLP.recall,
    'M': res_Min_MLP.recall,
    'Z': res_Sta_MLP.recall,
}

plt_O_MLP_f1 = {
    'O': res_O_MLP.f1,
    'L': res_Log_MLP.f1,
    'M': res_Min_MLP.f1,
    'Z': res_Sta_MLP.f1,
}
plt_O_MLP_auc = {
    'O': res_O_MLP.auc,
    'L': res_Log_MLP.auc,
    'M': res_Min_MLP.auc,
    'Z': res_Sta_MLP.auc,
}
plt_O_MLP_mcc = {
    'O': res_O_MLP.mcc,
    'L': res_Log_MLP.mcc,
    'M': res_Min_MLP.mcc,
    'Z': res_Sta_MLP.mcc,
}
df31 = pd.DataFrame(plt_O_MLP_accuracy)
df32 = pd.DataFrame(plt_O_MLP_precision)
df33 = pd.DataFrame(plt_O_MLP_recall)
df34 = pd.DataFrame(plt_O_MLP_f1)
df35 = pd.DataFrame(plt_O_MLP_auc)
df36 = pd.DataFrame(plt_O_MLP_mcc)

#绘制增强箱线图-用的是这个
with sns.axes_style('darkgrid'):
  fig, axes = plt.subplots(6, 6, figsize=(14, 14), sharex=True, sharey=True, dpi=350) # , dpi=350
  fig.subplots_adjust(wspace=0.075,hspace=0.075)

  #axes[0].set_title('1')
  #sns.boxplot(data=df1, orient='v', ax=axes[0])  # 普通

  axes[0][0].set_title('Accuracy')
  axes[0][0].set_ylabel("RF")
  #axes[0][0].set_yticks([0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1])

  sns.boxenplot(data=df1, orient='v', ax=axes[0][0])  # 增强

  axes[0][1].set_title('Precision')
  sns.boxenplot(data=df2, orient='v', ax=axes[0][1])  # 增强

  axes[0][2].set_title('Recall')
  sns.boxenplot(data=df3, orient='v', ax=axes[0][2])  # 增强

  axes[0][3].set_title('F1')
  sns.boxenplot(data=df4, orient='v', ax=axes[0][3])  # 增强

  axes[0][4].set_title('AUC')
  sns.boxenplot(data=df5, orient='v', ax=axes[0][4])  # 增强

  axes[0][5].set_title('MCC')
  sns.boxenplot(data=df6, orient='v', ax=axes[0][5])  # 增强

  axes[1][0].set_ylabel("LR")
  #axes[1][0].set_title('Accuracy')
  sns.boxenplot(data=df7, orient='v', ax=axes[1][0])  # 增强

  #axes[1][1].set_title('Precision')
  sns.boxenplot(data=df8, orient='v', ax=axes[1][1])  # 增强

  #axes[1][2].set_title('Recall')
  sns.boxenplot(data=df9, orient='v', ax=axes[1][2])  # 增强

  #axes[1][3].set_title('F1')
  sns.boxenplot(data=df10, orient='v', ax=axes[1][3])  # 增强

  #axes[1][4].set_title('AUC')
  sns.boxenplot(data=df11, orient='v', ax=axes[1][4])  # 增强

  #axes[1][5].set_title('MCC')
  sns.boxenplot(data=df12, orient='v', ax=axes[1][5])  # 增强

  axes[2][0].set_ylabel("DT")
  #axes[2][0].set_title('Accuracy')
  sns.boxenplot(data=df13, orient='v', ax=axes[2][0])  # 增强

  #axes[2][1].set_title('Precision')
  sns.boxenplot(data=df14, orient='v', ax=axes[2][1])  # 增强

  #axes[2][2].set_title('Recall')
  sns.boxenplot(data=df15, orient='v', ax=axes[2][2])  # 增强

  #axes[2][3].set_title('F1')
  sns.boxenplot(data=df16, orient='v', ax=axes[2][3])  # 增强

  #axes[2][4].set_title('AUC')
  sns.boxenplot(data=df17, orient='v', ax=axes[2][4])  # 增强

  #axes[2][5].set_title('MCC')
  sns.boxenplot(data=df18, orient='v', ax=axes[2][5])  # 增强


  axes[3][0].set_ylabel("NB")
  #axes[3][0].set_title('Accuracy')
  sns.boxenplot(data=df19, orient='v', ax=axes[3][0])  # 增强

  #axes[3][1].set_title('Precision')
  sns.boxenplot(data=df20, orient='v', ax=axes[3][1])  # 增强

  #axes[3][2].set_title('Recall')
  sns.boxenplot(data=df21, orient='v', ax=axes[3][2])  # 增强

  #axes[3][3].set_title('F1')
  sns.boxenplot(data=df22, orient='v', ax=axes[3][3])  # 增强

  #axes[3][4].set_title('AUC')
  sns.boxenplot(data=df23, orient='v', ax=axes[3][4])  # 增强

  #axes[3][5].set_title('MCC')
  sns.boxenplot(data=df24, orient='v', ax=axes[3][5])  # 增强



  axes[4][0].set_ylabel("KNN")
  #axes[4][0].set_title('Accuracy')
  sns.boxenplot(data=df25, orient='v', ax=axes[4][0])  # 增强

  #axes[4][1].set_title('Precision')
  sns.boxenplot(data=df26, orient='v', ax=axes[4][1])  # 增强

  #axes[4][2].set_title('Recall')
  sns.boxenplot(data=df27, orient='v', ax=axes[4][2])  # 增强

  #axes[4][3].set_title('F1')
  sns.boxenplot(data=df28, orient='v', ax=axes[4][3])  # 增强

  #axes[4][4].set_title('AUC')
  sns.boxenplot(data=df29, orient='v', ax=axes[4][4])  # 增强

  #axes[4][5].set_title('MCC')
  sns.boxenplot(data=df30, orient='v', ax=axes[4][5])  # 增强

  axes[5][0].set_ylabel("MLP")
  #axes[5][0].set_title('Accuracy')
  sns.boxenplot(data=df31, orient='v', ax=axes[5][0])  # 增强

  #axes[5][1].set_title('Precision')
  sns.boxenplot(data=df32, orient='v', ax=axes[5][1])  # 增强

  #axes[5][2].set_title('Recall')
  sns.boxenplot(data=df33, orient='v', ax=axes[5][2])  # 增强

  #axes[5][3].set_title('F1')
  sns.boxenplot(data=df34, orient='v', ax=axes[5][3])  # 增强

  #axes[5][4].set_title('AUC')
  sns.boxenplot(data=df35, orient='v', ax=axes[5][4])  # 增强

  #axes[5][5].set_title('MCC')
  sns.boxenplot(data=df36, orient='v', ax=axes[5][5])  # 增强


  plt.show()
  #plt.savefig(rootpath + results + "boxenplotfig.png", dpi=350) #指定分辨率

"""plt_O_RF = {
    'Orecall': res_O_RF.recall,
    'Lrecall': res_Log_RF.recall,
    'Mrecall': res_Min_RF.recall,
    'Srecall': res_Sta_RF.recall,
}
plt_O_NB = {
    'Orecall': res_O_NB.recall,
    'Lrecall': res_Log_NB.recall,
    'Mrecall': res_Min_NB.recall,
    'Srecall': res_Sta_NB.recall,
}
plt_O_DT = {
    'Orecall': res_O_DT.recall,
    'Lrecall': res_Log_DT.recall,
    'Mrecall': res_Min_DT.recall,
    'Srecall': res_Sta_DT.recall,
}
plt_O_KNN = {
    'Orecall': res_O_KNN.recall,
    'Lrecall': res_Log_KNN.recall,
    'Mrecall': res_Min_KNN.recall,
    'Srecall': res_Sta_KNN.recall,
}
plt_O_MLP = {
    'Orecall': res_O_MLP.recall,
    'Lrecall': res_Log_MLP.recall,
    'Mrecall': res_Min_MLP.recall,
    'Srecall': res_Sta_MLP.recall,
}


df1 = pd.DataFrame(plt_O_RF)
df2 = pd.DataFrame(plt_O_NB)
df3 = pd.DataFrame(plt_O_DT)
df4 = pd.DataFrame(plt_O_KNN)
df5 = pd.DataFrame(plt_O_MLP)


df1.plot.box(title="RF")
df2.plot.box(title="NB")
df3.plot.box(title="DT")
df4.plot.box(title="KNN")
df5.plot.box(title="MLP")


plt.grid(linestyle="--", alpha=0.3)

plt.show()

# 作图 初步图不美观 后期改良

"

plt_O_RF = {
    'Oauc': res_O_RF.auc,
    'Lauc': res_Log_RF.auc,
    'Mauc': res_Min_RF.auc,
    'Sauc': res_Sta_RF.auc,
}
plt_O_NB = {
    'Oauc': res_O_NB.auc,
    'Lauc': res_Log_NB.auc,
    'Mauc': res_Min_NB.auc,
    'Sauc': res_Sta_NB.auc,
}
plt_O_DT = {
    'Oauc': res_O_DT.auc,
    'Lauc': res_Log_DT.auc,
    'Mauc': res_Min_DT.auc,
    'Sauc': res_Sta_DT.auc,
}
plt_O_KNN = {
    'Oauc': res_O_KNN.auc,
    'Lauc': res_Log_KNN.auc,
    'Mauc': res_Min_KNN.auc,
    'Sauc': res_Sta_KNN.auc,
}
plt_O_MLP = {
    'Oauc': res_O_MLP.auc,
    'Lauc': res_Log_MLP.auc,
    'Mauc': res_Min_MLP.auc,
    'Sauc': res_Sta_MLP.auc,
}


df1 = pd.DataFrame(plt_O_RF)
df2 = pd.DataFrame(plt_O_NB)
df3 = pd.DataFrame(plt_O_DT)
df4 = pd.DataFrame(plt_O_KNN)
df5 = pd.DataFrame(plt_O_MLP)


df1.plot.box(title="RF")
df2.plot.box(title="NB")
df3.plot.box(title="DT")
df4.plot.box(title="KNN")
df5.plot.box(title="MLP")


plt.grid(linestyle="--", alpha=0.3)

plt.show()

# 作图 初步图不美观 后期改良

plt_O_RF = {
    'Of1': res_O_RF.f1,
    'Lf1': res_Log_RF.f1,
    'Mf1': res_Min_RF.f1,
    'Sf1': res_Sta_RF.f1,
}
plt_O_NB = {
    'Of1': res_O_NB.f1,
    'Lf1': res_Log_NB.f1,
    'Mf1': res_Min_NB.f1,
    'Sf1': res_Sta_NB.f1,
}
plt_O_DT = {
    'Of1': res_O_DT.f1,
    'Lf1': res_Log_DT.f1,
    'Mf1': res_Min_DT.f1,
    'Sf1': res_Sta_DT.f1,
}
plt_O_KNN = {
    'Of1': res_O_KNN.f1,
    'Lf1': res_Log_KNN.f1,
    'Mf1': res_Min_KNN.f1,
    'Sf1': res_Sta_KNN.f1,
}
plt_O_MLP = {
    'Of1': res_O_MLP.f1,
    'Lf1': res_Log_MLP.f1,
    'Mf1': res_Min_MLP.f1,
    'Sf1': res_Sta_MLP.f1,
}


df1 = pd.DataFrame(plt_O_RF)
df2 = pd.DataFrame(plt_O_NB)
df3 = pd.DataFrame(plt_O_DT)
df4 = pd.DataFrame(plt_O_KNN)
df5 = pd.DataFrame(plt_O_MLP)


df1.plot.box(title="RF")
df2.plot.box(title="NB")
df3.plot.box(title="DT")
df4.plot.box(title="KNN")
df5.plot.box(title="MLP")


plt.grid(linestyle="--", alpha=0.3)

plt.show()

# 作图 初步图不美观 后期改良

plt_O_RF = {
    'Omcc': res_O_RF.mcc,
    'Lmcc': res_Log_RF.mcc,
    'Mmcc': res_Min_RF.mcc,
    'Smcc': res_Sta_RF.mcc,
}
plt_O_NB = {
    'Omcc': res_O_NB.mcc,
    'Lmcc': res_Log_NB.mcc,
    'Mmcc': res_Min_NB.mcc,
    'Smcc': res_Sta_NB.mcc,
}
plt_O_DT = {
    'Omcc': res_O_DT.mcc,
    'Lmcc': res_Log_DT.mcc,
    'Mmcc': res_Min_DT.mcc,
    'Smcc': res_Sta_DT.mcc,
}
plt_O_KNN = {
    'Omcc': res_O_KNN.mcc,
    'Lmcc': res_Log_KNN.mcc,
    'Mmcc': res_Min_KNN.mcc,
    'Smcc': res_Sta_KNN.mcc,
}
plt_O_MLP = {
    'Omcc': res_O_MLP.mcc,
    'Lmcc': res_Log_MLP.mcc,
    'Mmcc': res_Min_MLP.mcc,
    'Smcc': res_Sta_MLP.mcc,
}


dmcc = pd.DataFrame(plt_O_RF)
df2 = pd.DataFrame(plt_O_NB)
df3 = pd.DataFrame(plt_O_DT)
df4 = pd.DataFrame(plt_O_KNN)
df5 = pd.DataFrame(plt_O_MLP)


dmcc.plot.box(title="RF")
df2.plot.box(title="NB")
df3.plot.box(title="DT")
df4.plot.box(title="KNN")
df5.plot.box(title="MLP")


plt.grid(linestyle="--", alpha=0.3)

plt.show()

# 作图 初步图不美观 后期改良

plt_O_RF = {
    'Oprecision': res_O_RF.precision,
    'Lprecision': res_Log_RF.precision,
    'Mprecision': res_Min_RF.precision,
    'Sprecision': res_Sta_RF.precision,
}
plt_O_NB = {
    'Oprecision': res_O_NB.precision,
    'Lprecision': res_Log_NB.precision,
    'Mprecision': res_Min_NB.precision,
    'Sprecision': res_Sta_NB.precision,
}
plt_O_DT = {
    'Oprecision': res_O_DT.precision,
    'Lprecision': res_Log_DT.precision,
    'Mprecision': res_Min_DT.precision,
    'Sprecision': res_Sta_DT.precision,
}
plt_O_KNN = {
    'Oprecision': res_O_KNN.precision,
    'Lprecision': res_Log_KNN.precision,
    'Mprecision': res_Min_KNN.precision,
    'Sprecision': res_Sta_KNN.precision,
}
plt_O_MLP = {
    'Oprecision': res_O_MLP.precision,
    'Lprecision': res_Log_MLP.precision,
    'Mprecision': res_Min_MLP.precision,
    'Sprecision': res_Sta_MLP.precision,
}


df1 = pd.DataFrame(plt_O_RF)
df2 = pd.DataFrame(plt_O_NB)
df3 = pd.DataFrame(plt_O_DT)
df4 = pd.DataFrame(plt_O_KNN)
df5 = pd.DataFrame(plt_O_MLP)


df1.plot.box(title="RF")
df2.plot.box(title="NB")
df3.plot.box(title="DT")
df4.plot.box(title="KNN")
df5.plot.box(title="MLP")


plt.grid(linestyle="--", alpha=0.3)

plt.show()

# 作图 初步图不美观 后期改良
"

plt_Log_O_RF = {
    'accuracy': res_Log_O_RF.accuracy,
    'precision': res_Log_O_RF.precision,
    'recall': res_Log_O_RF.recall,
    'f1': res_Log_O_RF.f1,
    'auc': res_Log_O_RF.auc,
    'mcc': res_Log_O_RF.mcc
}
plt_Log_O_LR = {
    'accuracy': res_Log_O_LR.accuracy,
    'precision': res_Log_O_LR.precision,
    'recall': res_Log_O_LR.recall,
    'f1': res_Log_O_LR.f1,
    'auc': res_Log_O_LR.auc,
    'mcc': res_Log_O_LR.mcc
}
plt_Log_O_DT = {
    'accuracy': res_Log_O_DT.accuracy,
    'precision': res_Log_O_DT.precision,
    'recall': res_Log_O_DT.recall,
    'f1': res_Log_O_DT.f1,
    'auc': res_Log_O_DT.auc,
    'mcc': res_Log_O_DT.mcc
}
plt_Log_O_NB = {
    'accuracy': res_Log_O_NB.accuracy,
    'precision': res_Log_O_NB.precision,
    'recall': res_Log_O_NB.recall,
    'f1': res_Log_O_NB.f1,
    'auc': res_Log_O_NB.auc,
    'mcc': res_Log_O_NB.mcc
}
plt_Log_O_KNN = {
    'accuracy': res_Log_O_KNN.accuracy,
    'precision': res_Log_O_KNN.precision,
    'recall': res_Log_O_KNN.recall,
    'f1': res_Log_O_KNN.f1,
    'auc': res_Log_O_KNN.auc,
    'mcc': res_Log_O_KNN.mcc
}
plt_Log_O_MLP = {
    'accuracy': res_Log_O_MLP.accuracy,
    'precision': res_Log_O_MLP.precision,
    'recall': res_Log_O_MLP.recall,
    'f1': res_Log_O_MLP.f1,
    'auc': res_Log_O_MLP.auc,
    'mcc': res_Log_O_MLP.mcc
}

df1 = pd.DataFrame(plt_Log_O_RF)
df2 = pd.DataFrame(plt_Log_O_LR)
df3 = pd.DataFrame(plt_Log_O_DT)
df4 = pd.DataFrame(plt_Log_O_NB)
df5 = pd.DataFrame(plt_Log_O_KNN)
df6 = pd.DataFrame(plt_Log_O_MLP)

df1.plot.box(title="RF")
df2.plot.box(title="LR")
df3.plot.box(title="DT")
df4.plot.box(title="NB")
df5.plot.box(title="KNN")
df6.plot.box(title="MLP")

plt.grid(linestyle="--", alpha=0.3)

plt.show()

# 作图 初步图不美观 后期改良
"""