# -*- coding: utf-8 -*-
"""1-permutation_different_metric_rank_diff_cls_Accuracy

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12qwPvp9jdVLm-Y4PKEIiOcuAAOO-6-1m
"""

import scipy.io.arff
import pandas as pd
import numpy as np
from sklearn.utils import resample # for Bootstrap sampling
import shutil
import os

from numpy import array

#Import resampling and modeling algorithms

from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.naive_bayes import GaussianNB
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.neural_network import MLPClassifier

from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
from sklearn.metrics import f1_score
from sklearn.metrics import roc_auc_score
from sklearn.metrics import matthews_corrcoef

import warnings

warnings.filterwarnings("ignore")

# click load google drive
rootpath = "/content/drive/MyDrive/Colab Notebooks/1/"

datasets_original = "datasets-original/"
datasets_discretize = "datasets-discretize/"
datasets_log = "datasets-log/"
datasets_minmax = "datasets-min-max/"
datasets_standardize = "datasets-standardize/"

AEEEM = ["EQ"]
ReLink = ["Zxing", "Apache", "Safe"]
Promise = [ "camel-1.2", "ivy-1.1", "jedit-3.2", "log4j-1.1", "lucene-2.0", "lucene-2.2", "lucene-2.4",
        "poi-1.5", "poi-2.5", "poi-3.0", "xalan-2.5", "xalan-2.6"]

ARFF = "ARFF/"
CSV = "CSV/"

BOOTSTRAP = "BOOTSTRAP/"


# some data sets imbanlance so we exclude it because these classifier have precision recall and f1 = 0  so we select 30-70% percent of defective

data_o_Promise = pd.DataFrame(pd.read_csv(rootpath + datasets_original + "Promise-permutation-test-accuracy-rank.csv"))

data_o_ReLink = pd.DataFrame(pd.read_csv(rootpath + datasets_original + "ReLink-permutation-test-accuracy-rank.csv"))

data_o_AEEEM = pd.DataFrame(pd.read_csv(rootpath + datasets_original + "AEEEM-permutation-test-accuracy-rank.csv"))

data_log_Promise = pd.DataFrame(pd.read_csv(rootpath + datasets_log + "Promise-permutation-test-accuracy-rank.csv"))

data_log_ReLink = pd.DataFrame(pd.read_csv(rootpath + datasets_log + "ReLink-permutation-test-accuracy-rank.csv"))

data_log_AEEEM = pd.DataFrame(pd.read_csv(rootpath + datasets_log + "AEEEM-permutation-test-accuracy-rank.csv"))


data_min_Promise = pd.DataFrame(pd.read_csv(rootpath + datasets_minmax + "Promise-permutation-test-accuracy-rank.csv"))

data_min_ReLink = pd.DataFrame(pd.read_csv(rootpath + datasets_minmax + "ReLink-permutation-test-accuracy-rank.csv"))

data_min_AEEEM = pd.DataFrame(pd.read_csv(rootpath + datasets_minmax + "AEEEM-permutation-test-accuracy-rank.csv"))

data_sta_Promise = pd.DataFrame(pd.read_csv(rootpath + datasets_standardize + "Promise-permutation-test-accuracy-rank.csv"))

data_sta_ReLink = pd.DataFrame(pd.read_csv(rootpath + datasets_standardize + "ReLink-permutation-test-accuracy-rank.csv"))

data_sta_AEEEM = pd.DataFrame(pd.read_csv(rootpath + datasets_standardize + "AEEEM-permutation-test-accuracy-rank.csv"))


'''

print(data_o_Promise.shape)
print(data_log_Promise.shape)
print(data_o_Promise.shape[0])
print(data_log_Promise.shape[1])
print(data_o_Promise.index)

'''


O = [data_o_Promise, data_o_ReLink, data_o_AEEEM]
L = [data_log_Promise, data_log_ReLink, data_log_AEEEM]
M = [data_min_Promise, data_min_ReLink, data_min_AEEEM]
S = [data_sta_Promise, data_sta_ReLink, data_sta_AEEEM]

print(data_o_Promise.head())
print(data_o_Promise.loc[1].values[0])
print(data_o_Promise.shape)
print(data_log_Promise.shape)
print(data_o_Promise.shape[0])
print(data_log_Promise.shape[1])
print(data_o_Promise.index)

print(data_o_Promise.shape)
print(data_o_ReLink.shape)
print(data_o_AEEEM.shape)
print(data_log_Promise.shape)
print(data_log_ReLink.shape)
print(data_log_AEEEM.shape)

# 按分类器计算特征差异 有6个分类器 每个分类器有25次实验


# AEEEM 150行63列 1个数据集 每个数据集做6个分类器*25次采样=150次实验 61列属性 2列自己加的标记 63列属性
# Promise 1800行22列 12个数据集 每个数据集做6个分类器*25次采样=1800次实验
# ReLink 450行28列 3个数据集 每个数据集做6个分类器*25次采样=450次实验
# 将特征差异按分类器类型计算
# AEEEM 仅有一个 EQ 数据集 有150次实验结果 其中第一个25次是 RF 第二个25次是 LR 第三个25次是 NB 第四个25次是 DT 第五个25次是 KNN 第六个25次是 MLP
# ReLink 有 三个数据集 Zxing Apache Safe 有450次实验结果 每个数据集各150次实验 每个数据集的150次实验都按照 RF-25 LR-25 NB-25 DT-25 KNN-25 MLP-25 构成
# Promise 有 12个数据集 有1800次实验结果 每个数据集各150次实验
# 每一个数据集的第一个项目的 150次实验
# 计算 RF 的特征差异 循环从0至24 0*gap - 1*gap-1   0*gap+k  l=0
# 计算 LR 的特征差异 循环从25至49 1*gap - 2*gap-1  1*gap+k
# 计算 NB 循环从50至74 2*gap - 3*gap-1        2*gap+k
# 计算 DT 循环从75至99 3*gap - 4*gap-1        3*gap+k
# 计算 KNN 循环从100至124 4*gap - 5*gap-1       4*gap+k
# 计算 MLP 循环从125至149 5*gap - 6*gap-1       5*gap+k
# 每一个数据集的第二个项目的 150次实验
# 计算 RF 的特征差异 循环从150至174 6*gap - 7*gap-1  6*gap+k  l=1
# 计算 LR 的特征差异 循环从175至199 7*gap - 8*gap-1  7*gap+k
# 计算 NB 的特征差异 循环从200至224 8*gap - 9*gap-1  8*gap+k
# 计算 DT 的特征差异 循环从225至249 9*gap - 10*gap-1  9*gap+k
# 计算 KNN 的特征差异 循环从250至274 10*gap - 11*gap-1 10*gap+k
# 计算 MLP 的特征差异 循环从275至299 11*gap - 12*gap-1 11*gap+k
# 每一个数据集的第三个项目的 150次实验
# 计算 RF 的特征差异 循环从300至324 12*gap - 13*gap-1  12*gap+k l=2
# 计算 LR 的特征差异 循环从325至349 13*gap - 14*gap-1  13*gap+k
# 计算 NB 的特征差异 循环从350至374 14*gap - 15*gap-1  14*gap+k
# 计算 DT 的特征差异 循环从375至399 15*gap - 16*gap-1  15*gap+k
# 计算 KNN 的特征差异 循环从400至424 16*gap - 17*gap-1  16*gap+k
# 计算 MLP 的特征差异 循环从425至449 17*gap - 18*gap-1  17*gap+k

# 定义间隔 gap = 25 k 从0至24取值 那么 如果一个数据集仅有一个项目 即长度为 len 循环为 len

RF_diff_L_O_1_list = []
RF_diff_L_O_2_list = []
RF_diff_L_O_3_list = []
RF_diff_L_O_4_list = []
RF_diff_L_O_5_list = []

RF_diff_M_O_1_list = []
RF_diff_M_O_2_list = []
RF_diff_M_O_3_list = []
RF_diff_M_O_4_list = []
RF_diff_M_O_5_list = []

RF_diff_S_O_1_list = []
RF_diff_S_O_2_list = []
RF_diff_S_O_3_list = []
RF_diff_S_O_4_list = []
RF_diff_S_O_5_list = []

LR_diff_L_O_1_list = []
LR_diff_L_O_2_list = []
LR_diff_L_O_3_list = []
LR_diff_L_O_4_list = []
LR_diff_L_O_5_list = []

LR_diff_M_O_1_list = []
LR_diff_M_O_2_list = []
LR_diff_M_O_3_list = []
LR_diff_M_O_4_list = []
LR_diff_M_O_5_list = []

LR_diff_S_O_1_list = []
LR_diff_S_O_2_list = []
LR_diff_S_O_3_list = []
LR_diff_S_O_4_list = []
LR_diff_S_O_5_list = []

NB_diff_L_O_1_list = []
NB_diff_L_O_2_list = []
NB_diff_L_O_3_list = []
NB_diff_L_O_4_list = []
NB_diff_L_O_5_list = []

NB_diff_M_O_1_list = []
NB_diff_M_O_2_list = []
NB_diff_M_O_3_list = []
NB_diff_M_O_4_list = []
NB_diff_M_O_5_list = []

NB_diff_S_O_1_list = []
NB_diff_S_O_2_list = []
NB_diff_S_O_3_list = []
NB_diff_S_O_4_list = []
NB_diff_S_O_5_list = []

DT_diff_L_O_1_list = []
DT_diff_L_O_2_list = []
DT_diff_L_O_3_list = []
DT_diff_L_O_4_list = []
DT_diff_L_O_5_list = []

DT_diff_M_O_1_list = []
DT_diff_M_O_2_list = []
DT_diff_M_O_3_list = []
DT_diff_M_O_4_list = []
DT_diff_M_O_5_list = []

DT_diff_S_O_1_list = []
DT_diff_S_O_2_list = []
DT_diff_S_O_3_list = []
DT_diff_S_O_4_list = []
DT_diff_S_O_5_list = []

KNN_diff_L_O_1_list = []
KNN_diff_L_O_2_list = []
KNN_diff_L_O_3_list = []
KNN_diff_L_O_4_list = []
KNN_diff_L_O_5_list = []

KNN_diff_M_O_1_list = []
KNN_diff_M_O_2_list = []
KNN_diff_M_O_3_list = []
KNN_diff_M_O_4_list = []
KNN_diff_M_O_5_list = []

KNN_diff_S_O_1_list = []
KNN_diff_S_O_2_list = []
KNN_diff_S_O_3_list = []
KNN_diff_S_O_4_list = []
KNN_diff_S_O_5_list = []

MLP_diff_L_O_1_list = []
MLP_diff_L_O_2_list = []
MLP_diff_L_O_3_list = []
MLP_diff_L_O_4_list = []
MLP_diff_L_O_5_list = []

MLP_diff_M_O_1_list = []
MLP_diff_M_O_2_list = []
MLP_diff_M_O_3_list = []
MLP_diff_M_O_4_list = []
MLP_diff_M_O_5_list = []

MLP_diff_S_O_1_list = []
MLP_diff_S_O_2_list = []
MLP_diff_S_O_3_list = []
MLP_diff_S_O_4_list = []
MLP_diff_S_O_5_list = []

# 按分类器计算 所以一个一个算 先算RF 分类器在所有数据集上的特征差异
# 按数据集项目计算 分开再相加

# 每个分类器依次计算25次实验的差异
# 先算 AEEEM 数据集所有项目 的特征差异

gap = 25
for k in range(gap):

  for j in range(data_o_AEEEM.shape[1]): # 20 26 61

      # 计算 RF top-1 diff
      if(data_o_AEEEM.loc[(0*gap+k)].values[j] == 1):  #第1行 第1列至第20列 找rank为1 的特征序号 0*gap+k 意味着从0行到24行 这些是RF的结果

        AEEEM_attr_1 = list(data_o_AEEEM)[j]   # 得到 1-rank 特征
        AEEEM_L_new_rank_1 = data_log_AEEEM.loc[(0*gap+k),AEEEM_attr_1] #1-rank 特征在另一个数据集对应行的 rank
        AEEEM_M_new_rank_1 = data_min_AEEEM.loc[(0*gap+k),AEEEM_attr_1]
        AEEEM_S_new_rank_1 = data_sta_AEEEM.loc[(0*gap+k),AEEEM_attr_1]

        AEEEM_L_diff_1 = abs(AEEEM_L_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3
        AEEEM_M_diff_1 = abs(AEEEM_M_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3
        AEEEM_S_diff_1 = abs(AEEEM_S_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3

        RF_diff_L_O_1_list.append(AEEEM_L_diff_1)
        RF_diff_M_O_1_list.append(AEEEM_M_diff_1)
        RF_diff_S_O_1_list.append(AEEEM_S_diff_1)


      # 计算 RF top-2 diff
      if(data_o_AEEEM.loc[(0*gap+k)].values[j] == 2):

        AEEEM_attr_2 = list(data_o_AEEEM)[j]
        AEEEM_L_new_rank_2 = data_log_AEEEM.loc[(0*gap+k),AEEEM_attr_2]
        AEEEM_M_new_rank_2 = data_min_AEEEM.loc[(0*gap+k),AEEEM_attr_2]
        AEEEM_S_new_rank_2 = data_sta_AEEEM.loc[(0*gap+k),AEEEM_attr_2]

        AEEEM_L_diff_2 = abs(AEEEM_L_new_rank_2 - 2)
        AEEEM_M_diff_2 = abs(AEEEM_M_new_rank_2 - 2)
        AEEEM_S_diff_2 = abs(AEEEM_S_new_rank_2 - 2)

        RF_diff_L_O_2_list.append(AEEEM_L_diff_2)
        RF_diff_M_O_2_list.append(AEEEM_M_diff_2)
        RF_diff_S_O_2_list.append(AEEEM_S_diff_2)

      # 计算 RF top-3 diff
      if(data_o_AEEEM.loc[(0*gap+k)].values[j] == 3):

        AEEEM_attr_3 = list(data_o_AEEEM)[j]
        AEEEM_L_new_rank_3 = data_log_AEEEM.loc[(0*gap+k),AEEEM_attr_3]
        AEEEM_M_new_rank_3 = data_min_AEEEM.loc[(0*gap+k),AEEEM_attr_3]
        AEEEM_S_new_rank_3 = data_sta_AEEEM.loc[(0*gap+k),AEEEM_attr_3]

        AEEEM_L_diff_3 = abs(AEEEM_L_new_rank_3 - 3)
        AEEEM_M_diff_3 = abs(AEEEM_M_new_rank_3 - 3)
        AEEEM_S_diff_3 = abs(AEEEM_S_new_rank_3 - 3)

        RF_diff_L_O_3_list.append(AEEEM_L_diff_3)
        RF_diff_M_O_3_list.append(AEEEM_M_diff_3)
        RF_diff_S_O_3_list.append(AEEEM_S_diff_3)

      # 计算 RF top-4 diff
      if(data_o_AEEEM.loc[(0*gap+k)].values[j] == 4):

        AEEEM_attr_4 = list(data_o_AEEEM)[j]
        AEEEM_L_new_rank_4 = data_log_AEEEM.loc[(0*gap+k),AEEEM_attr_4]
        AEEEM_M_new_rank_4 = data_min_AEEEM.loc[(0*gap+k),AEEEM_attr_4]
        AEEEM_S_new_rank_4 = data_sta_AEEEM.loc[(0*gap+k),AEEEM_attr_4]

        AEEEM_L_diff_4 = abs(AEEEM_L_new_rank_4 - 4)
        AEEEM_M_diff_4 = abs(AEEEM_M_new_rank_4 - 4)
        AEEEM_S_diff_4 = abs(AEEEM_S_new_rank_4 - 4)

        RF_diff_L_O_4_list.append(AEEEM_L_diff_4)
        RF_diff_M_O_4_list.append(AEEEM_M_diff_4)
        RF_diff_S_O_4_list.append(AEEEM_S_diff_4)

      # 计算 RF top-5 diff
      if(data_o_AEEEM.loc[(0*gap+k)].values[j] == 5):

        AEEEM_attr_5 = list(data_o_AEEEM)[j]
        AEEEM_L_new_rank_5 = data_log_AEEEM.loc[(0*gap+k),AEEEM_attr_5]
        AEEEM_M_new_rank_5 = data_min_AEEEM.loc[(0*gap+k),AEEEM_attr_5]
        AEEEM_S_new_rank_5 = data_sta_AEEEM.loc[(0*gap+k),AEEEM_attr_5]

        AEEEM_L_diff_5 = abs(AEEEM_L_new_rank_5 - 5)
        AEEEM_M_diff_5 = abs(AEEEM_M_new_rank_5 - 5)
        AEEEM_S_diff_5 = abs(AEEEM_S_new_rank_5 - 5)

        RF_diff_L_O_5_list.append(AEEEM_L_diff_5)
        RF_diff_M_O_5_list.append(AEEEM_M_diff_5)
        RF_diff_S_O_5_list.append(AEEEM_S_diff_5)

      # 计算 LR top-1 diff
      if(data_o_AEEEM.loc[(1*gap+k)].values[j] == 1):    # 1*gap+k 意味着从25行到49行 是RF分类器的结果

        AEEEM_attr_1 = list(data_o_AEEEM)[j]
        AEEEM_L_new_rank_1 = data_log_AEEEM.loc[(1*gap+k),AEEEM_attr_1]
        AEEEM_M_new_rank_1 = data_min_AEEEM.loc[(1*gap+k),AEEEM_attr_1]
        AEEEM_S_new_rank_1 = data_sta_AEEEM.loc[(1*gap+k),AEEEM_attr_1]

        AEEEM_L_diff_1 = abs(AEEEM_L_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3
        AEEEM_M_diff_1 = abs(AEEEM_M_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3
        AEEEM_S_diff_1 = abs(AEEEM_S_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3

        LR_diff_L_O_1_list.append(AEEEM_L_diff_1)
        LR_diff_M_O_1_list.append(AEEEM_M_diff_1)
        LR_diff_S_O_1_list.append(AEEEM_S_diff_1)

      # 计算 LR top-2 diff
      if(data_o_AEEEM.loc[(1*gap+k)].values[j] == 2):

        AEEEM_attr_2 = list(data_o_AEEEM)[j]
        AEEEM_L_new_rank_2 = data_log_AEEEM.loc[(1*gap+k),AEEEM_attr_2]
        AEEEM_M_new_rank_2 = data_min_AEEEM.loc[(1*gap+k),AEEEM_attr_2]
        AEEEM_S_new_rank_2 = data_sta_AEEEM.loc[(1*gap+k),AEEEM_attr_2]

        AEEEM_L_diff_2 = abs(AEEEM_L_new_rank_2 - 2)
        AEEEM_M_diff_2 = abs(AEEEM_M_new_rank_2 - 2)
        AEEEM_S_diff_2 = abs(AEEEM_S_new_rank_2 - 2)

        LR_diff_L_O_2_list.append(AEEEM_L_diff_2)
        LR_diff_M_O_2_list.append(AEEEM_M_diff_2)
        LR_diff_S_O_2_list.append(AEEEM_S_diff_2)

      # 计算 LR top-3 diff
      if(data_o_AEEEM.loc[(1*gap+k)].values[j] == 3):

        AEEEM_attr_3 = list(data_o_AEEEM)[j]
        AEEEM_L_new_rank_3 = data_log_AEEEM.loc[(1*gap+k),AEEEM_attr_3]
        AEEEM_M_new_rank_3 = data_min_AEEEM.loc[(1*gap+k),AEEEM_attr_3]
        AEEEM_S_new_rank_3 = data_sta_AEEEM.loc[(1*gap+k),AEEEM_attr_3]

        AEEEM_L_diff_3 = abs(AEEEM_L_new_rank_3 - 3)
        AEEEM_M_diff_3 = abs(AEEEM_M_new_rank_3 - 3)
        AEEEM_S_diff_3 = abs(AEEEM_S_new_rank_3 - 3)

        LR_diff_L_O_3_list.append(AEEEM_L_diff_3)
        LR_diff_M_O_3_list.append(AEEEM_M_diff_3)
        LR_diff_S_O_3_list.append(AEEEM_S_diff_3)

      # 计算 LR top-4 diff
      if(data_o_AEEEM.loc[(1*gap+k)].values[j] == 4):

        AEEEM_attr_4 = list(data_o_AEEEM)[j]
        AEEEM_L_new_rank_4 = data_log_AEEEM.loc[(1*gap+k),AEEEM_attr_4]
        AEEEM_M_new_rank_4 = data_min_AEEEM.loc[(1*gap+k),AEEEM_attr_4]
        AEEEM_S_new_rank_4 = data_sta_AEEEM.loc[(1*gap+k),AEEEM_attr_4]

        AEEEM_L_diff_4 = abs(AEEEM_L_new_rank_4 - 4)
        AEEEM_M_diff_4 = abs(AEEEM_M_new_rank_4 - 4)
        AEEEM_S_diff_4 = abs(AEEEM_S_new_rank_4 - 4)

        LR_diff_L_O_4_list.append(AEEEM_L_diff_4)
        LR_diff_M_O_4_list.append(AEEEM_M_diff_4)
        LR_diff_S_O_4_list.append(AEEEM_S_diff_4)

      # 计算 LR top-5 diff
      if(data_o_AEEEM.loc[(1*gap+k)].values[j] == 5):

        AEEEM_attr_5 = list(data_o_AEEEM)[j]
        AEEEM_L_new_rank_5 = data_log_AEEEM.loc[(1*gap+k),AEEEM_attr_5]
        AEEEM_M_new_rank_5 = data_min_AEEEM.loc[(1*gap+k),AEEEM_attr_5]
        AEEEM_S_new_rank_5 = data_sta_AEEEM.loc[(1*gap+k),AEEEM_attr_5]

        AEEEM_L_diff_5 = abs(AEEEM_L_new_rank_5 - 5)
        AEEEM_M_diff_5 = abs(AEEEM_M_new_rank_5 - 5)
        AEEEM_S_diff_5 = abs(AEEEM_S_new_rank_5 - 5)

        LR_diff_L_O_5_list.append(AEEEM_L_diff_5)
        LR_diff_M_O_5_list.append(AEEEM_M_diff_5)
        LR_diff_S_O_5_list.append(AEEEM_S_diff_5)


# 计算 NB top-1 diff
      if(data_o_AEEEM.loc[(2*gap+k)].values[j] == 1):

        AEEEM_attr_1 = list(data_o_AEEEM)[j]
        AEEEM_L_new_rank_1 = data_log_AEEEM.loc[(2*gap+k),AEEEM_attr_1]
        AEEEM_M_new_rank_1 = data_min_AEEEM.loc[(2*gap+k),AEEEM_attr_1]
        AEEEM_S_new_rank_1 = data_sta_AEEEM.loc[(2*gap+k),AEEEM_attr_1]

        AEEEM_L_diff_1 = abs(AEEEM_L_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3
        AEEEM_M_diff_1 = abs(AEEEM_M_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3
        AEEEM_S_diff_1 = abs(AEEEM_S_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3

        NB_diff_L_O_1_list.append(AEEEM_L_diff_1)
        NB_diff_M_O_1_list.append(AEEEM_M_diff_1)
        NB_diff_S_O_1_list.append(AEEEM_S_diff_1)

      # 计算 NB top-2 diff
      if(data_o_AEEEM.loc[(2*gap+k)].values[j] == 2):

        AEEEM_attr_2 = list(data_o_AEEEM)[j]
        AEEEM_L_new_rank_2 = data_log_AEEEM.loc[(2*gap+k),AEEEM_attr_2]
        AEEEM_M_new_rank_2 = data_min_AEEEM.loc[(2*gap+k),AEEEM_attr_2]
        AEEEM_S_new_rank_2 = data_sta_AEEEM.loc[(2*gap+k),AEEEM_attr_2]

        AEEEM_L_diff_2 = abs(AEEEM_L_new_rank_2 - 2)
        AEEEM_M_diff_2 = abs(AEEEM_M_new_rank_2 - 2)
        AEEEM_S_diff_2 = abs(AEEEM_S_new_rank_2 - 2)

        NB_diff_L_O_2_list.append(AEEEM_L_diff_2)
        NB_diff_M_O_2_list.append(AEEEM_M_diff_2)
        NB_diff_S_O_2_list.append(AEEEM_S_diff_2)

      # 计算 NB top-3 diff
      if(data_o_AEEEM.loc[(2*gap+k)].values[j] == 3):

        AEEEM_attr_3 = list(data_o_AEEEM)[j]
        AEEEM_L_new_rank_3 = data_log_AEEEM.loc[(2*gap+k),AEEEM_attr_3]
        AEEEM_M_new_rank_3 = data_min_AEEEM.loc[(2*gap+k),AEEEM_attr_3]
        AEEEM_S_new_rank_3 = data_sta_AEEEM.loc[(2*gap+k),AEEEM_attr_3]

        AEEEM_L_diff_3 = abs(AEEEM_L_new_rank_3 - 3)
        AEEEM_M_diff_3 = abs(AEEEM_M_new_rank_3 - 3)
        AEEEM_S_diff_3 = abs(AEEEM_S_new_rank_3 - 3)

        NB_diff_L_O_3_list.append(AEEEM_L_diff_3)
        NB_diff_M_O_3_list.append(AEEEM_M_diff_3)
        NB_diff_S_O_3_list.append(AEEEM_S_diff_3)

      # 计算 NB top-4 diff
      if(data_o_AEEEM.loc[(2*gap+k)].values[j] == 4):

        AEEEM_attr_4 = list(data_o_AEEEM)[j]
        AEEEM_L_new_rank_4 = data_log_AEEEM.loc[(2*gap+k),AEEEM_attr_4]
        AEEEM_M_new_rank_4 = data_min_AEEEM.loc[(2*gap+k),AEEEM_attr_4]
        AEEEM_S_new_rank_4 = data_sta_AEEEM.loc[(2*gap+k),AEEEM_attr_4]

        AEEEM_L_diff_4 = abs(AEEEM_L_new_rank_4 - 4)
        AEEEM_M_diff_4 = abs(AEEEM_M_new_rank_4 - 4)
        AEEEM_S_diff_4 = abs(AEEEM_S_new_rank_4 - 4)

        NB_diff_L_O_4_list.append(AEEEM_L_diff_4)
        NB_diff_M_O_4_list.append(AEEEM_M_diff_4)
        NB_diff_S_O_4_list.append(AEEEM_S_diff_4)

      # 计算 NB top-5 diff
      if(data_o_AEEEM.loc[(2*gap+k)].values[j] == 5):

        AEEEM_attr_5 = list(data_o_AEEEM)[j]
        AEEEM_L_new_rank_5 = data_log_AEEEM.loc[(2*gap+k),AEEEM_attr_5]
        AEEEM_M_new_rank_5 = data_min_AEEEM.loc[(2*gap+k),AEEEM_attr_5]
        AEEEM_S_new_rank_5 = data_sta_AEEEM.loc[(2*gap+k),AEEEM_attr_5]

        AEEEM_L_diff_5 = abs(AEEEM_L_new_rank_5 - 5)
        AEEEM_M_diff_5 = abs(AEEEM_M_new_rank_5 - 5)
        AEEEM_S_diff_5 = abs(AEEEM_S_new_rank_5 - 5)

        NB_diff_L_O_5_list.append(AEEEM_L_diff_5)
        NB_diff_M_O_5_list.append(AEEEM_M_diff_5)
        NB_diff_S_O_5_list.append(AEEEM_S_diff_5)



# 计算 DT top-1 diff
      if(data_o_AEEEM.loc[(3*gap+k)].values[j] == 1):

        AEEEM_attr_1 = list(data_o_AEEEM)[j]
        AEEEM_L_new_rank_1 = data_log_AEEEM.loc[(3*gap+k),AEEEM_attr_1]
        AEEEM_M_new_rank_1 = data_min_AEEEM.loc[(3*gap+k),AEEEM_attr_1]
        AEEEM_S_new_rank_1 = data_sta_AEEEM.loc[(3*gap+k),AEEEM_attr_1]

        AEEEM_L_diff_1 = abs(AEEEM_L_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3
        AEEEM_M_diff_1 = abs(AEEEM_M_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3
        AEEEM_S_diff_1 = abs(AEEEM_S_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3

        DT_diff_L_O_1_list.append(AEEEM_L_diff_1)
        DT_diff_M_O_1_list.append(AEEEM_M_diff_1)
        DT_diff_S_O_1_list.append(AEEEM_S_diff_1)

      # 计算 DT top-2 diff
      if(data_o_AEEEM.loc[(3*gap+k)].values[j] == 2):

        AEEEM_attr_2 = list(data_o_AEEEM)[j]
        AEEEM_L_new_rank_2 = data_log_AEEEM.loc[(3*gap+k),AEEEM_attr_2]
        AEEEM_M_new_rank_2 = data_min_AEEEM.loc[(3*gap+k),AEEEM_attr_2]
        AEEEM_S_new_rank_2 = data_sta_AEEEM.loc[(3*gap+k),AEEEM_attr_2]

        AEEEM_L_diff_2 = abs(AEEEM_L_new_rank_2 - 2)
        AEEEM_M_diff_2 = abs(AEEEM_M_new_rank_2 - 2)
        AEEEM_S_diff_2 = abs(AEEEM_S_new_rank_2 - 2)

        DT_diff_L_O_2_list.append(AEEEM_L_diff_2)
        DT_diff_M_O_2_list.append(AEEEM_M_diff_2)
        DT_diff_S_O_2_list.append(AEEEM_S_diff_2)

      # 计算 DT top-3 diff
      if(data_o_AEEEM.loc[(3*gap+k)].values[j] == 3):

        AEEEM_attr_3 = list(data_o_AEEEM)[j]
        AEEEM_L_new_rank_3 = data_log_AEEEM.loc[(3*gap+k),AEEEM_attr_3]
        AEEEM_M_new_rank_3 = data_min_AEEEM.loc[(3*gap+k),AEEEM_attr_3]
        AEEEM_S_new_rank_3 = data_sta_AEEEM.loc[(3*gap+k),AEEEM_attr_3]

        AEEEM_L_diff_3 = abs(AEEEM_L_new_rank_3 - 3)
        AEEEM_M_diff_3 = abs(AEEEM_M_new_rank_3 - 3)
        AEEEM_S_diff_3 = abs(AEEEM_S_new_rank_3 - 3)

        DT_diff_L_O_3_list.append(AEEEM_L_diff_3)
        DT_diff_M_O_3_list.append(AEEEM_M_diff_3)
        DT_diff_S_O_3_list.append(AEEEM_S_diff_3)

      # 计算 DT top-4 diff
      if(data_o_AEEEM.loc[(3*gap+k)].values[j] == 4):

        AEEEM_attr_4 = list(data_o_AEEEM)[j]
        AEEEM_L_new_rank_4 = data_log_AEEEM.loc[(3*gap+k),AEEEM_attr_4]
        AEEEM_M_new_rank_4 = data_min_AEEEM.loc[(3*gap+k),AEEEM_attr_4]
        AEEEM_S_new_rank_4 = data_sta_AEEEM.loc[(3*gap+k),AEEEM_attr_4]

        AEEEM_L_diff_4 = abs(AEEEM_L_new_rank_4 - 4)
        AEEEM_M_diff_4 = abs(AEEEM_M_new_rank_4 - 4)
        AEEEM_S_diff_4 = abs(AEEEM_S_new_rank_4 - 4)

        DT_diff_L_O_4_list.append(AEEEM_L_diff_4)
        DT_diff_M_O_4_list.append(AEEEM_M_diff_4)
        DT_diff_S_O_4_list.append(AEEEM_S_diff_4)

      # 计算 DT top-5 diff
      if(data_o_AEEEM.loc[(3*gap+k)].values[j] == 5):

        AEEEM_attr_5 = list(data_o_AEEEM)[j]
        AEEEM_L_new_rank_5 = data_log_AEEEM.loc[(3*gap+k),AEEEM_attr_5]
        AEEEM_M_new_rank_5 = data_min_AEEEM.loc[(3*gap+k),AEEEM_attr_5]
        AEEEM_S_new_rank_5 = data_sta_AEEEM.loc[(3*gap+k),AEEEM_attr_5]

        AEEEM_L_diff_5 = abs(AEEEM_L_new_rank_5 - 5)
        AEEEM_M_diff_5 = abs(AEEEM_M_new_rank_5 - 5)
        AEEEM_S_diff_5 = abs(AEEEM_S_new_rank_5 - 5)

        DT_diff_L_O_5_list.append(AEEEM_L_diff_5)
        DT_diff_M_O_5_list.append(AEEEM_M_diff_5)
        DT_diff_S_O_5_list.append(AEEEM_S_diff_5)

# 计算 KNN top-1 diff
      if(data_o_AEEEM.loc[(4*gap+k)].values[j] == 1):

        AEEEM_attr_1 = list(data_o_AEEEM)[j]
        AEEEM_L_new_rank_1 = data_log_AEEEM.loc[(4*gap+k),AEEEM_attr_1]
        AEEEM_M_new_rank_1 = data_min_AEEEM.loc[(4*gap+k),AEEEM_attr_1]
        AEEEM_S_new_rank_1 = data_sta_AEEEM.loc[(4*gap+k),AEEEM_attr_1]

        AEEEM_L_diff_1 = abs(AEEEM_L_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3
        AEEEM_M_diff_1 = abs(AEEEM_M_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3
        AEEEM_S_diff_1 = abs(AEEEM_S_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3

        KNN_diff_L_O_1_list.append(AEEEM_L_diff_1)
        KNN_diff_M_O_1_list.append(AEEEM_M_diff_1)
        KNN_diff_S_O_1_list.append(AEEEM_S_diff_1)

      # 计算 KNN top-2 diff
      if(data_o_AEEEM.loc[(4*gap+k)].values[j] == 2):

        AEEEM_attr_2 = list(data_o_AEEEM)[j]
        AEEEM_L_new_rank_2 = data_log_AEEEM.loc[(4*gap+k),AEEEM_attr_2]
        AEEEM_M_new_rank_2 = data_min_AEEEM.loc[(4*gap+k),AEEEM_attr_2]
        AEEEM_S_new_rank_2 = data_sta_AEEEM.loc[(4*gap+k),AEEEM_attr_2]

        AEEEM_L_diff_2 = abs(AEEEM_L_new_rank_2 - 2)
        AEEEM_M_diff_2 = abs(AEEEM_M_new_rank_2 - 2)
        AEEEM_S_diff_2 = abs(AEEEM_S_new_rank_2 - 2)

        KNN_diff_L_O_2_list.append(AEEEM_L_diff_2)
        KNN_diff_M_O_2_list.append(AEEEM_M_diff_2)
        KNN_diff_S_O_2_list.append(AEEEM_S_diff_2)

      # 计算 KNN top-3 diff
      if(data_o_AEEEM.loc[(4*gap+k)].values[j] == 3):

        AEEEM_attr_3 = list(data_o_AEEEM)[j]
        AEEEM_L_new_rank_3 = data_log_AEEEM.loc[(4*gap+k),AEEEM_attr_3]
        AEEEM_M_new_rank_3 = data_min_AEEEM.loc[(4*gap+k),AEEEM_attr_3]
        AEEEM_S_new_rank_3 = data_sta_AEEEM.loc[(4*gap+k),AEEEM_attr_3]

        AEEEM_L_diff_3 = abs(AEEEM_L_new_rank_3 - 3)
        AEEEM_M_diff_3 = abs(AEEEM_M_new_rank_3 - 3)
        AEEEM_S_diff_3 = abs(AEEEM_S_new_rank_3 - 3)

        KNN_diff_L_O_3_list.append(AEEEM_L_diff_3)
        KNN_diff_M_O_3_list.append(AEEEM_M_diff_3)
        KNN_diff_S_O_3_list.append(AEEEM_S_diff_3)

      # 计算 KNN top-4 diff
      if(data_o_AEEEM.loc[(4*gap+k)].values[j] == 4):

        AEEEM_attr_4 = list(data_o_AEEEM)[j]
        AEEEM_L_new_rank_4 = data_log_AEEEM.loc[(4*gap+k),AEEEM_attr_4]
        AEEEM_M_new_rank_4 = data_min_AEEEM.loc[(4*gap+k),AEEEM_attr_4]
        AEEEM_S_new_rank_4 = data_sta_AEEEM.loc[(4*gap+k),AEEEM_attr_4]

        AEEEM_L_diff_4 = abs(AEEEM_L_new_rank_4 - 4)
        AEEEM_M_diff_4 = abs(AEEEM_M_new_rank_4 - 4)
        AEEEM_S_diff_4 = abs(AEEEM_S_new_rank_4 - 4)

        KNN_diff_L_O_4_list.append(AEEEM_L_diff_4)
        KNN_diff_M_O_4_list.append(AEEEM_M_diff_4)
        KNN_diff_S_O_4_list.append(AEEEM_S_diff_4)

      # 计算 KNN top-5 diff
      if(data_o_AEEEM.loc[(4*gap+k)].values[j] == 5):

        AEEEM_attr_5 = list(data_o_AEEEM)[j]
        AEEEM_L_new_rank_5 = data_log_AEEEM.loc[(4*gap+k),AEEEM_attr_5]
        AEEEM_M_new_rank_5 = data_min_AEEEM.loc[(4*gap+k),AEEEM_attr_5]
        AEEEM_S_new_rank_5 = data_sta_AEEEM.loc[(4*gap+k),AEEEM_attr_5]

        AEEEM_L_diff_5 = abs(AEEEM_L_new_rank_5 - 5)
        AEEEM_M_diff_5 = abs(AEEEM_M_new_rank_5 - 5)
        AEEEM_S_diff_5 = abs(AEEEM_S_new_rank_5 - 5)

        KNN_diff_L_O_5_list.append(AEEEM_L_diff_5)
        KNN_diff_M_O_5_list.append(AEEEM_M_diff_5)
        KNN_diff_S_O_5_list.append(AEEEM_S_diff_5)


# 计算 MLP top-1 diff
      if(data_o_AEEEM.loc[(5*gap+k)].values[j] == 1):

        AEEEM_attr_1 = list(data_o_AEEEM)[j]
        AEEEM_L_new_rank_1 = data_log_AEEEM.loc[(5*gap+k),AEEEM_attr_1]
        AEEEM_M_new_rank_1 = data_min_AEEEM.loc[(5*gap+k),AEEEM_attr_1]
        AEEEM_S_new_rank_1 = data_sta_AEEEM.loc[(5*gap+k),AEEEM_attr_1]

        AEEEM_L_diff_1 = abs(AEEEM_L_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3
        AEEEM_M_diff_1 = abs(AEEEM_M_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3
        AEEEM_S_diff_1 = abs(AEEEM_S_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3

        MLP_diff_L_O_1_list.append(AEEEM_L_diff_1)
        MLP_diff_M_O_1_list.append(AEEEM_M_diff_1)
        MLP_diff_S_O_1_list.append(AEEEM_S_diff_1)

      # 计算 MLP top-2 diff
      if(data_o_AEEEM.loc[(5*gap+k)].values[j] == 2):

        AEEEM_attr_2 = list(data_o_AEEEM)[j]
        AEEEM_L_new_rank_2 = data_log_AEEEM.loc[(5*gap+k),AEEEM_attr_2]
        AEEEM_M_new_rank_2 = data_min_AEEEM.loc[(5*gap+k),AEEEM_attr_2]
        AEEEM_S_new_rank_2 = data_sta_AEEEM.loc[(5*gap+k),AEEEM_attr_2]

        AEEEM_L_diff_2 = abs(AEEEM_L_new_rank_2 - 2)
        AEEEM_M_diff_2 = abs(AEEEM_M_new_rank_2 - 2)
        AEEEM_S_diff_2 = abs(AEEEM_S_new_rank_2 - 2)

        MLP_diff_L_O_2_list.append(AEEEM_L_diff_2)
        MLP_diff_M_O_2_list.append(AEEEM_M_diff_2)
        MLP_diff_S_O_2_list.append(AEEEM_S_diff_2)

      # 计算 MLP top-3 diff
      if(data_o_AEEEM.loc[(5*gap+k)].values[j] == 3):

        AEEEM_attr_3 = list(data_o_AEEEM)[j]
        AEEEM_L_new_rank_3 = data_log_AEEEM.loc[(5*gap+k),AEEEM_attr_3]
        AEEEM_M_new_rank_3 = data_min_AEEEM.loc[(5*gap+k),AEEEM_attr_3]
        AEEEM_S_new_rank_3 = data_sta_AEEEM.loc[(5*gap+k),AEEEM_attr_3]

        AEEEM_L_diff_3 = abs(AEEEM_L_new_rank_3 - 3)
        AEEEM_M_diff_3 = abs(AEEEM_M_new_rank_3 - 3)
        AEEEM_S_diff_3 = abs(AEEEM_S_new_rank_3 - 3)

        MLP_diff_L_O_3_list.append(AEEEM_L_diff_3)
        MLP_diff_M_O_3_list.append(AEEEM_M_diff_3)
        MLP_diff_S_O_3_list.append(AEEEM_S_diff_3)

      # 计算 MLP top-4 diff
      if(data_o_AEEEM.loc[(5*gap+k)].values[j] == 4):

        AEEEM_attr_4 = list(data_o_AEEEM)[j]
        AEEEM_L_new_rank_4 = data_log_AEEEM.loc[(5*gap+k),AEEEM_attr_4]
        AEEEM_M_new_rank_4 = data_min_AEEEM.loc[(5*gap+k),AEEEM_attr_4]
        AEEEM_S_new_rank_4 = data_sta_AEEEM.loc[(5*gap+k),AEEEM_attr_4]

        AEEEM_L_diff_4 = abs(AEEEM_L_new_rank_4 - 4)
        AEEEM_M_diff_4 = abs(AEEEM_M_new_rank_4 - 4)
        AEEEM_S_diff_4 = abs(AEEEM_S_new_rank_4 - 4)

        MLP_diff_L_O_4_list.append(AEEEM_L_diff_4)
        MLP_diff_M_O_4_list.append(AEEEM_M_diff_4)
        MLP_diff_S_O_4_list.append(AEEEM_S_diff_4)

      # 计算 MLP top-5 diff
      if(data_o_AEEEM.loc[(5*gap+k)].values[j] == 5):

        AEEEM_attr_5 = list(data_o_AEEEM)[j]
        AEEEM_L_new_rank_5 = data_log_AEEEM.loc[(5*gap+k),AEEEM_attr_5]
        AEEEM_M_new_rank_5 = data_min_AEEEM.loc[(5*gap+k),AEEEM_attr_5]
        AEEEM_S_new_rank_5 = data_sta_AEEEM.loc[(5*gap+k),AEEEM_attr_5]

        AEEEM_L_diff_5 = abs(AEEEM_L_new_rank_5 - 5)
        AEEEM_M_diff_5 = abs(AEEEM_M_new_rank_5 - 5)
        AEEEM_S_diff_5 = abs(AEEEM_S_new_rank_5 - 5)

        MLP_diff_L_O_5_list.append(AEEEM_L_diff_5)
        MLP_diff_M_O_5_list.append(AEEEM_M_diff_5)
        MLP_diff_S_O_5_list.append(AEEEM_S_diff_5)

# 每个分类器依次计算25次实验的重复
# 再算 ReLink 数据集所有项目 的特征重复 ReLink 有三个项目


gap = 25
length = len(ReLink)

for l in range(length):

  for k in range(gap):

   for j in range(data_o_ReLink.shape[1]): # 20 26 61

      # 计算 RF top-1 diff
      if(data_o_ReLink.loc[(l*6*gap+k)].values[j] == 1):

        ReLink_attr_1 = list(data_o_ReLink)[j]
        ReLink_L_new_rank_1 = data_log_ReLink.loc[(l*6*gap+k),ReLink_attr_1]
        ReLink_M_new_rank_1 = data_min_ReLink.loc[(l*6*gap+k),ReLink_attr_1]
        ReLink_S_new_rank_1 = data_sta_ReLink.loc[(l*6*gap+k),ReLink_attr_1]

        ReLink_L_diff_1 = abs(ReLink_L_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3
        ReLink_M_diff_1 = abs(ReLink_M_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3
        ReLink_S_diff_1 = abs(ReLink_S_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3


        RF_diff_L_O_1_list.append(ReLink_L_diff_1)
        RF_diff_M_O_1_list.append(ReLink_M_diff_1)
        RF_diff_S_O_1_list.append(ReLink_S_diff_1)

      # 计算 RF top-2 diff
      if(data_o_ReLink.loc[(l*6*gap+k)].values[j] == 2):

        ReLink_attr_2 = list(data_o_ReLink)[j]
        ReLink_L_new_rank_2 = data_log_ReLink.loc[(l*6*gap+k),ReLink_attr_2]
        ReLink_M_new_rank_2 = data_min_ReLink.loc[(l*6*gap+k),ReLink_attr_2]
        ReLink_S_new_rank_2 = data_sta_ReLink.loc[(l*6*gap+k),ReLink_attr_2]

        ReLink_L_diff_2 = abs(ReLink_L_new_rank_2 - 2)
        ReLink_M_diff_2 = abs(ReLink_M_new_rank_2 - 2)
        ReLink_S_diff_2 = abs(ReLink_S_new_rank_2 - 2)

        RF_diff_L_O_2_list.append(ReLink_L_diff_2)
        RF_diff_M_O_2_list.append(ReLink_M_diff_2)
        RF_diff_S_O_2_list.append(ReLink_S_diff_2)

      # 计算 RF top-3 diff
      if(data_o_ReLink.loc[(l*6*gap+k)].values[j] == 3):

        ReLink_attr_3 = list(data_o_ReLink)[j]
        ReLink_L_new_rank_3 = data_log_ReLink.loc[(l*6*gap+k),ReLink_attr_3]
        ReLink_M_new_rank_3 = data_min_ReLink.loc[(l*6*gap+k),ReLink_attr_3]
        ReLink_S_new_rank_3 = data_sta_ReLink.loc[(l*6*gap+k),ReLink_attr_3]

        ReLink_L_diff_3 = abs(ReLink_L_new_rank_3 - 3)
        ReLink_M_diff_3 = abs(ReLink_M_new_rank_3 - 3)
        ReLink_S_diff_3 = abs(ReLink_S_new_rank_3 - 3)

        RF_diff_L_O_3_list.append(ReLink_L_diff_3)
        RF_diff_M_O_3_list.append(ReLink_M_diff_3)
        RF_diff_S_O_3_list.append(ReLink_S_diff_3)

      # 计算 RF top-4 diff
      if(data_o_ReLink.loc[(l*6*gap+k)].values[j] == 4):

        ReLink_attr_4 = list(data_o_ReLink)[j]
        ReLink_L_new_rank_4 = data_log_ReLink.loc[(l*6*gap+k),ReLink_attr_4]
        ReLink_M_new_rank_4 = data_min_ReLink.loc[(l*6*gap+k),ReLink_attr_4]
        ReLink_S_new_rank_4 = data_sta_ReLink.loc[(l*6*gap+k),ReLink_attr_4]

        ReLink_L_diff_4 = abs(ReLink_L_new_rank_4 - 4)
        ReLink_M_diff_4 = abs(ReLink_M_new_rank_4 - 4)
        ReLink_S_diff_4 = abs(ReLink_S_new_rank_4 - 4)

        RF_diff_L_O_4_list.append(ReLink_L_diff_4)
        RF_diff_M_O_4_list.append(ReLink_M_diff_4)
        RF_diff_S_O_4_list.append(ReLink_S_diff_4)

      # 计算 RF top-5 diff
      if(data_o_ReLink.loc[(l*6*gap+k)].values[j] == 5):

        ReLink_attr_5 = list(data_o_ReLink)[j]
        ReLink_L_new_rank_5 = data_log_ReLink.loc[(l*6*gap+k),ReLink_attr_5]
        ReLink_M_new_rank_5 = data_min_ReLink.loc[(l*6*gap+k),ReLink_attr_5]
        ReLink_S_new_rank_5 = data_sta_ReLink.loc[(l*6*gap+k),ReLink_attr_5]

        ReLink_L_diff_5 = abs(ReLink_L_new_rank_5 - 5)
        ReLink_M_diff_5 = abs(ReLink_M_new_rank_5 - 5)
        ReLink_S_diff_5 = abs(ReLink_S_new_rank_5 - 5)

        RF_diff_L_O_5_list.append(ReLink_L_diff_5)
        RF_diff_M_O_5_list.append(ReLink_M_diff_5)
        RF_diff_S_O_5_list.append(ReLink_S_diff_5)

      # 计算 LR top-1 diff
      if(data_o_ReLink.loc[(l*6+1)*gap+k].values[j] == 1):

        ReLink_attr_1 = list(data_o_ReLink)[j]
        ReLink_L_new_rank_1 = data_log_ReLink.loc[(l*6+1)*gap+k,ReLink_attr_1]
        ReLink_M_new_rank_1 = data_min_ReLink.loc[(l*6+1)*gap+k,ReLink_attr_1]
        ReLink_S_new_rank_1 = data_sta_ReLink.loc[(l*6+1)*gap+k,ReLink_attr_1]

        ReLink_L_diff_1 = abs(ReLink_L_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3
        ReLink_M_diff_1 = abs(ReLink_M_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3
        ReLink_S_diff_1 = abs(ReLink_S_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3

        LR_diff_L_O_1_list.append(ReLink_L_diff_1)
        LR_diff_M_O_1_list.append(ReLink_M_diff_1)
        LR_diff_S_O_1_list.append(ReLink_S_diff_1)

      # 计算 LR top-2 diff
      if(data_o_ReLink.loc[(l*6+1)*gap+k].values[j] == 2):

        ReLink_attr_2 = list(data_o_ReLink)[j]
        ReLink_L_new_rank_2 = data_log_ReLink.loc[(l*6+1)*gap+k,ReLink_attr_2]
        ReLink_M_new_rank_2 = data_min_ReLink.loc[(l*6+1)*gap+k,ReLink_attr_2]
        ReLink_S_new_rank_2 = data_sta_ReLink.loc[(l*6+1)*gap+k,ReLink_attr_2]

        ReLink_L_diff_2 = abs(ReLink_L_new_rank_2 - 2)
        ReLink_M_diff_2 = abs(ReLink_M_new_rank_2 - 2)
        ReLink_S_diff_2 = abs(ReLink_S_new_rank_2 - 2)

        LR_diff_L_O_2_list.append(ReLink_L_diff_2)
        LR_diff_M_O_2_list.append(ReLink_M_diff_2)
        LR_diff_S_O_2_list.append(ReLink_S_diff_2)

      # 计算 LR top-3 diff
      if(data_o_ReLink.loc[(l*6+1)*gap+k].values[j] == 3):

        ReLink_attr_3 = list(data_o_ReLink)[j]
        ReLink_L_new_rank_3 = data_log_ReLink.loc[(l*6+1)*gap+k,ReLink_attr_3]
        ReLink_M_new_rank_3 = data_min_ReLink.loc[(l*6+1)*gap+k,ReLink_attr_3]
        ReLink_S_new_rank_3 = data_sta_ReLink.loc[(l*6+1)*gap+k,ReLink_attr_3]

        ReLink_L_diff_3 = abs(ReLink_L_new_rank_3 - 3)
        ReLink_M_diff_3 = abs(ReLink_M_new_rank_3 - 3)
        ReLink_S_diff_3 = abs(ReLink_S_new_rank_3 - 3)

        LR_diff_L_O_3_list.append(ReLink_L_diff_3)
        LR_diff_M_O_3_list.append(ReLink_M_diff_3)
        LR_diff_S_O_3_list.append(ReLink_S_diff_3)

      # 计算 LR top-4 diff
      if(data_o_ReLink.loc[(l*6+1)*gap+k].values[j] == 4):

        ReLink_attr_4 = list(data_o_ReLink)[j]
        ReLink_L_new_rank_4 = data_log_ReLink.loc[(l*6+1)*gap+k,ReLink_attr_4]
        ReLink_M_new_rank_4 = data_min_ReLink.loc[(l*6+1)*gap+k,ReLink_attr_4]
        ReLink_S_new_rank_4 = data_sta_ReLink.loc[(l*6+1)*gap+k,ReLink_attr_4]

        ReLink_L_diff_4 = abs(ReLink_L_new_rank_4 - 4)
        ReLink_M_diff_4 = abs(ReLink_M_new_rank_4 - 4)
        ReLink_S_diff_4 = abs(ReLink_S_new_rank_4 - 4)

        LR_diff_L_O_4_list.append(ReLink_L_diff_4)
        LR_diff_M_O_4_list.append(ReLink_M_diff_4)
        LR_diff_S_O_4_list.append(ReLink_S_diff_4)

      # 计算 LR top-5 diff
      if(data_o_ReLink.loc[(l*6+1)*gap+k].values[j] == 5):

        ReLink_attr_5 = list(data_o_ReLink)[j]
        ReLink_L_new_rank_5 = data_log_ReLink.loc[(l*6+1)*gap+k,ReLink_attr_5]
        ReLink_M_new_rank_5 = data_min_ReLink.loc[(l*6+1)*gap+k,ReLink_attr_5]
        ReLink_S_new_rank_5 = data_sta_ReLink.loc[(l*6+1)*gap+k,ReLink_attr_5]

        ReLink_L_diff_5 = abs(ReLink_L_new_rank_5 - 5)
        ReLink_M_diff_5 = abs(ReLink_M_new_rank_5 - 5)
        ReLink_S_diff_5 = abs(ReLink_S_new_rank_5 - 5)

        LR_diff_L_O_5_list.append(ReLink_L_diff_5)
        LR_diff_M_O_5_list.append(ReLink_M_diff_5)
        LR_diff_S_O_5_list.append(ReLink_S_diff_5)


      # 计算 NB top-1 diff
      if(data_o_ReLink.loc[(l*6+2)*gap+k].values[j] == 1):

        ReLink_attr_1 = list(data_o_ReLink)[j]
        ReLink_L_new_rank_1 = data_log_ReLink.loc[(l*6+2)*gap+k,ReLink_attr_1]
        ReLink_M_new_rank_1 = data_min_ReLink.loc[(l*6+2)*gap+k,ReLink_attr_1]
        ReLink_S_new_rank_1 = data_sta_ReLink.loc[(l*6+2)*gap+k,ReLink_attr_1]

        ReLink_L_diff_1 = abs(ReLink_L_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3
        ReLink_M_diff_1 = abs(ReLink_M_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3
        ReLink_S_diff_1 = abs(ReLink_S_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3

        NB_diff_L_O_1_list.append(ReLink_L_diff_1)
        NB_diff_M_O_1_list.append(ReLink_M_diff_1)
        NB_diff_S_O_1_list.append(ReLink_S_diff_1)

      # 计算 NB top-2 diff
      if(data_o_ReLink.loc[(l*6+2)*gap+k].values[j] == 2):

        ReLink_attr_2 = list(data_o_ReLink)[j]
        ReLink_L_new_rank_2 = data_log_ReLink.loc[(l*6+2)*gap+k,ReLink_attr_2]
        ReLink_M_new_rank_2 = data_min_ReLink.loc[(l*6+2)*gap+k,ReLink_attr_2]
        ReLink_S_new_rank_2 = data_sta_ReLink.loc[(l*6+2)*gap+k,ReLink_attr_2]

        ReLink_L_diff_2 = abs(ReLink_L_new_rank_2 - 2)
        ReLink_M_diff_2 = abs(ReLink_M_new_rank_2 - 2)
        ReLink_S_diff_2 = abs(ReLink_S_new_rank_2 - 2)

        NB_diff_L_O_2_list.append(ReLink_L_diff_2)
        NB_diff_M_O_2_list.append(ReLink_M_diff_2)
        NB_diff_S_O_2_list.append(ReLink_S_diff_2)

      # 计算 NB top-3 diff
      if(data_o_ReLink.loc[(l*6+2)*gap+k].values[j] == 3):

        ReLink_attr_3 = list(data_o_ReLink)[j]
        ReLink_L_new_rank_3 = data_log_ReLink.loc[(l*6+2)*gap+k,ReLink_attr_3]
        ReLink_M_new_rank_3 = data_min_ReLink.loc[(l*6+2)*gap+k,ReLink_attr_3]
        ReLink_S_new_rank_3 = data_sta_ReLink.loc[(l*6+2)*gap+k,ReLink_attr_3]

        ReLink_L_diff_3 = abs(ReLink_L_new_rank_3 - 3)
        ReLink_M_diff_3 = abs(ReLink_M_new_rank_3 - 3)
        ReLink_S_diff_3 = abs(ReLink_S_new_rank_3 - 3)

        NB_diff_L_O_3_list.append(ReLink_L_diff_3)
        NB_diff_M_O_3_list.append(ReLink_M_diff_3)
        NB_diff_S_O_3_list.append(ReLink_S_diff_3)

      # 计算 NB top-4 diff
      if(data_o_ReLink.loc[(l*6+2)*gap+k].values[j] == 4):

        ReLink_attr_4 = list(data_o_ReLink)[j]
        ReLink_L_new_rank_4 = data_log_ReLink.loc[(l*6+2)*gap+k,ReLink_attr_4]
        ReLink_M_new_rank_4 = data_min_ReLink.loc[(l*6+2)*gap+k,ReLink_attr_4]
        ReLink_S_new_rank_4 = data_sta_ReLink.loc[(l*6+2)*gap+k,ReLink_attr_4]

        ReLink_L_diff_4 = abs(ReLink_L_new_rank_4 - 4)
        ReLink_M_diff_4 = abs(ReLink_M_new_rank_4 - 4)
        ReLink_S_diff_4 = abs(ReLink_S_new_rank_4 - 4)

        NB_diff_L_O_4_list.append(ReLink_L_diff_4)
        NB_diff_M_O_4_list.append(ReLink_M_diff_4)
        NB_diff_S_O_4_list.append(ReLink_S_diff_4)

      # 计算 NB top-5 diff
      if(data_o_ReLink.loc[(l*6+2)*gap+k].values[j] == 5):

        ReLink_attr_5 = list(data_o_ReLink)[j]
        ReLink_L_new_rank_5 = data_log_ReLink.loc[(2*gap+k),ReLink_attr_5]
        ReLink_M_new_rank_5 = data_min_ReLink.loc[(2*gap+k),ReLink_attr_5]
        ReLink_S_new_rank_5 = data_sta_ReLink.loc[(2*gap+k),ReLink_attr_5]

        ReLink_L_diff_5 = abs(ReLink_L_new_rank_5 - 5)
        ReLink_M_diff_5 = abs(ReLink_M_new_rank_5 - 5)
        ReLink_S_diff_5 = abs(ReLink_S_new_rank_5 - 5)

        NB_diff_L_O_5_list.append(ReLink_L_diff_5)
        NB_diff_M_O_5_list.append(ReLink_M_diff_5)
        NB_diff_S_O_5_list.append(ReLink_S_diff_5)



      # 计算 DT top-1 diff
      if(data_o_ReLink.loc[(l*6+3)*gap+k].values[j] == 1):

        ReLink_attr_1 = list(data_o_ReLink)[j]
        ReLink_L_new_rank_1 = data_log_ReLink.loc[(l*6+3)*gap+k,ReLink_attr_1]
        ReLink_M_new_rank_1 = data_min_ReLink.loc[(l*6+3)*gap+k,ReLink_attr_1]
        ReLink_S_new_rank_1 = data_sta_ReLink.loc[(l*6+3)*gap+k,ReLink_attr_1]

        ReLink_L_diff_1 = abs(ReLink_L_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3
        ReLink_M_diff_1 = abs(ReLink_M_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3
        ReLink_S_diff_1 = abs(ReLink_S_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3

        DT_diff_L_O_1_list.append(ReLink_L_diff_1)
        DT_diff_M_O_1_list.append(ReLink_M_diff_1)
        DT_diff_S_O_1_list.append(ReLink_S_diff_1)

      # 计算 DT top-2 diff
      if(data_o_ReLink.loc[(l*6+3)*gap+k].values[j] == 2):

        ReLink_attr_2 = list(data_o_ReLink)[j]
        ReLink_L_new_rank_2 = data_log_ReLink.loc[(l*6+3)*gap+k,ReLink_attr_2]
        ReLink_M_new_rank_2 = data_min_ReLink.loc[(l*6+3)*gap+k,ReLink_attr_2]
        ReLink_S_new_rank_2 = data_sta_ReLink.loc[(l*6+3)*gap+k,ReLink_attr_2]

        ReLink_L_diff_2 = abs(ReLink_L_new_rank_2 - 2)
        ReLink_M_diff_2 = abs(ReLink_M_new_rank_2 - 2)
        ReLink_S_diff_2 = abs(ReLink_S_new_rank_2 - 2)

        DT_diff_L_O_2_list.append(ReLink_L_diff_2)
        DT_diff_M_O_2_list.append(ReLink_M_diff_2)
        DT_diff_S_O_2_list.append(ReLink_S_diff_2)

      # 计算 DT top-3 diff
      if(data_o_ReLink.loc[(l*6+3)*gap+k].values[j] == 3):

        ReLink_attr_3 = list(data_o_ReLink)[j]
        ReLink_L_new_rank_3 = data_log_ReLink.loc[(l*6+3)*gap+k,ReLink_attr_3]
        ReLink_M_new_rank_3 = data_min_ReLink.loc[(l*6+3)*gap+k,ReLink_attr_3]
        ReLink_S_new_rank_3 = data_sta_ReLink.loc[(l*6+3)*gap+k,ReLink_attr_3]

        ReLink_L_diff_3 = abs(ReLink_L_new_rank_3 - 3)
        ReLink_M_diff_3 = abs(ReLink_M_new_rank_3 - 3)
        ReLink_S_diff_3 = abs(ReLink_S_new_rank_3 - 3)

        DT_diff_L_O_3_list.append(ReLink_L_diff_3)
        DT_diff_M_O_3_list.append(ReLink_M_diff_3)
        DT_diff_S_O_3_list.append(ReLink_S_diff_3)

      # 计算 DT top-4 diff
      if(data_o_ReLink.loc[(l*6+3)*gap+k].values[j] == 4):

        ReLink_attr_4 = list(data_o_ReLink)[j]
        ReLink_L_new_rank_4 = data_log_ReLink.loc[(l*6+3)*gap+k,ReLink_attr_4]
        ReLink_M_new_rank_4 = data_min_ReLink.loc[(l*6+3)*gap+k,ReLink_attr_4]
        ReLink_S_new_rank_4 = data_sta_ReLink.loc[(l*6+3)*gap+k,ReLink_attr_4]

        ReLink_L_diff_4 = abs(ReLink_L_new_rank_4 - 4)
        ReLink_M_diff_4 = abs(ReLink_M_new_rank_4 - 4)
        ReLink_S_diff_4 = abs(ReLink_S_new_rank_4 - 4)

        DT_diff_L_O_4_list.append(ReLink_L_diff_4)
        DT_diff_M_O_4_list.append(ReLink_M_diff_4)
        DT_diff_S_O_4_list.append(ReLink_S_diff_4)

      # 计算 DT top-5 diff
      if(data_o_ReLink.loc[(l*6+3)*gap+k].values[j] == 5):

        ReLink_attr_5 = list(data_o_ReLink)[j]
        ReLink_L_new_rank_5 = data_log_ReLink.loc[(l*6+3)*gap+k,ReLink_attr_5]
        ReLink_M_new_rank_5 = data_min_ReLink.loc[(l*6+3)*gap+k,ReLink_attr_5]
        ReLink_S_new_rank_5 = data_sta_ReLink.loc[(l*6+3)*gap+k,ReLink_attr_5]

        ReLink_L_diff_5 = abs(ReLink_L_new_rank_5 - 5)
        ReLink_M_diff_5 = abs(ReLink_M_new_rank_5 - 5)
        ReLink_S_diff_5 = abs(ReLink_S_new_rank_5 - 5)

        DT_diff_L_O_5_list.append(ReLink_L_diff_5)
        DT_diff_M_O_5_list.append(ReLink_M_diff_5)
        DT_diff_S_O_5_list.append(ReLink_S_diff_5)

      # 计算 KNN top-1 diff
      if(data_o_ReLink.loc[(l*6+4)*gap+k].values[j] == 1):

        ReLink_attr_1 = list(data_o_ReLink)[j]
        ReLink_L_new_rank_1 = data_log_ReLink.loc[(l*6+4)*gap+k,ReLink_attr_1]
        ReLink_M_new_rank_1 = data_min_ReLink.loc[(l*6+4)*gap+k,ReLink_attr_1]
        ReLink_S_new_rank_1 = data_sta_ReLink.loc[(l*6+4)*gap+k,ReLink_attr_1]

        ReLink_L_diff_1 = abs(ReLink_L_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3
        ReLink_M_diff_1 = abs(ReLink_M_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3
        ReLink_S_diff_1 = abs(ReLink_S_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3

        KNN_diff_L_O_1_list.append(ReLink_L_diff_1)
        KNN_diff_M_O_1_list.append(ReLink_M_diff_1)
        KNN_diff_S_O_1_list.append(ReLink_S_diff_1)

      # 计算 KNN top-2 diff
      if(data_o_ReLink.loc[(l*6+4)*gap+k].values[j] == 2):

        ReLink_attr_2 = list(data_o_ReLink)[j]
        ReLink_L_new_rank_2 = data_log_ReLink.loc[(l*6+4)*gap+k,ReLink_attr_2]
        ReLink_M_new_rank_2 = data_min_ReLink.loc[(l*6+4)*gap+k,ReLink_attr_2]
        ReLink_S_new_rank_2 = data_sta_ReLink.loc[(l*6+4)*gap+k,ReLink_attr_2]

        ReLink_L_diff_2 = abs(ReLink_L_new_rank_2 - 2)
        ReLink_M_diff_2 = abs(ReLink_M_new_rank_2 - 2)
        ReLink_S_diff_2 = abs(ReLink_S_new_rank_2 - 2)

        KNN_diff_L_O_2_list.append(ReLink_L_diff_2)
        KNN_diff_M_O_2_list.append(ReLink_M_diff_2)
        KNN_diff_S_O_2_list.append(ReLink_S_diff_2)

      # 计算 KNN top-3 diff
      if(data_o_ReLink.loc[(l*6+4)*gap+k].values[j] == 3):

        ReLink_attr_3 = list(data_o_ReLink)[j]
        ReLink_L_new_rank_3 = data_log_ReLink.loc[(l*6+4)*gap+k,ReLink_attr_3]
        ReLink_M_new_rank_3 = data_min_ReLink.loc[(l*6+4)*gap+k,ReLink_attr_3]
        ReLink_S_new_rank_3 = data_sta_ReLink.loc[(l*6+4)*gap+k,ReLink_attr_3]

        ReLink_L_diff_3 = abs(ReLink_L_new_rank_3 - 3)
        ReLink_M_diff_3 = abs(ReLink_M_new_rank_3 - 3)
        ReLink_S_diff_3 = abs(ReLink_S_new_rank_3 - 3)

        KNN_diff_L_O_3_list.append(ReLink_L_diff_3)
        KNN_diff_M_O_3_list.append(ReLink_M_diff_3)
        KNN_diff_S_O_3_list.append(ReLink_S_diff_3)

      # 计算 KNN top-4 diff
      if(data_o_ReLink.loc[(l*6+4)*gap+k].values[j] == 4):

        ReLink_attr_4 = list(data_o_ReLink)[j]
        ReLink_L_new_rank_4 = data_log_ReLink.loc[(l*6+4)*gap+k,ReLink_attr_4]
        ReLink_M_new_rank_4 = data_min_ReLink.loc[(l*6+4)*gap+k,ReLink_attr_4]
        ReLink_S_new_rank_4 = data_sta_ReLink.loc[(l*6+4)*gap+k,ReLink_attr_4]

        ReLink_L_diff_4 = abs(ReLink_L_new_rank_4 - 4)
        ReLink_M_diff_4 = abs(ReLink_M_new_rank_4 - 4)
        ReLink_S_diff_4 = abs(ReLink_S_new_rank_4 - 4)

        KNN_diff_L_O_4_list.append(ReLink_L_diff_4)
        KNN_diff_M_O_4_list.append(ReLink_M_diff_4)
        KNN_diff_S_O_4_list.append(ReLink_S_diff_4)

      # 计算 KNN top-5 diff
      if(data_o_ReLink.loc[(l*6+4)*gap+k].values[j] == 5):

        ReLink_attr_5 = list(data_o_ReLink)[j]
        ReLink_L_new_rank_5 = data_log_ReLink.loc[(l*6+4)*gap+k,ReLink_attr_5]
        ReLink_M_new_rank_5 = data_min_ReLink.loc[(l*6+4)*gap+k,ReLink_attr_5]
        ReLink_S_new_rank_5 = data_sta_ReLink.loc[(l*6+4)*gap+k,ReLink_attr_5]

        ReLink_L_diff_5 = abs(ReLink_L_new_rank_5 - 5)
        ReLink_M_diff_5 = abs(ReLink_M_new_rank_5 - 5)
        ReLink_S_diff_5 = abs(ReLink_S_new_rank_5 - 5)

        KNN_diff_L_O_5_list.append(ReLink_L_diff_5)
        KNN_diff_M_O_5_list.append(ReLink_M_diff_5)
        KNN_diff_S_O_5_list.append(ReLink_S_diff_5)


      # 计算 MLP top-1 diff
      if(data_o_ReLink.loc[(l*6+5)*gap+k].values[j] == 1):

        ReLink_attr_1 = list(data_o_ReLink)[j]
        ReLink_L_new_rank_1 = data_log_ReLink.loc[(l*6+5)*gap+k,ReLink_attr_1]
        ReLink_M_new_rank_1 = data_min_ReLink.loc[(l*6+5)*gap+k,ReLink_attr_1]
        ReLink_S_new_rank_1 = data_sta_ReLink.loc[(l*6+5)*gap+k,ReLink_attr_1]

        ReLink_L_diff_1 = abs(ReLink_L_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3
        ReLink_M_diff_1 = abs(ReLink_M_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3
        ReLink_S_diff_1 = abs(ReLink_S_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3

        MLP_diff_L_O_1_list.append(ReLink_L_diff_1)
        MLP_diff_M_O_1_list.append(ReLink_M_diff_1)
        MLP_diff_S_O_1_list.append(ReLink_S_diff_1)

      # 计算 MLP top-2 diff
      if(data_o_ReLink.loc[(l*6+5)*gap+k].values[j] == 2):

        ReLink_attr_2 = list(data_o_ReLink)[j]
        ReLink_L_new_rank_2 = data_log_ReLink.loc[(l*6+5)*gap+k,ReLink_attr_2]
        ReLink_M_new_rank_2 = data_min_ReLink.loc[(l*6+5)*gap+k,ReLink_attr_2]
        ReLink_S_new_rank_2 = data_sta_ReLink.loc[(l*6+5)*gap+k,ReLink_attr_2]

        ReLink_L_diff_2 = abs(ReLink_L_new_rank_2 - 2)
        ReLink_M_diff_2 = abs(ReLink_M_new_rank_2 - 2)
        ReLink_S_diff_2 = abs(ReLink_S_new_rank_2 - 2)

        MLP_diff_L_O_2_list.append(ReLink_L_diff_2)
        MLP_diff_M_O_2_list.append(ReLink_M_diff_2)
        MLP_diff_S_O_2_list.append(ReLink_S_diff_2)

      # 计算 MLP top-3 diff
      if(data_o_ReLink.loc[(l*6+5)*gap+k].values[j] == 3):

        ReLink_attr_3 = list(data_o_ReLink)[j]
        ReLink_L_new_rank_3 = data_log_ReLink.loc[(l*6+5)*gap+k,ReLink_attr_3]
        ReLink_M_new_rank_3 = data_min_ReLink.loc[(l*6+5)*gap+k,ReLink_attr_3]
        ReLink_S_new_rank_3 = data_sta_ReLink.loc[(l*6+5)*gap+k,ReLink_attr_3]

        ReLink_L_diff_3 = abs(ReLink_L_new_rank_3 - 3)
        ReLink_M_diff_3 = abs(ReLink_M_new_rank_3 - 3)
        ReLink_S_diff_3 = abs(ReLink_S_new_rank_3 - 3)

        MLP_diff_L_O_3_list.append(ReLink_L_diff_3)
        MLP_diff_M_O_3_list.append(ReLink_M_diff_3)
        MLP_diff_S_O_3_list.append(ReLink_S_diff_3)

      # 计算 MLP top-4 diff
      if(data_o_ReLink.loc[(l*6+5)*gap+k].values[j] == 4):

        ReLink_attr_4 = list(data_o_ReLink)[j]
        ReLink_L_new_rank_4 = data_log_ReLink.loc[(l*6+5)*gap+k,ReLink_attr_4]
        ReLink_M_new_rank_4 = data_min_ReLink.loc[(l*6+5)*gap+k,ReLink_attr_4]
        ReLink_S_new_rank_4 = data_sta_ReLink.loc[(l*6+5)*gap+k,ReLink_attr_4]

        ReLink_L_diff_4 = abs(ReLink_L_new_rank_4 - 4)
        ReLink_M_diff_4 = abs(ReLink_M_new_rank_4 - 4)
        ReLink_S_diff_4 = abs(ReLink_S_new_rank_4 - 4)

        MLP_diff_L_O_4_list.append(ReLink_L_diff_4)
        MLP_diff_M_O_4_list.append(ReLink_M_diff_4)
        MLP_diff_S_O_4_list.append(ReLink_S_diff_4)

      # 计算 MLP top-5 diff
      if(data_o_ReLink.loc[(l*6+5)*gap+k].values[j] == 5):

        ReLink_attr_5 = list(data_o_ReLink)[j]
        ReLink_L_new_rank_5 = data_log_ReLink.loc[(l*6+5)*gap+k,ReLink_attr_5]
        ReLink_M_new_rank_5 = data_min_ReLink.loc[(l*6+5)*gap+k,ReLink_attr_5]
        ReLink_S_new_rank_5 = data_sta_ReLink.loc[(l*6+5)*gap+k,ReLink_attr_5]

        ReLink_L_diff_5 = abs(ReLink_L_new_rank_5 - 5)
        ReLink_M_diff_5 = abs(ReLink_M_new_rank_5 - 5)
        ReLink_S_diff_5 = abs(ReLink_S_new_rank_5 - 5)

        MLP_diff_L_O_5_list.append(ReLink_L_diff_5)
        MLP_diff_M_O_5_list.append(ReLink_M_diff_5)
        MLP_diff_S_O_5_list.append(ReLink_S_diff_5)

# 每个分类器依次计算25次实验的重复
# 最后算 Promise 数据集所有项目 的特征差异

# 每个分类器依次计算25次实验的重复
# 最后算 Promise 数据集所有项目 的特征差异


gap = 25
length = len(Promise)

for l in range(length):

  for k in range(gap):

   for j in range(data_o_Promise.shape[1]): # 20 26 61

      # 计算 RF top-1 diff
      if(data_o_Promise.loc[(l*6*gap+k)].values[j] == 1):

        Promise_attr_1 = list(data_o_Promise)[j]
        Promise_L_new_rank_1 = data_log_Promise.loc[(l*6*gap+k),Promise_attr_1]
        Promise_M_new_rank_1 = data_min_Promise.loc[(l*6*gap+k),Promise_attr_1]
        Promise_S_new_rank_1 = data_sta_Promise.loc[(l*6*gap+k),Promise_attr_1]

        Promise_L_diff_1 = abs(Promise_L_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3
        Promise_M_diff_1 = abs(Promise_M_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3
        Promise_S_diff_1 = abs(Promise_S_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3

        RF_diff_L_O_1_list.append(Promise_L_diff_1)
        RF_diff_M_O_1_list.append(Promise_M_diff_1)
        RF_diff_S_O_1_list.append(Promise_S_diff_1)

      # 计算 RF top-2 diff
      if(data_o_Promise.loc[(l*6*gap+k)].values[j] == 2):

        Promise_attr_2 = list(data_o_Promise)[j]
        Promise_L_new_rank_2 = data_log_Promise.loc[(l*6*gap+k),Promise_attr_2]
        Promise_M_new_rank_2 = data_min_Promise.loc[(l*6*gap+k),Promise_attr_2]
        Promise_S_new_rank_2 = data_sta_Promise.loc[(l*6*gap+k),Promise_attr_2]

        Promise_L_diff_2 = abs(Promise_L_new_rank_2 - 2)
        Promise_M_diff_2 = abs(Promise_M_new_rank_2 - 2)
        Promise_S_diff_2 = abs(Promise_S_new_rank_2 - 2)

        RF_diff_L_O_2_list.append(Promise_L_diff_2)
        RF_diff_M_O_2_list.append(Promise_M_diff_2)
        RF_diff_S_O_2_list.append(Promise_S_diff_2)

      # 计算 RF top-3 diff
      if(data_o_Promise.loc[(l*6*gap+k)].values[j] == 3):

        Promise_attr_3 = list(data_o_Promise)[j]
        Promise_L_new_rank_3 = data_log_Promise.loc[(l*6*gap+k),Promise_attr_3]
        Promise_M_new_rank_3 = data_min_Promise.loc[(l*6*gap+k),Promise_attr_3]
        Promise_S_new_rank_3 = data_sta_Promise.loc[(l*6*gap+k),Promise_attr_3]

        Promise_L_diff_3 = abs(Promise_L_new_rank_3 - 3)
        Promise_M_diff_3 = abs(Promise_M_new_rank_3 - 3)
        Promise_S_diff_3 = abs(Promise_S_new_rank_3 - 3)

        RF_diff_L_O_3_list.append(Promise_L_diff_3)
        RF_diff_M_O_3_list.append(Promise_M_diff_3)
        RF_diff_S_O_3_list.append(Promise_S_diff_3)

      # 计算 RF top-4 diff
      if(data_o_Promise.loc[(l*6*gap+k)].values[j] == 4):

        Promise_attr_4 = list(data_o_Promise)[j]
        Promise_L_new_rank_4 = data_log_Promise.loc[(l*6*gap+k),Promise_attr_4]
        Promise_M_new_rank_4 = data_min_Promise.loc[(l*6*gap+k),Promise_attr_4]
        Promise_S_new_rank_4 = data_sta_Promise.loc[(l*6*gap+k),Promise_attr_4]

        Promise_L_diff_4 = abs(Promise_L_new_rank_4 - 4)
        Promise_M_diff_4 = abs(Promise_M_new_rank_4 - 4)
        Promise_S_diff_4 = abs(Promise_S_new_rank_4 - 4)

        RF_diff_L_O_4_list.append(Promise_L_diff_4)
        RF_diff_M_O_4_list.append(Promise_M_diff_4)
        RF_diff_S_O_4_list.append(Promise_S_diff_4)

      # 计算 RF top-5 diff
      if(data_o_Promise.loc[(l*6*gap+k)].values[j] == 5):

        Promise_attr_5 = list(data_o_Promise)[j]
        Promise_L_new_rank_5 = data_log_Promise.loc[(l*6*gap+k),Promise_attr_5]
        Promise_M_new_rank_5 = data_min_Promise.loc[(l*6*gap+k),Promise_attr_5]
        Promise_S_new_rank_5 = data_sta_Promise.loc[(l*6*gap+k),Promise_attr_5]

        Promise_L_diff_5 = abs(Promise_L_new_rank_5 - 5)
        Promise_M_diff_5 = abs(Promise_M_new_rank_5 - 5)
        Promise_S_diff_5 = abs(Promise_S_new_rank_5 - 5)

        RF_diff_L_O_5_list.append(Promise_L_diff_5)
        RF_diff_M_O_5_list.append(Promise_M_diff_5)
        RF_diff_S_O_5_list.append(Promise_S_diff_5)

      # 计算 LR top-1 diff
      if(data_o_Promise.loc[(l*6+1)*gap+k].values[j] == 1):

        Promise_attr_1 = list(data_o_Promise)[j]
        Promise_L_new_rank_1 = data_log_Promise.loc[(l*6+1)*gap+k,Promise_attr_1]
        Promise_M_new_rank_1 = data_min_Promise.loc[(l*6+1)*gap+k,Promise_attr_1]
        Promise_S_new_rank_1 = data_sta_Promise.loc[(l*6+1)*gap+k,Promise_attr_1]

        Promise_L_diff_1 = abs(Promise_L_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3
        Promise_M_diff_1 = abs(Promise_M_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3
        Promise_S_diff_1 = abs(Promise_S_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3

        LR_diff_L_O_1_list.append(Promise_L_diff_1)
        LR_diff_M_O_1_list.append(Promise_M_diff_1)
        LR_diff_S_O_1_list.append(Promise_S_diff_1)

      # 计算 LR top-2 diff
      if(data_o_Promise.loc[(l*6+1)*gap+k].values[j] == 2):

        Promise_attr_2 = list(data_o_Promise)[j]
        Promise_L_new_rank_2 = data_log_Promise.loc[(l*6+1)*gap+k,Promise_attr_2]
        Promise_M_new_rank_2 = data_min_Promise.loc[(l*6+1)*gap+k,Promise_attr_2]
        Promise_S_new_rank_2 = data_sta_Promise.loc[(l*6+1)*gap+k,Promise_attr_2]

        Promise_L_diff_2 = abs(Promise_L_new_rank_2 - 2)
        Promise_M_diff_2 = abs(Promise_M_new_rank_2 - 2)
        Promise_S_diff_2 = abs(Promise_S_new_rank_2 - 2)

        LR_diff_L_O_2_list.append(Promise_L_diff_2)
        LR_diff_M_O_2_list.append(Promise_M_diff_2)
        LR_diff_S_O_2_list.append(Promise_S_diff_2)

      # 计算 LR top-3 diff
      if(data_o_Promise.loc[(l*6+1)*gap+k].values[j] == 3):

        Promise_attr_3 = list(data_o_Promise)[j]
        Promise_L_new_rank_3 = data_log_Promise.loc[(l*6+1)*gap+k,Promise_attr_3]
        Promise_M_new_rank_3 = data_min_Promise.loc[(l*6+1)*gap+k,Promise_attr_3]
        Promise_S_new_rank_3 = data_sta_Promise.loc[(l*6+1)*gap+k,Promise_attr_3]

        Promise_L_diff_3 = abs(Promise_L_new_rank_3 - 3)
        Promise_M_diff_3 = abs(Promise_M_new_rank_3 - 3)
        Promise_S_diff_3 = abs(Promise_S_new_rank_3 - 3)

        LR_diff_L_O_3_list.append(Promise_L_diff_3)
        LR_diff_M_O_3_list.append(Promise_M_diff_3)
        LR_diff_S_O_3_list.append(Promise_S_diff_3)

      # 计算 LR top-4 diff
      if(data_o_Promise.loc[(l*6+1)*gap+k].values[j] == 4):

        Promise_attr_4 = list(data_o_Promise)[j]
        Promise_L_new_rank_4 = data_log_Promise.loc[(l*6+1)*gap+k,Promise_attr_4]
        Promise_M_new_rank_4 = data_min_Promise.loc[(l*6+1)*gap+k,Promise_attr_4]
        Promise_S_new_rank_4 = data_sta_Promise.loc[(l*6+1)*gap+k,Promise_attr_4]

        Promise_L_diff_4 = abs(Promise_L_new_rank_4 - 4)
        Promise_M_diff_4 = abs(Promise_M_new_rank_4 - 4)
        Promise_S_diff_4 = abs(Promise_S_new_rank_4 - 4)

        LR_diff_L_O_4_list.append(Promise_L_diff_4)
        LR_diff_M_O_4_list.append(Promise_M_diff_4)
        LR_diff_S_O_4_list.append(Promise_S_diff_4)

      # 计算 LR top-5 diff
      if(data_o_Promise.loc[(l*6+1)*gap+k].values[j] == 5):

        Promise_attr_5 = list(data_o_Promise)[j]
        Promise_L_new_rank_5 = data_log_Promise.loc[(l*6+1)*gap+k,Promise_attr_5]
        Promise_M_new_rank_5 = data_min_Promise.loc[(l*6+1)*gap+k,Promise_attr_5]
        Promise_S_new_rank_5 = data_sta_Promise.loc[(l*6+1)*gap+k,Promise_attr_5]

        Promise_L_diff_5 = abs(Promise_L_new_rank_5 - 5)
        Promise_M_diff_5 = abs(Promise_M_new_rank_5 - 5)
        Promise_S_diff_5 = abs(Promise_S_new_rank_5 - 5)

        LR_diff_L_O_5_list.append(Promise_L_diff_5)
        LR_diff_M_O_5_list.append(Promise_M_diff_5)
        LR_diff_S_O_5_list.append(Promise_S_diff_5)


      # 计算 NB top-1 diff
      if(data_o_Promise.loc[(l*6+2)*gap+k].values[j] == 1):

        Promise_attr_1 = list(data_o_Promise)[j]
        Promise_L_new_rank_1 = data_log_Promise.loc[(l*6+2)*gap+k,Promise_attr_1]
        Promise_M_new_rank_1 = data_min_Promise.loc[(l*6+2)*gap+k,Promise_attr_1]
        Promise_S_new_rank_1 = data_sta_Promise.loc[(l*6+2)*gap+k,Promise_attr_1]

        Promise_L_diff_1 = abs(Promise_L_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3
        Promise_M_diff_1 = abs(Promise_M_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3
        Promise_S_diff_1 = abs(Promise_S_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3

        NB_diff_L_O_1_list.append(Promise_L_diff_1)
        NB_diff_M_O_1_list.append(Promise_M_diff_1)
        NB_diff_S_O_1_list.append(Promise_S_diff_1)

      # 计算 NB top-2 diff
      if(data_o_Promise.loc[(l*6+2)*gap+k].values[j] == 2):

        Promise_attr_2 = list(data_o_Promise)[j]
        Promise_L_new_rank_2 = data_log_Promise.loc[(l*6+2)*gap+k,Promise_attr_2]
        Promise_M_new_rank_2 = data_min_Promise.loc[(l*6+2)*gap+k,Promise_attr_2]
        Promise_S_new_rank_2 = data_sta_Promise.loc[(l*6+2)*gap+k,Promise_attr_2]

        Promise_L_diff_2 = abs(Promise_L_new_rank_2 - 2)
        Promise_M_diff_2 = abs(Promise_M_new_rank_2 - 2)
        Promise_S_diff_2 = abs(Promise_S_new_rank_2 - 2)

        NB_diff_L_O_2_list.append(Promise_L_diff_2)
        NB_diff_M_O_2_list.append(Promise_M_diff_2)
        NB_diff_S_O_2_list.append(Promise_S_diff_2)

      # 计算 NB top-3 diff
      if(data_o_Promise.loc[(l*6+2)*gap+k].values[j] == 3):

        Promise_attr_3 = list(data_o_Promise)[j]
        Promise_L_new_rank_3 = data_log_Promise.loc[(l*6+2)*gap+k,Promise_attr_3]
        Promise_M_new_rank_3 = data_min_Promise.loc[(l*6+2)*gap+k,Promise_attr_3]
        Promise_S_new_rank_3 = data_sta_Promise.loc[(l*6+2)*gap+k,Promise_attr_3]

        Promise_L_diff_3 = abs(Promise_L_new_rank_3 - 3)
        Promise_M_diff_3 = abs(Promise_M_new_rank_3 - 3)
        Promise_S_diff_3 = abs(Promise_S_new_rank_3 - 3)

        NB_diff_L_O_3_list.append(Promise_L_diff_3)
        NB_diff_M_O_3_list.append(Promise_M_diff_3)
        NB_diff_S_O_3_list.append(Promise_S_diff_3)

      # 计算 NB top-4 diff
      if(data_o_Promise.loc[(l*6+2)*gap+k].values[j] == 4):

        Promise_attr_4 = list(data_o_Promise)[j]
        Promise_L_new_rank_4 = data_log_Promise.loc[(l*6+2)*gap+k,Promise_attr_4]
        Promise_M_new_rank_4 = data_min_Promise.loc[(l*6+2)*gap+k,Promise_attr_4]
        Promise_S_new_rank_4 = data_sta_Promise.loc[(l*6+2)*gap+k,Promise_attr_4]

        Promise_L_diff_4 = abs(Promise_L_new_rank_4 - 4)
        Promise_M_diff_4 = abs(Promise_M_new_rank_4 - 4)
        Promise_S_diff_4 = abs(Promise_S_new_rank_4 - 4)

        NB_diff_L_O_4_list.append(Promise_L_diff_4)
        NB_diff_M_O_4_list.append(Promise_M_diff_4)
        NB_diff_S_O_4_list.append(Promise_S_diff_4)

      # 计算 NB top-5 diff
      if(data_o_Promise.loc[(l*6+2)*gap+k].values[j] == 5):

        Promise_attr_5 = list(data_o_Promise)[j]
        Promise_L_new_rank_5 = data_log_Promise.loc[(2*gap+k),Promise_attr_5]
        Promise_M_new_rank_5 = data_min_Promise.loc[(2*gap+k),Promise_attr_5]
        Promise_S_new_rank_5 = data_sta_Promise.loc[(2*gap+k),Promise_attr_5]

        Promise_L_diff_5 = abs(Promise_L_new_rank_5 - 5)
        Promise_M_diff_5 = abs(Promise_M_new_rank_5 - 5)
        Promise_S_diff_5 = abs(Promise_S_new_rank_5 - 5)

        NB_diff_L_O_5_list.append(Promise_L_diff_5)
        NB_diff_M_O_5_list.append(Promise_M_diff_5)
        NB_diff_S_O_5_list.append(Promise_S_diff_5)



      # 计算 DT top-1 diff
      if(data_o_Promise.loc[(l*6+3)*gap+k].values[j] == 1):

        Promise_attr_1 = list(data_o_Promise)[j]
        Promise_L_new_rank_1 = data_log_Promise.loc[(l*6+3)*gap+k,Promise_attr_1]
        Promise_M_new_rank_1 = data_min_Promise.loc[(l*6+3)*gap+k,Promise_attr_1]
        Promise_S_new_rank_1 = data_sta_Promise.loc[(l*6+3)*gap+k,Promise_attr_1]

        Promise_L_diff_1 = abs(Promise_L_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3
        Promise_M_diff_1 = abs(Promise_M_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3
        Promise_S_diff_1 = abs(Promise_S_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3

        DT_diff_L_O_1_list.append(Promise_L_diff_1)
        DT_diff_M_O_1_list.append(Promise_M_diff_1)
        DT_diff_S_O_1_list.append(Promise_S_diff_1)

      # 计算 DT top-2 diff
      if(data_o_Promise.loc[(l*6+3)*gap+k].values[j] == 2):

        Promise_attr_2 = list(data_o_Promise)[j]
        Promise_L_new_rank_2 = data_log_Promise.loc[(l*6+3)*gap+k,Promise_attr_2]
        Promise_M_new_rank_2 = data_min_Promise.loc[(l*6+3)*gap+k,Promise_attr_2]
        Promise_S_new_rank_2 = data_sta_Promise.loc[(l*6+3)*gap+k,Promise_attr_2]

        Promise_L_diff_2 = abs(Promise_L_new_rank_2 - 2)
        Promise_M_diff_2 = abs(Promise_M_new_rank_2 - 2)
        Promise_S_diff_2 = abs(Promise_S_new_rank_2 - 2)

        DT_diff_L_O_2_list.append(Promise_L_diff_2)
        DT_diff_M_O_2_list.append(Promise_M_diff_2)
        DT_diff_S_O_2_list.append(Promise_S_diff_2)

      # 计算 DT top-3 diff
      if(data_o_Promise.loc[(l*6+3)*gap+k].values[j] == 3):

        Promise_attr_3 = list(data_o_Promise)[j]
        Promise_L_new_rank_3 = data_log_Promise.loc[(l*6+3)*gap+k,Promise_attr_3]
        Promise_M_new_rank_3 = data_min_Promise.loc[(l*6+3)*gap+k,Promise_attr_3]
        Promise_S_new_rank_3 = data_sta_Promise.loc[(l*6+3)*gap+k,Promise_attr_3]

        Promise_L_diff_3 = abs(Promise_L_new_rank_3 - 3)
        Promise_M_diff_3 = abs(Promise_M_new_rank_3 - 3)
        Promise_S_diff_3 = abs(Promise_S_new_rank_3 - 3)

        DT_diff_L_O_3_list.append(Promise_L_diff_3)
        DT_diff_M_O_3_list.append(Promise_M_diff_3)
        DT_diff_S_O_3_list.append(Promise_S_diff_3)

      # 计算 DT top-4 diff
      if(data_o_Promise.loc[(l*6+3)*gap+k].values[j] == 4):

        Promise_attr_4 = list(data_o_Promise)[j]
        Promise_L_new_rank_4 = data_log_Promise.loc[(l*6+3)*gap+k,Promise_attr_4]
        Promise_M_new_rank_4 = data_min_Promise.loc[(l*6+3)*gap+k,Promise_attr_4]
        Promise_S_new_rank_4 = data_sta_Promise.loc[(l*6+3)*gap+k,Promise_attr_4]

        Promise_L_diff_4 = abs(Promise_L_new_rank_4 - 4)
        Promise_M_diff_4 = abs(Promise_M_new_rank_4 - 4)
        Promise_S_diff_4 = abs(Promise_S_new_rank_4 - 4)

        DT_diff_L_O_4_list.append(Promise_L_diff_4)
        DT_diff_M_O_4_list.append(Promise_M_diff_4)
        DT_diff_S_O_4_list.append(Promise_S_diff_4)

      # 计算 DT top-5 diff
      if(data_o_Promise.loc[(l*6+3)*gap+k].values[j] == 5):

        Promise_attr_5 = list(data_o_Promise)[j]
        Promise_L_new_rank_5 = data_log_Promise.loc[(l*6+3)*gap+k,Promise_attr_5]
        Promise_M_new_rank_5 = data_min_Promise.loc[(l*6+3)*gap+k,Promise_attr_5]
        Promise_S_new_rank_5 = data_sta_Promise.loc[(l*6+3)*gap+k,Promise_attr_5]

        Promise_L_diff_5 = abs(Promise_L_new_rank_5 - 5)
        Promise_M_diff_5 = abs(Promise_M_new_rank_5 - 5)
        Promise_S_diff_5 = abs(Promise_S_new_rank_5 - 5)

        DT_diff_L_O_5_list.append(Promise_L_diff_5)
        DT_diff_M_O_5_list.append(Promise_M_diff_5)
        DT_diff_S_O_5_list.append(Promise_S_diff_5)

      # 计算 KNN top-1 diff
      if(data_o_Promise.loc[(l*6+4)*gap+k].values[j] == 1):

        Promise_attr_1 = list(data_o_Promise)[j]
        Promise_L_new_rank_1 = data_log_Promise.loc[(l*6+4)*gap+k,Promise_attr_1]
        Promise_M_new_rank_1 = data_min_Promise.loc[(l*6+4)*gap+k,Promise_attr_1]
        Promise_S_new_rank_1 = data_sta_Promise.loc[(l*6+4)*gap+k,Promise_attr_1]

        Promise_L_diff_1 = abs(Promise_L_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3
        Promise_M_diff_1 = abs(Promise_M_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3
        Promise_S_diff_1 = abs(Promise_S_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3

        KNN_diff_L_O_1_list.append(Promise_L_diff_1)
        KNN_diff_M_O_1_list.append(Promise_M_diff_1)
        KNN_diff_S_O_1_list.append(Promise_S_diff_1)

      # 计算 KNN top-2 diff
      if(data_o_Promise.loc[(l*6+4)*gap+k].values[j] == 2):

        Promise_attr_2 = list(data_o_Promise)[j]
        Promise_L_new_rank_2 = data_log_Promise.loc[(l*6+4)*gap+k,Promise_attr_2]
        Promise_M_new_rank_2 = data_min_Promise.loc[(l*6+4)*gap+k,Promise_attr_2]
        Promise_S_new_rank_2 = data_sta_Promise.loc[(l*6+4)*gap+k,Promise_attr_2]

        Promise_L_diff_2 = abs(Promise_L_new_rank_2 - 2)
        Promise_M_diff_2 = abs(Promise_M_new_rank_2 - 2)
        Promise_S_diff_2 = abs(Promise_S_new_rank_2 - 2)

        KNN_diff_L_O_2_list.append(Promise_L_diff_2)
        KNN_diff_M_O_2_list.append(Promise_M_diff_2)
        KNN_diff_S_O_2_list.append(Promise_S_diff_2)

      # 计算 KNN top-3 diff
      if(data_o_Promise.loc[(l*6+4)*gap+k].values[j] == 3):

        Promise_attr_3 = list(data_o_Promise)[j]
        Promise_L_new_rank_3 = data_log_Promise.loc[(l*6+4)*gap+k,Promise_attr_3]
        Promise_M_new_rank_3 = data_min_Promise.loc[(l*6+4)*gap+k,Promise_attr_3]
        Promise_S_new_rank_3 = data_sta_Promise.loc[(l*6+4)*gap+k,Promise_attr_3]

        Promise_L_diff_3 = abs(Promise_L_new_rank_3 - 3)
        Promise_M_diff_3 = abs(Promise_M_new_rank_3 - 3)
        Promise_S_diff_3 = abs(Promise_S_new_rank_3 - 3)

        KNN_diff_L_O_3_list.append(Promise_L_diff_3)
        KNN_diff_M_O_3_list.append(Promise_M_diff_3)
        KNN_diff_S_O_3_list.append(Promise_S_diff_3)

      # 计算 KNN top-4 diff
      if(data_o_Promise.loc[(l*6+4)*gap+k].values[j] == 4):

        Promise_attr_4 = list(data_o_Promise)[j]
        Promise_L_new_rank_4 = data_log_Promise.loc[(l*6+4)*gap+k,Promise_attr_4]
        Promise_M_new_rank_4 = data_min_Promise.loc[(l*6+4)*gap+k,Promise_attr_4]
        Promise_S_new_rank_4 = data_sta_Promise.loc[(l*6+4)*gap+k,Promise_attr_4]

        Promise_L_diff_4 = abs(Promise_L_new_rank_4 - 4)
        Promise_M_diff_4 = abs(Promise_M_new_rank_4 - 4)
        Promise_S_diff_4 = abs(Promise_S_new_rank_4 - 4)

        KNN_diff_L_O_4_list.append(Promise_L_diff_4)
        KNN_diff_M_O_4_list.append(Promise_M_diff_4)
        KNN_diff_S_O_4_list.append(Promise_S_diff_4)

      # 计算 KNN top-5 diff
      if(data_o_Promise.loc[(l*6+4)*gap+k].values[j] == 5):

        Promise_attr_5 = list(data_o_Promise)[j]
        Promise_L_new_rank_5 = data_log_Promise.loc[(l*6+4)*gap+k,Promise_attr_5]
        Promise_M_new_rank_5 = data_min_Promise.loc[(l*6+4)*gap+k,Promise_attr_5]
        Promise_S_new_rank_5 = data_sta_Promise.loc[(l*6+4)*gap+k,Promise_attr_5]

        Promise_L_diff_5 = abs(Promise_L_new_rank_5 - 5)
        Promise_M_diff_5 = abs(Promise_M_new_rank_5 - 5)
        Promise_S_diff_5 = abs(Promise_S_new_rank_5 - 5)

        KNN_diff_L_O_5_list.append(Promise_L_diff_5)
        KNN_diff_M_O_5_list.append(Promise_M_diff_5)
        KNN_diff_S_O_5_list.append(Promise_S_diff_5)


      # 计算 MLP top-1 diff
      if(data_o_Promise.loc[(l*6+5)*gap+k].values[j] == 1):

        Promise_attr_1 = list(data_o_Promise)[j]
        Promise_L_new_rank_1 = data_log_Promise.loc[(l*6+5)*gap+k,Promise_attr_1]
        Promise_M_new_rank_1 = data_min_Promise.loc[(l*6+5)*gap+k,Promise_attr_1]
        Promise_S_new_rank_1 = data_sta_Promise.loc[(l*6+5)*gap+k,Promise_attr_1]

        Promise_L_diff_1 = abs(Promise_L_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3
        Promise_M_diff_1 = abs(Promise_M_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3
        Promise_S_diff_1 = abs(Promise_S_new_rank_1 - 1)  # =1 表示之前排名1 的 偏移量 =2 =3

        MLP_diff_L_O_1_list.append(Promise_L_diff_1)
        MLP_diff_M_O_1_list.append(Promise_M_diff_1)
        MLP_diff_S_O_1_list.append(Promise_S_diff_1)

      # 计算 MLP top-2 diff
      if(data_o_Promise.loc[(l*6+5)*gap+k].values[j] == 2):

        Promise_attr_2 = list(data_o_Promise)[j]
        Promise_L_new_rank_2 = data_log_Promise.loc[(l*6+5)*gap+k,Promise_attr_2]
        Promise_M_new_rank_2 = data_min_Promise.loc[(l*6+5)*gap+k,Promise_attr_2]
        Promise_S_new_rank_2 = data_sta_Promise.loc[(l*6+5)*gap+k,Promise_attr_2]

        Promise_L_diff_2 = abs(Promise_L_new_rank_2 - 2)
        Promise_M_diff_2 = abs(Promise_M_new_rank_2 - 2)
        Promise_S_diff_2 = abs(Promise_S_new_rank_2 - 2)

        MLP_diff_L_O_2_list.append(Promise_L_diff_2)
        MLP_diff_M_O_2_list.append(Promise_M_diff_2)
        MLP_diff_S_O_2_list.append(Promise_S_diff_2)

      # 计算 MLP top-3 diff
      if(data_o_Promise.loc[(l*6+5)*gap+k].values[j] == 3):

        Promise_attr_3 = list(data_o_Promise)[j]
        Promise_L_new_rank_3 = data_log_Promise.loc[(l*6+5)*gap+k,Promise_attr_3]
        Promise_M_new_rank_3 = data_min_Promise.loc[(l*6+5)*gap+k,Promise_attr_3]
        Promise_S_new_rank_3 = data_sta_Promise.loc[(l*6+5)*gap+k,Promise_attr_3]

        Promise_L_diff_3 = abs(Promise_L_new_rank_3 - 3)
        Promise_M_diff_3 = abs(Promise_M_new_rank_3 - 3)
        Promise_S_diff_3 = abs(Promise_S_new_rank_3 - 3)

        MLP_diff_L_O_3_list.append(Promise_L_diff_3)
        MLP_diff_M_O_3_list.append(Promise_M_diff_3)
        MLP_diff_S_O_3_list.append(Promise_S_diff_3)

      # 计算 MLP top-4 diff
      if(data_o_Promise.loc[(l*6+5)*gap+k].values[j] == 4):

        Promise_attr_4 = list(data_o_Promise)[j]
        Promise_L_new_rank_4 = data_log_Promise.loc[(l*6+5)*gap+k,Promise_attr_4]
        Promise_M_new_rank_4 = data_min_Promise.loc[(l*6+5)*gap+k,Promise_attr_4]
        Promise_S_new_rank_4 = data_sta_Promise.loc[(l*6+5)*gap+k,Promise_attr_4]

        Promise_L_diff_4 = abs(Promise_L_new_rank_4 - 4)
        Promise_M_diff_4 = abs(Promise_M_new_rank_4 - 4)
        Promise_S_diff_4 = abs(Promise_S_new_rank_4 - 4)

        MLP_diff_L_O_4_list.append(Promise_L_diff_4)
        MLP_diff_M_O_4_list.append(Promise_M_diff_4)
        MLP_diff_S_O_4_list.append(Promise_S_diff_4)

      # 计算 MLP top-5 diff
      if(data_o_Promise.loc[(l*6+5)*gap+k].values[j] == 5):

        Promise_attr_5 = list(data_o_Promise)[j]
        Promise_L_new_rank_5 = data_log_Promise.loc[(l*6+5)*gap+k,Promise_attr_5]
        Promise_M_new_rank_5 = data_min_Promise.loc[(l*6+5)*gap+k,Promise_attr_5]
        Promise_S_new_rank_5 = data_sta_Promise.loc[(l*6+5)*gap+k,Promise_attr_5]

        Promise_L_diff_5 = abs(Promise_L_new_rank_5 - 5)
        Promise_M_diff_5 = abs(Promise_M_new_rank_5 - 5)
        Promise_S_diff_5 = abs(Promise_S_new_rank_5 - 5)

        MLP_diff_L_O_5_list.append(Promise_L_diff_5)
        MLP_diff_M_O_5_list.append(Promise_M_diff_5)
        MLP_diff_S_O_5_list.append(Promise_S_diff_5)




# 计算结束

from collections import Counter


RF_diff_count_L_O_1 = Counter(RF_diff_L_O_1_list)
RF_diff_count_L_O_2 = Counter(RF_diff_L_O_2_list)
RF_diff_count_L_O_3 = Counter(RF_diff_L_O_3_list)
RF_diff_count_L_O_4 = Counter(RF_diff_L_O_4_list)
RF_diff_count_L_O_5 = Counter(RF_diff_L_O_5_list)

RF_diff_count_M_O_1 = Counter(RF_diff_M_O_1_list)
RF_diff_count_M_O_2 = Counter(RF_diff_M_O_2_list)
RF_diff_count_M_O_3 = Counter(RF_diff_M_O_3_list)
RF_diff_count_M_O_4 = Counter(RF_diff_M_O_4_list)
RF_diff_count_M_O_5 = Counter(RF_diff_M_O_5_list)

RF_diff_count_S_O_1 = Counter(RF_diff_S_O_1_list)
RF_diff_count_S_O_2 = Counter(RF_diff_S_O_2_list)
RF_diff_count_S_O_3 = Counter(RF_diff_S_O_3_list)
RF_diff_count_S_O_4 = Counter(RF_diff_S_O_4_list)
RF_diff_count_S_O_5 = Counter(RF_diff_S_O_5_list)

LR_diff_count_L_O_1 = Counter(LR_diff_L_O_1_list)
LR_diff_count_L_O_2 = Counter(LR_diff_L_O_2_list)
LR_diff_count_L_O_3 = Counter(LR_diff_L_O_3_list)
LR_diff_count_L_O_4 = Counter(LR_diff_L_O_4_list)
LR_diff_count_L_O_5 = Counter(LR_diff_L_O_5_list)

LR_diff_count_M_O_1 = Counter(LR_diff_M_O_1_list)
LR_diff_count_M_O_2 = Counter(LR_diff_M_O_2_list)
LR_diff_count_M_O_3 = Counter(LR_diff_M_O_3_list)
LR_diff_count_M_O_4 = Counter(LR_diff_M_O_4_list)
LR_diff_count_M_O_5 = Counter(LR_diff_M_O_5_list)

LR_diff_count_S_O_1 = Counter(LR_diff_S_O_1_list)
LR_diff_count_S_O_2 = Counter(LR_diff_S_O_2_list)
LR_diff_count_S_O_3 = Counter(LR_diff_S_O_3_list)
LR_diff_count_S_O_4 = Counter(LR_diff_S_O_4_list)
LR_diff_count_S_O_5 = Counter(LR_diff_S_O_5_list)

NB_diff_count_L_O_1 = Counter(NB_diff_L_O_1_list)
NB_diff_count_L_O_2 = Counter(NB_diff_L_O_2_list)
NB_diff_count_L_O_3 = Counter(NB_diff_L_O_3_list)
NB_diff_count_L_O_4 = Counter(NB_diff_L_O_4_list)
NB_diff_count_L_O_5 = Counter(NB_diff_L_O_5_list)

NB_diff_count_M_O_1 = Counter(NB_diff_M_O_1_list)
NB_diff_count_M_O_2 = Counter(NB_diff_M_O_2_list)
NB_diff_count_M_O_3 = Counter(NB_diff_M_O_3_list)
NB_diff_count_M_O_4 = Counter(NB_diff_M_O_4_list)
NB_diff_count_M_O_5 = Counter(NB_diff_M_O_5_list)

NB_diff_count_S_O_1 = Counter(NB_diff_S_O_1_list)
NB_diff_count_S_O_2 = Counter(NB_diff_S_O_2_list)
NB_diff_count_S_O_3 = Counter(NB_diff_S_O_3_list)
NB_diff_count_S_O_4 = Counter(NB_diff_S_O_4_list)
NB_diff_count_S_O_5 = Counter(NB_diff_S_O_5_list)

DT_diff_count_L_O_1 = Counter(DT_diff_L_O_1_list)
DT_diff_count_L_O_2 = Counter(DT_diff_L_O_2_list)
DT_diff_count_L_O_3 = Counter(DT_diff_L_O_3_list)
DT_diff_count_L_O_4 = Counter(DT_diff_L_O_4_list)
DT_diff_count_L_O_5 = Counter(DT_diff_L_O_5_list)

DT_diff_count_M_O_1 = Counter(DT_diff_M_O_1_list)
DT_diff_count_M_O_2 = Counter(DT_diff_M_O_2_list)
DT_diff_count_M_O_3 = Counter(DT_diff_M_O_3_list)
DT_diff_count_M_O_4 = Counter(DT_diff_M_O_4_list)
DT_diff_count_M_O_5 = Counter(DT_diff_M_O_5_list)

DT_diff_count_S_O_1 = Counter(DT_diff_S_O_1_list)
DT_diff_count_S_O_2 = Counter(DT_diff_S_O_2_list)
DT_diff_count_S_O_3 = Counter(DT_diff_S_O_3_list)
DT_diff_count_S_O_4 = Counter(DT_diff_S_O_4_list)
DT_diff_count_S_O_5 = Counter(DT_diff_S_O_5_list)

KNN_diff_count_L_O_1 = Counter(KNN_diff_L_O_1_list)
KNN_diff_count_L_O_2 = Counter(KNN_diff_L_O_2_list)
KNN_diff_count_L_O_3 = Counter(KNN_diff_L_O_3_list)
KNN_diff_count_L_O_4 = Counter(KNN_diff_L_O_4_list)
KNN_diff_count_L_O_5 = Counter(KNN_diff_L_O_5_list)

KNN_diff_count_M_O_1 = Counter(KNN_diff_M_O_1_list)
KNN_diff_count_M_O_2 = Counter(KNN_diff_M_O_2_list)
KNN_diff_count_M_O_3 = Counter(KNN_diff_M_O_3_list)
KNN_diff_count_M_O_4 = Counter(KNN_diff_M_O_4_list)
KNN_diff_count_M_O_5 = Counter(KNN_diff_M_O_5_list)

KNN_diff_count_S_O_1 = Counter(KNN_diff_S_O_1_list)
KNN_diff_count_S_O_2 = Counter(KNN_diff_S_O_2_list)
KNN_diff_count_S_O_3 = Counter(KNN_diff_S_O_3_list)
KNN_diff_count_S_O_4 = Counter(KNN_diff_S_O_4_list)
KNN_diff_count_S_O_5 = Counter(KNN_diff_S_O_5_list)


MLP_diff_count_L_O_1 = Counter(MLP_diff_L_O_1_list)
MLP_diff_count_L_O_2 = Counter(MLP_diff_L_O_2_list)
MLP_diff_count_L_O_3 = Counter(MLP_diff_L_O_3_list)
MLP_diff_count_L_O_4 = Counter(MLP_diff_L_O_4_list)
MLP_diff_count_L_O_5 = Counter(MLP_diff_L_O_5_list)

MLP_diff_count_M_O_1 = Counter(MLP_diff_M_O_1_list)
MLP_diff_count_M_O_2 = Counter(MLP_diff_M_O_2_list)
MLP_diff_count_M_O_3 = Counter(MLP_diff_M_O_3_list)
MLP_diff_count_M_O_4 = Counter(MLP_diff_M_O_4_list)
MLP_diff_count_M_O_5 = Counter(MLP_diff_M_O_5_list)

MLP_diff_count_S_O_1 = Counter(MLP_diff_S_O_1_list)
MLP_diff_count_S_O_2 = Counter(MLP_diff_S_O_2_list)
MLP_diff_count_S_O_3 = Counter(MLP_diff_S_O_3_list)
MLP_diff_count_S_O_4 = Counter(MLP_diff_S_O_4_list)
MLP_diff_count_S_O_5 = Counter(MLP_diff_S_O_5_list)




RF_diff_count_L_O_diff_1_pd = pd.DataFrame(RF_diff_count_L_O_1.items(),columns=['label', 'counts'])
RF_diff_count_L_O_diff_1_pd['probability']=RF_diff_count_L_O_diff_1_pd['counts']/len(RF_diff_L_O_1_list)
RF_diff_count_L_O_diff_2_pd = pd.DataFrame(RF_diff_count_L_O_2.items(),columns=['label', 'counts'])
RF_diff_count_L_O_diff_2_pd['probability']=RF_diff_count_L_O_diff_2_pd['counts']/len(RF_diff_L_O_2_list)
RF_diff_count_L_O_diff_3_pd = pd.DataFrame(RF_diff_count_L_O_3.items(),columns=['label', 'counts'])
RF_diff_count_L_O_diff_3_pd['probability']=RF_diff_count_L_O_diff_3_pd['counts']/len(RF_diff_L_O_3_list)
RF_diff_count_L_O_diff_4_pd = pd.DataFrame(RF_diff_count_L_O_4.items(),columns=['label', 'counts'])
RF_diff_count_L_O_diff_4_pd['probability']=RF_diff_count_L_O_diff_4_pd['counts']/len(RF_diff_L_O_4_list)
RF_diff_count_L_O_diff_5_pd = pd.DataFrame(RF_diff_count_L_O_5.items(),columns=['label', 'counts'])
RF_diff_count_L_O_diff_5_pd['probability']=RF_diff_count_L_O_diff_5_pd['counts']/len(RF_diff_L_O_5_list)

LR_diff_count_L_O_diff_1_pd = pd.DataFrame(LR_diff_count_L_O_1.items(),columns=['label', 'counts'])
LR_diff_count_L_O_diff_1_pd['probability']=LR_diff_count_L_O_diff_1_pd['counts']/len(LR_diff_L_O_1_list)
LR_diff_count_L_O_diff_2_pd = pd.DataFrame(LR_diff_count_L_O_2.items(),columns=['label', 'counts'])
LR_diff_count_L_O_diff_2_pd['probability']=LR_diff_count_L_O_diff_2_pd['counts']/len(LR_diff_L_O_2_list)
LR_diff_count_L_O_diff_3_pd = pd.DataFrame(LR_diff_count_L_O_3.items(),columns=['label', 'counts'])
LR_diff_count_L_O_diff_3_pd['probability']=LR_diff_count_L_O_diff_3_pd['counts']/len(LR_diff_L_O_3_list)
LR_diff_count_L_O_diff_4_pd = pd.DataFrame(LR_diff_count_L_O_4.items(),columns=['label', 'counts'])
LR_diff_count_L_O_diff_4_pd['probability']=LR_diff_count_L_O_diff_4_pd['counts']/len(LR_diff_L_O_4_list)
LR_diff_count_L_O_diff_5_pd = pd.DataFrame(LR_diff_count_L_O_5.items(),columns=['label', 'counts'])
LR_diff_count_L_O_diff_5_pd['probability']=LR_diff_count_L_O_diff_5_pd['counts']/len(LR_diff_L_O_5_list)

NB_diff_count_L_O_diff_1_pd = pd.DataFrame(NB_diff_count_L_O_1.items(),columns=['label', 'counts'])
NB_diff_count_L_O_diff_1_pd['probability']=NB_diff_count_L_O_diff_1_pd['counts']/len(NB_diff_L_O_1_list)
NB_diff_count_L_O_diff_2_pd = pd.DataFrame(NB_diff_count_L_O_2.items(),columns=['label', 'counts'])
NB_diff_count_L_O_diff_2_pd['probability']=NB_diff_count_L_O_diff_2_pd['counts']/len(NB_diff_L_O_2_list)
NB_diff_count_L_O_diff_3_pd = pd.DataFrame(NB_diff_count_L_O_3.items(),columns=['label', 'counts'])
NB_diff_count_L_O_diff_3_pd['probability']=NB_diff_count_L_O_diff_3_pd['counts']/len(NB_diff_L_O_3_list)
NB_diff_count_L_O_diff_4_pd = pd.DataFrame(NB_diff_count_L_O_4.items(),columns=['label', 'counts'])
NB_diff_count_L_O_diff_4_pd['probability']=NB_diff_count_L_O_diff_4_pd['counts']/len(NB_diff_L_O_4_list)
NB_diff_count_L_O_diff_5_pd = pd.DataFrame(NB_diff_count_L_O_5.items(),columns=['label', 'counts'])
NB_diff_count_L_O_diff_5_pd['probability']=NB_diff_count_L_O_diff_5_pd['counts']/len(NB_diff_L_O_5_list)

DT_diff_count_L_O_diff_1_pd = pd.DataFrame(DT_diff_count_L_O_1.items(),columns=['label', 'counts'])
DT_diff_count_L_O_diff_1_pd['probability']=DT_diff_count_L_O_diff_1_pd['counts']/len(DT_diff_L_O_1_list)
DT_diff_count_L_O_diff_2_pd = pd.DataFrame(DT_diff_count_L_O_2.items(),columns=['label', 'counts'])
DT_diff_count_L_O_diff_2_pd['probability']=DT_diff_count_L_O_diff_2_pd['counts']/len(DT_diff_L_O_2_list)
DT_diff_count_L_O_diff_3_pd = pd.DataFrame(DT_diff_count_L_O_3.items(),columns=['label', 'counts'])
DT_diff_count_L_O_diff_3_pd['probability']=DT_diff_count_L_O_diff_3_pd['counts']/len(DT_diff_L_O_3_list)
DT_diff_count_L_O_diff_4_pd = pd.DataFrame(DT_diff_count_L_O_4.items(),columns=['label', 'counts'])
DT_diff_count_L_O_diff_4_pd['probability']=DT_diff_count_L_O_diff_4_pd['counts']/len(DT_diff_L_O_4_list)
DT_diff_count_L_O_diff_5_pd = pd.DataFrame(DT_diff_count_L_O_5.items(),columns=['label', 'counts'])
DT_diff_count_L_O_diff_5_pd['probability']=DT_diff_count_L_O_diff_5_pd['counts']/len(DT_diff_L_O_5_list)

KNN_diff_count_L_O_diff_1_pd = pd.DataFrame(KNN_diff_count_L_O_1.items(),columns=['label', 'counts'])
KNN_diff_count_L_O_diff_1_pd['probability']=KNN_diff_count_L_O_diff_1_pd['counts']/len(KNN_diff_L_O_1_list)
KNN_diff_count_L_O_diff_2_pd = pd.DataFrame(KNN_diff_count_L_O_2.items(),columns=['label', 'counts'])
KNN_diff_count_L_O_diff_2_pd['probability']=KNN_diff_count_L_O_diff_2_pd['counts']/len(KNN_diff_L_O_2_list)
KNN_diff_count_L_O_diff_3_pd = pd.DataFrame(KNN_diff_count_L_O_3.items(),columns=['label', 'counts'])
KNN_diff_count_L_O_diff_3_pd['probability']=KNN_diff_count_L_O_diff_3_pd['counts']/len(KNN_diff_L_O_3_list)
KNN_diff_count_L_O_diff_4_pd = pd.DataFrame(KNN_diff_count_L_O_4.items(),columns=['label', 'counts'])
KNN_diff_count_L_O_diff_4_pd['probability']=KNN_diff_count_L_O_diff_4_pd['counts']/len(KNN_diff_L_O_4_list)
KNN_diff_count_L_O_diff_5_pd = pd.DataFrame(KNN_diff_count_L_O_5.items(),columns=['label', 'counts'])
KNN_diff_count_L_O_diff_5_pd['probability']=KNN_diff_count_L_O_diff_5_pd['counts']/len(KNN_diff_L_O_5_list)

MLP_diff_count_L_O_diff_1_pd = pd.DataFrame(MLP_diff_count_L_O_1.items(),columns=['label', 'counts'])
MLP_diff_count_L_O_diff_1_pd['probability']=MLP_diff_count_L_O_diff_1_pd['counts']/len(MLP_diff_L_O_1_list)
MLP_diff_count_L_O_diff_2_pd = pd.DataFrame(MLP_diff_count_L_O_2.items(),columns=['label', 'counts'])
MLP_diff_count_L_O_diff_2_pd['probability']=MLP_diff_count_L_O_diff_2_pd['counts']/len(MLP_diff_L_O_2_list)
MLP_diff_count_L_O_diff_3_pd = pd.DataFrame(MLP_diff_count_L_O_3.items(),columns=['label', 'counts'])
MLP_diff_count_L_O_diff_3_pd['probability']=MLP_diff_count_L_O_diff_3_pd['counts']/len(MLP_diff_L_O_3_list)
MLP_diff_count_L_O_diff_4_pd = pd.DataFrame(MLP_diff_count_L_O_4.items(),columns=['label', 'counts'])
MLP_diff_count_L_O_diff_4_pd['probability']=MLP_diff_count_L_O_diff_4_pd['counts']/len(MLP_diff_L_O_4_list)
MLP_diff_count_L_O_diff_5_pd = pd.DataFrame(MLP_diff_count_L_O_5.items(),columns=['label', 'counts'])
MLP_diff_count_L_O_diff_5_pd['probability']=MLP_diff_count_L_O_diff_5_pd['counts']/len(MLP_diff_L_O_5_list)

RF_diff_count_M_O_diff_1_pd = pd.DataFrame(RF_diff_count_M_O_1.items(),columns=['label', 'counts'])
RF_diff_count_M_O_diff_1_pd['probability']=RF_diff_count_M_O_diff_1_pd['counts']/len(RF_diff_M_O_1_list)
RF_diff_count_M_O_diff_2_pd = pd.DataFrame(RF_diff_count_M_O_2.items(),columns=['label', 'counts'])
RF_diff_count_M_O_diff_2_pd['probability']=RF_diff_count_M_O_diff_2_pd['counts']/len(RF_diff_M_O_2_list)
RF_diff_count_M_O_diff_3_pd = pd.DataFrame(RF_diff_count_M_O_3.items(),columns=['label', 'counts'])
RF_diff_count_M_O_diff_3_pd['probability']=RF_diff_count_M_O_diff_3_pd['counts']/len(RF_diff_M_O_3_list)
RF_diff_count_M_O_diff_4_pd = pd.DataFrame(RF_diff_count_M_O_4.items(),columns=['label', 'counts'])
RF_diff_count_M_O_diff_4_pd['probability']=RF_diff_count_M_O_diff_4_pd['counts']/len(RF_diff_M_O_4_list)
RF_diff_count_M_O_diff_5_pd = pd.DataFrame(RF_diff_count_M_O_5.items(),columns=['label', 'counts'])
RF_diff_count_M_O_diff_5_pd['probability']=RF_diff_count_M_O_diff_5_pd['counts']/len(RF_diff_M_O_5_list)

LR_diff_count_M_O_diff_1_pd = pd.DataFrame(LR_diff_count_M_O_1.items(),columns=['label', 'counts'])
LR_diff_count_M_O_diff_1_pd['probability']=LR_diff_count_M_O_diff_1_pd['counts']/len(LR_diff_M_O_1_list)
LR_diff_count_M_O_diff_2_pd = pd.DataFrame(LR_diff_count_M_O_2.items(),columns=['label', 'counts'])
LR_diff_count_M_O_diff_2_pd['probability']=LR_diff_count_M_O_diff_2_pd['counts']/len(LR_diff_M_O_2_list)
LR_diff_count_M_O_diff_3_pd = pd.DataFrame(LR_diff_count_M_O_3.items(),columns=['label', 'counts'])
LR_diff_count_M_O_diff_3_pd['probability']=LR_diff_count_M_O_diff_3_pd['counts']/len(LR_diff_M_O_3_list)
LR_diff_count_M_O_diff_4_pd = pd.DataFrame(LR_diff_count_M_O_4.items(),columns=['label', 'counts'])
LR_diff_count_M_O_diff_4_pd['probability']=LR_diff_count_M_O_diff_4_pd['counts']/len(LR_diff_M_O_4_list)
LR_diff_count_M_O_diff_5_pd = pd.DataFrame(LR_diff_count_M_O_5.items(),columns=['label', 'counts'])
LR_diff_count_M_O_diff_5_pd['probability']=LR_diff_count_M_O_diff_5_pd['counts']/len(LR_diff_M_O_5_list)

NB_diff_count_M_O_diff_1_pd = pd.DataFrame(NB_diff_count_M_O_1.items(),columns=['label', 'counts'])
NB_diff_count_M_O_diff_1_pd['probability']=NB_diff_count_M_O_diff_1_pd['counts']/len(NB_diff_M_O_1_list)
NB_diff_count_M_O_diff_2_pd = pd.DataFrame(NB_diff_count_M_O_2.items(),columns=['label', 'counts'])
NB_diff_count_M_O_diff_2_pd['probability']=NB_diff_count_M_O_diff_2_pd['counts']/len(NB_diff_M_O_2_list)
NB_diff_count_M_O_diff_3_pd = pd.DataFrame(NB_diff_count_M_O_3.items(),columns=['label', 'counts'])
NB_diff_count_M_O_diff_3_pd['probability']=NB_diff_count_M_O_diff_3_pd['counts']/len(NB_diff_M_O_3_list)
NB_diff_count_M_O_diff_4_pd = pd.DataFrame(NB_diff_count_M_O_4.items(),columns=['label', 'counts'])
NB_diff_count_M_O_diff_4_pd['probability']=NB_diff_count_M_O_diff_4_pd['counts']/len(NB_diff_M_O_4_list)
NB_diff_count_M_O_diff_5_pd = pd.DataFrame(NB_diff_count_M_O_5.items(),columns=['label', 'counts'])
NB_diff_count_M_O_diff_5_pd['probability']=NB_diff_count_M_O_diff_5_pd['counts']/len(NB_diff_M_O_5_list)

DT_diff_count_M_O_diff_1_pd = pd.DataFrame(DT_diff_count_M_O_1.items(),columns=['label', 'counts'])
DT_diff_count_M_O_diff_1_pd['probability']=DT_diff_count_M_O_diff_1_pd['counts']/len(DT_diff_M_O_1_list)
DT_diff_count_M_O_diff_2_pd = pd.DataFrame(DT_diff_count_M_O_2.items(),columns=['label', 'counts'])
DT_diff_count_M_O_diff_2_pd['probability']=DT_diff_count_M_O_diff_2_pd['counts']/len(DT_diff_M_O_2_list)
DT_diff_count_M_O_diff_3_pd = pd.DataFrame(DT_diff_count_M_O_3.items(),columns=['label', 'counts'])
DT_diff_count_M_O_diff_3_pd['probability']=DT_diff_count_M_O_diff_3_pd['counts']/len(DT_diff_M_O_3_list)
DT_diff_count_M_O_diff_4_pd = pd.DataFrame(DT_diff_count_M_O_4.items(),columns=['label', 'counts'])
DT_diff_count_M_O_diff_4_pd['probability']=DT_diff_count_M_O_diff_4_pd['counts']/len(DT_diff_M_O_4_list)
DT_diff_count_M_O_diff_5_pd = pd.DataFrame(DT_diff_count_M_O_5.items(),columns=['label', 'counts'])
DT_diff_count_M_O_diff_5_pd['probability']=DT_diff_count_M_O_diff_5_pd['counts']/len(DT_diff_M_O_5_list)

KNN_diff_count_M_O_diff_1_pd = pd.DataFrame(KNN_diff_count_M_O_1.items(),columns=['label', 'counts'])
KNN_diff_count_M_O_diff_1_pd['probability']=KNN_diff_count_M_O_diff_1_pd['counts']/len(KNN_diff_M_O_1_list)
KNN_diff_count_M_O_diff_2_pd = pd.DataFrame(KNN_diff_count_M_O_2.items(),columns=['label', 'counts'])
KNN_diff_count_M_O_diff_2_pd['probability']=KNN_diff_count_M_O_diff_2_pd['counts']/len(KNN_diff_M_O_2_list)
KNN_diff_count_M_O_diff_3_pd = pd.DataFrame(KNN_diff_count_M_O_3.items(),columns=['label', 'counts'])
KNN_diff_count_M_O_diff_3_pd['probability']=KNN_diff_count_M_O_diff_3_pd['counts']/len(KNN_diff_M_O_3_list)
KNN_diff_count_M_O_diff_4_pd = pd.DataFrame(KNN_diff_count_M_O_4.items(),columns=['label', 'counts'])
KNN_diff_count_M_O_diff_4_pd['probability']=KNN_diff_count_M_O_diff_4_pd['counts']/len(KNN_diff_M_O_4_list)
KNN_diff_count_M_O_diff_5_pd = pd.DataFrame(KNN_diff_count_M_O_5.items(),columns=['label', 'counts'])
KNN_diff_count_M_O_diff_5_pd['probability']=KNN_diff_count_M_O_diff_5_pd['counts']/len(KNN_diff_M_O_5_list)

MLP_diff_count_M_O_diff_1_pd = pd.DataFrame(MLP_diff_count_M_O_1.items(),columns=['label', 'counts'])
MLP_diff_count_M_O_diff_1_pd['probability']=MLP_diff_count_M_O_diff_1_pd['counts']/len(MLP_diff_M_O_1_list)
MLP_diff_count_M_O_diff_2_pd = pd.DataFrame(MLP_diff_count_M_O_2.items(),columns=['label', 'counts'])
MLP_diff_count_M_O_diff_2_pd['probability']=MLP_diff_count_M_O_diff_2_pd['counts']/len(MLP_diff_M_O_2_list)
MLP_diff_count_M_O_diff_3_pd = pd.DataFrame(MLP_diff_count_M_O_3.items(),columns=['label', 'counts'])
MLP_diff_count_M_O_diff_3_pd['probability']=MLP_diff_count_M_O_diff_3_pd['counts']/len(MLP_diff_M_O_3_list)
MLP_diff_count_M_O_diff_4_pd = pd.DataFrame(MLP_diff_count_M_O_4.items(),columns=['label', 'counts'])
MLP_diff_count_M_O_diff_4_pd['probability']=MLP_diff_count_M_O_diff_4_pd['counts']/len(MLP_diff_M_O_4_list)
MLP_diff_count_M_O_diff_5_pd = pd.DataFrame(MLP_diff_count_M_O_5.items(),columns=['label', 'counts'])
MLP_diff_count_M_O_diff_5_pd['probability']=MLP_diff_count_M_O_diff_5_pd['counts']/len(MLP_diff_M_O_5_list)

RF_diff_count_S_O_diff_1_pd = pd.DataFrame(RF_diff_count_S_O_1.items(),columns=['label', 'counts'])
RF_diff_count_S_O_diff_1_pd['probability']=RF_diff_count_S_O_diff_1_pd['counts']/len(RF_diff_S_O_1_list)
RF_diff_count_S_O_diff_2_pd = pd.DataFrame(RF_diff_count_S_O_2.items(),columns=['label', 'counts'])
RF_diff_count_S_O_diff_2_pd['probability']=RF_diff_count_S_O_diff_2_pd['counts']/len(RF_diff_S_O_2_list)
RF_diff_count_S_O_diff_3_pd = pd.DataFrame(RF_diff_count_S_O_3.items(),columns=['label', 'counts'])
RF_diff_count_S_O_diff_3_pd['probability']=RF_diff_count_S_O_diff_3_pd['counts']/len(RF_diff_S_O_3_list)
RF_diff_count_S_O_diff_4_pd = pd.DataFrame(RF_diff_count_S_O_4.items(),columns=['label', 'counts'])
RF_diff_count_S_O_diff_4_pd['probability']=RF_diff_count_S_O_diff_4_pd['counts']/len(RF_diff_S_O_4_list)
RF_diff_count_S_O_diff_5_pd = pd.DataFrame(RF_diff_count_S_O_5.items(),columns=['label', 'counts'])
RF_diff_count_S_O_diff_5_pd['probability']=RF_diff_count_S_O_diff_5_pd['counts']/len(RF_diff_S_O_5_list)

LR_diff_count_S_O_diff_1_pd = pd.DataFrame(LR_diff_count_S_O_1.items(),columns=['label', 'counts'])
LR_diff_count_S_O_diff_1_pd['probability']=LR_diff_count_S_O_diff_1_pd['counts']/len(LR_diff_S_O_1_list)
LR_diff_count_S_O_diff_2_pd = pd.DataFrame(LR_diff_count_S_O_2.items(),columns=['label', 'counts'])
LR_diff_count_S_O_diff_2_pd['probability']=LR_diff_count_S_O_diff_2_pd['counts']/len(LR_diff_S_O_2_list)
LR_diff_count_S_O_diff_3_pd = pd.DataFrame(LR_diff_count_S_O_3.items(),columns=['label', 'counts'])
LR_diff_count_S_O_diff_3_pd['probability']=LR_diff_count_S_O_diff_3_pd['counts']/len(LR_diff_S_O_3_list)
LR_diff_count_S_O_diff_4_pd = pd.DataFrame(LR_diff_count_S_O_4.items(),columns=['label', 'counts'])
LR_diff_count_S_O_diff_4_pd['probability']=LR_diff_count_S_O_diff_4_pd['counts']/len(LR_diff_S_O_4_list)
LR_diff_count_S_O_diff_5_pd = pd.DataFrame(LR_diff_count_S_O_5.items(),columns=['label', 'counts'])
LR_diff_count_S_O_diff_5_pd['probability']=LR_diff_count_S_O_diff_5_pd['counts']/len(LR_diff_S_O_5_list)

NB_diff_count_S_O_diff_1_pd = pd.DataFrame(NB_diff_count_S_O_1.items(),columns=['label', 'counts'])
NB_diff_count_S_O_diff_1_pd['probability']=NB_diff_count_S_O_diff_1_pd['counts']/len(NB_diff_S_O_1_list)
NB_diff_count_S_O_diff_2_pd = pd.DataFrame(NB_diff_count_S_O_2.items(),columns=['label', 'counts'])
NB_diff_count_S_O_diff_2_pd['probability']=NB_diff_count_S_O_diff_2_pd['counts']/len(NB_diff_S_O_2_list)
NB_diff_count_S_O_diff_3_pd = pd.DataFrame(NB_diff_count_S_O_3.items(),columns=['label', 'counts'])
NB_diff_count_S_O_diff_3_pd['probability']=NB_diff_count_S_O_diff_3_pd['counts']/len(NB_diff_S_O_3_list)
NB_diff_count_S_O_diff_4_pd = pd.DataFrame(NB_diff_count_S_O_4.items(),columns=['label', 'counts'])
NB_diff_count_S_O_diff_4_pd['probability']=NB_diff_count_S_O_diff_4_pd['counts']/len(NB_diff_S_O_4_list)
NB_diff_count_S_O_diff_5_pd = pd.DataFrame(NB_diff_count_S_O_5.items(),columns=['label', 'counts'])
NB_diff_count_S_O_diff_5_pd['probability']=NB_diff_count_S_O_diff_5_pd['counts']/len(NB_diff_S_O_5_list)

DT_diff_count_S_O_diff_1_pd = pd.DataFrame(DT_diff_count_S_O_1.items(),columns=['label', 'counts'])
DT_diff_count_S_O_diff_1_pd['probability']=DT_diff_count_S_O_diff_1_pd['counts']/len(DT_diff_S_O_1_list)
DT_diff_count_S_O_diff_2_pd = pd.DataFrame(DT_diff_count_S_O_2.items(),columns=['label', 'counts'])
DT_diff_count_S_O_diff_2_pd['probability']=DT_diff_count_S_O_diff_2_pd['counts']/len(DT_diff_S_O_2_list)
DT_diff_count_S_O_diff_3_pd = pd.DataFrame(DT_diff_count_S_O_3.items(),columns=['label', 'counts'])
DT_diff_count_S_O_diff_3_pd['probability']=DT_diff_count_S_O_diff_3_pd['counts']/len(DT_diff_S_O_3_list)
DT_diff_count_S_O_diff_4_pd = pd.DataFrame(DT_diff_count_S_O_4.items(),columns=['label', 'counts'])
DT_diff_count_S_O_diff_4_pd['probability']=DT_diff_count_S_O_diff_4_pd['counts']/len(DT_diff_S_O_4_list)
DT_diff_count_S_O_diff_5_pd = pd.DataFrame(DT_diff_count_S_O_5.items(),columns=['label', 'counts'])
DT_diff_count_S_O_diff_5_pd['probability']=DT_diff_count_S_O_diff_5_pd['counts']/len(DT_diff_S_O_5_list)

KNN_diff_count_S_O_diff_1_pd = pd.DataFrame(KNN_diff_count_S_O_1.items(),columns=['label', 'counts'])
KNN_diff_count_S_O_diff_1_pd['probability']=KNN_diff_count_S_O_diff_1_pd['counts']/len(KNN_diff_S_O_1_list)
KNN_diff_count_S_O_diff_2_pd = pd.DataFrame(KNN_diff_count_S_O_2.items(),columns=['label', 'counts'])
KNN_diff_count_S_O_diff_2_pd['probability']=KNN_diff_count_S_O_diff_2_pd['counts']/len(KNN_diff_S_O_2_list)
KNN_diff_count_S_O_diff_3_pd = pd.DataFrame(KNN_diff_count_S_O_3.items(),columns=['label', 'counts'])
KNN_diff_count_S_O_diff_3_pd['probability']=KNN_diff_count_S_O_diff_3_pd['counts']/len(KNN_diff_S_O_3_list)
KNN_diff_count_S_O_diff_4_pd = pd.DataFrame(KNN_diff_count_S_O_4.items(),columns=['label', 'counts'])
KNN_diff_count_S_O_diff_4_pd['probability']=KNN_diff_count_S_O_diff_4_pd['counts']/len(KNN_diff_S_O_4_list)
KNN_diff_count_S_O_diff_5_pd = pd.DataFrame(KNN_diff_count_S_O_5.items(),columns=['label', 'counts'])
KNN_diff_count_S_O_diff_5_pd['probability']=KNN_diff_count_S_O_diff_5_pd['counts']/len(KNN_diff_S_O_5_list)

MLP_diff_count_S_O_diff_1_pd = pd.DataFrame(MLP_diff_count_S_O_1.items(),columns=['label', 'counts'])
MLP_diff_count_S_O_diff_1_pd['probability']=MLP_diff_count_S_O_diff_1_pd['counts']/len(MLP_diff_S_O_1_list)
MLP_diff_count_S_O_diff_2_pd = pd.DataFrame(MLP_diff_count_S_O_2.items(),columns=['label', 'counts'])
MLP_diff_count_S_O_diff_2_pd['probability']=MLP_diff_count_S_O_diff_2_pd['counts']/len(MLP_diff_S_O_2_list)
MLP_diff_count_S_O_diff_3_pd = pd.DataFrame(MLP_diff_count_S_O_3.items(),columns=['label', 'counts'])
MLP_diff_count_S_O_diff_3_pd['probability']=MLP_diff_count_S_O_diff_3_pd['counts']/len(MLP_diff_S_O_3_list)
MLP_diff_count_S_O_diff_4_pd = pd.DataFrame(MLP_diff_count_S_O_4.items(),columns=['label', 'counts'])
MLP_diff_count_S_O_diff_4_pd['probability']=MLP_diff_count_S_O_diff_4_pd['counts']/len(MLP_diff_S_O_4_list)
MLP_diff_count_S_O_diff_5_pd = pd.DataFrame(MLP_diff_count_S_O_5.items(),columns=['label', 'counts'])
MLP_diff_count_S_O_diff_5_pd['probability']=MLP_diff_count_S_O_diff_5_pd['counts']/len(MLP_diff_S_O_5_list)

print("RF_diff_count_L_O_diff_1_pd ---------------------")
print(RF_diff_count_L_O_diff_1_pd)

# 重新设置表格


def newdatatable(pd_old,classname):
  prob_0 = float(pd_old['probability'].loc[pd_old["label"]==0.0])
  prob_1 = float(pd_old['probability'].loc[pd_old["label"]==1.0])
  prob_2 = float(pd_old['probability'].loc[pd_old["label"]==2.0])
  prob_other = 1 - prob_0 - prob_1 - prob_2
  pd_new = pd.DataFrame([['0',prob_0,classname],['1',prob_1,classname],['2',prob_2,classname],['other',prob_other,classname]],columns=['label','probability','class'])
  return pd_new


RF_diff_count_L_O_diff_1_pd_new = newdatatable(RF_diff_count_L_O_diff_1_pd,'Log')
RF_diff_count_L_O_diff_2_pd_new = newdatatable(RF_diff_count_L_O_diff_2_pd,'Log')
RF_diff_count_L_O_diff_3_pd_new = newdatatable(RF_diff_count_L_O_diff_3_pd,'Log')
RF_diff_count_L_O_diff_4_pd_new = newdatatable(RF_diff_count_L_O_diff_4_pd,'Log')
RF_diff_count_L_O_diff_5_pd_new = newdatatable(RF_diff_count_L_O_diff_5_pd,'Log')

LR_diff_count_L_O_diff_1_pd_new = newdatatable(LR_diff_count_L_O_diff_1_pd,'Log')
LR_diff_count_L_O_diff_2_pd_new = newdatatable(LR_diff_count_L_O_diff_2_pd,'Log')
LR_diff_count_L_O_diff_3_pd_new = newdatatable(LR_diff_count_L_O_diff_3_pd,'Log')
LR_diff_count_L_O_diff_4_pd_new = newdatatable(LR_diff_count_L_O_diff_4_pd,'Log')
LR_diff_count_L_O_diff_5_pd_new = newdatatable(LR_diff_count_L_O_diff_5_pd,'Log')

NB_diff_count_L_O_diff_1_pd_new = newdatatable(NB_diff_count_L_O_diff_1_pd,'Log')
NB_diff_count_L_O_diff_2_pd_new = newdatatable(NB_diff_count_L_O_diff_2_pd,'Log')
NB_diff_count_L_O_diff_3_pd_new = newdatatable(NB_diff_count_L_O_diff_3_pd,'Log')
NB_diff_count_L_O_diff_4_pd_new = newdatatable(NB_diff_count_L_O_diff_4_pd,'Log')
NB_diff_count_L_O_diff_5_pd_new = newdatatable(NB_diff_count_L_O_diff_5_pd,'Log')

DT_diff_count_L_O_diff_1_pd_new = newdatatable(DT_diff_count_L_O_diff_1_pd,'Log')
DT_diff_count_L_O_diff_2_pd_new = newdatatable(DT_diff_count_L_O_diff_2_pd,'Log')
DT_diff_count_L_O_diff_3_pd_new = newdatatable(DT_diff_count_L_O_diff_3_pd,'Log')
DT_diff_count_L_O_diff_4_pd_new = newdatatable(DT_diff_count_L_O_diff_4_pd,'Log')
DT_diff_count_L_O_diff_5_pd_new = newdatatable(DT_diff_count_L_O_diff_5_pd,'Log')

KNN_diff_count_L_O_diff_1_pd_new = newdatatable(KNN_diff_count_L_O_diff_1_pd,'Log')
KNN_diff_count_L_O_diff_2_pd_new = newdatatable(KNN_diff_count_L_O_diff_2_pd,'Log')
KNN_diff_count_L_O_diff_3_pd_new = newdatatable(KNN_diff_count_L_O_diff_3_pd,'Log')
KNN_diff_count_L_O_diff_4_pd_new = newdatatable(KNN_diff_count_L_O_diff_4_pd,'Log')
KNN_diff_count_L_O_diff_5_pd_new = newdatatable(KNN_diff_count_L_O_diff_5_pd,'Log')

MLP_diff_count_L_O_diff_1_pd_new = newdatatable(MLP_diff_count_L_O_diff_1_pd,'Log')
MLP_diff_count_L_O_diff_2_pd_new = newdatatable(MLP_diff_count_L_O_diff_2_pd,'Log')
MLP_diff_count_L_O_diff_3_pd_new = newdatatable(MLP_diff_count_L_O_diff_3_pd,'Log')
MLP_diff_count_L_O_diff_4_pd_new = newdatatable(MLP_diff_count_L_O_diff_4_pd,'Log')
MLP_diff_count_L_O_diff_5_pd_new = newdatatable(MLP_diff_count_L_O_diff_5_pd,'Log')

RF_diff_count_M_O_diff_1_pd_new = newdatatable(RF_diff_count_M_O_diff_1_pd,'Minmax')
RF_diff_count_M_O_diff_2_pd_new = newdatatable(RF_diff_count_M_O_diff_2_pd,'Minmax')
RF_diff_count_M_O_diff_3_pd_new = newdatatable(RF_diff_count_M_O_diff_3_pd,'Minmax')
RF_diff_count_M_O_diff_4_pd_new = newdatatable(RF_diff_count_M_O_diff_4_pd,'Minmax')
RF_diff_count_M_O_diff_5_pd_new = newdatatable(RF_diff_count_M_O_diff_5_pd,'Minmax')

LR_diff_count_M_O_diff_1_pd_new = newdatatable(LR_diff_count_M_O_diff_1_pd,'Minmax')
LR_diff_count_M_O_diff_2_pd_new = newdatatable(LR_diff_count_M_O_diff_2_pd,'Minmax')
LR_diff_count_M_O_diff_3_pd_new = newdatatable(LR_diff_count_M_O_diff_3_pd,'Minmax')
LR_diff_count_M_O_diff_4_pd_new = newdatatable(LR_diff_count_M_O_diff_4_pd,'Minmax')
LR_diff_count_M_O_diff_5_pd_new = newdatatable(LR_diff_count_M_O_diff_5_pd,'Minmax')

NB_diff_count_M_O_diff_1_pd_new = newdatatable(NB_diff_count_M_O_diff_1_pd,'Minmax')
NB_diff_count_M_O_diff_2_pd_new = newdatatable(NB_diff_count_M_O_diff_2_pd,'Minmax')
NB_diff_count_M_O_diff_3_pd_new = newdatatable(NB_diff_count_M_O_diff_3_pd,'Minmax')
NB_diff_count_M_O_diff_4_pd_new = newdatatable(NB_diff_count_M_O_diff_4_pd,'Minmax')
NB_diff_count_M_O_diff_5_pd_new = newdatatable(NB_diff_count_M_O_diff_5_pd,'Minmax')

DT_diff_count_M_O_diff_1_pd_new = newdatatable(DT_diff_count_M_O_diff_1_pd,'Minmax')
DT_diff_count_M_O_diff_2_pd_new = newdatatable(DT_diff_count_M_O_diff_2_pd,'Minmax')
DT_diff_count_M_O_diff_3_pd_new = newdatatable(DT_diff_count_M_O_diff_3_pd,'Minmax')
DT_diff_count_M_O_diff_4_pd_new = newdatatable(DT_diff_count_M_O_diff_4_pd,'Minmax')
DT_diff_count_M_O_diff_5_pd_new = newdatatable(DT_diff_count_M_O_diff_5_pd,'Minmax')

KNN_diff_count_M_O_diff_1_pd_new = newdatatable(KNN_diff_count_M_O_diff_1_pd,'Minmax')
KNN_diff_count_M_O_diff_2_pd_new = newdatatable(KNN_diff_count_M_O_diff_2_pd,'Minmax')
KNN_diff_count_M_O_diff_3_pd_new = newdatatable(KNN_diff_count_M_O_diff_3_pd,'Minmax')
KNN_diff_count_M_O_diff_4_pd_new = newdatatable(KNN_diff_count_M_O_diff_4_pd,'Minmax')
KNN_diff_count_M_O_diff_5_pd_new = newdatatable(KNN_diff_count_M_O_diff_5_pd,'Minmax')

MLP_diff_count_M_O_diff_1_pd_new = newdatatable(MLP_diff_count_M_O_diff_1_pd,'Minmax')
MLP_diff_count_M_O_diff_2_pd_new = newdatatable(MLP_diff_count_M_O_diff_2_pd,'Minmax')
MLP_diff_count_M_O_diff_3_pd_new = newdatatable(MLP_diff_count_M_O_diff_3_pd,'Minmax')
MLP_diff_count_M_O_diff_4_pd_new = newdatatable(MLP_diff_count_M_O_diff_4_pd,'Minmax')
MLP_diff_count_M_O_diff_5_pd_new = newdatatable(MLP_diff_count_M_O_diff_5_pd,'Minmax')

RF_diff_count_S_O_diff_1_pd_new = newdatatable(RF_diff_count_S_O_diff_1_pd,'Sta')
RF_diff_count_S_O_diff_2_pd_new = newdatatable(RF_diff_count_S_O_diff_2_pd,'Sta')
RF_diff_count_S_O_diff_3_pd_new = newdatatable(RF_diff_count_S_O_diff_3_pd,'Sta')
RF_diff_count_S_O_diff_4_pd_new = newdatatable(RF_diff_count_S_O_diff_4_pd,'Sta')
RF_diff_count_S_O_diff_5_pd_new = newdatatable(RF_diff_count_S_O_diff_5_pd,'Sta')

LR_diff_count_S_O_diff_1_pd_new = newdatatable(LR_diff_count_S_O_diff_1_pd,'Sta')
LR_diff_count_S_O_diff_2_pd_new = newdatatable(LR_diff_count_S_O_diff_2_pd,'Sta')
LR_diff_count_S_O_diff_3_pd_new = newdatatable(LR_diff_count_S_O_diff_3_pd,'Sta')
LR_diff_count_S_O_diff_4_pd_new = newdatatable(LR_diff_count_S_O_diff_4_pd,'Sta')
LR_diff_count_S_O_diff_5_pd_new = newdatatable(LR_diff_count_S_O_diff_5_pd,'Sta')

NB_diff_count_S_O_diff_1_pd_new = newdatatable(NB_diff_count_S_O_diff_1_pd,'Sta')
NB_diff_count_S_O_diff_2_pd_new = newdatatable(NB_diff_count_S_O_diff_2_pd,'Sta')
NB_diff_count_S_O_diff_3_pd_new = newdatatable(NB_diff_count_S_O_diff_3_pd,'Sta')
NB_diff_count_S_O_diff_4_pd_new = newdatatable(NB_diff_count_S_O_diff_4_pd,'Sta')
NB_diff_count_S_O_diff_5_pd_new = newdatatable(NB_diff_count_S_O_diff_5_pd,'Sta')

DT_diff_count_S_O_diff_1_pd_new = newdatatable(DT_diff_count_S_O_diff_1_pd,'Sta')
DT_diff_count_S_O_diff_2_pd_new = newdatatable(DT_diff_count_S_O_diff_2_pd,'Sta')
DT_diff_count_S_O_diff_3_pd_new = newdatatable(DT_diff_count_S_O_diff_3_pd,'Sta')
DT_diff_count_S_O_diff_4_pd_new = newdatatable(DT_diff_count_S_O_diff_4_pd,'Sta')
DT_diff_count_S_O_diff_5_pd_new = newdatatable(DT_diff_count_S_O_diff_5_pd,'Sta')

KNN_diff_count_S_O_diff_1_pd_new = newdatatable(KNN_diff_count_S_O_diff_1_pd,'Sta')
KNN_diff_count_S_O_diff_2_pd_new = newdatatable(KNN_diff_count_S_O_diff_2_pd,'Sta')
KNN_diff_count_S_O_diff_3_pd_new = newdatatable(KNN_diff_count_S_O_diff_3_pd,'Sta')
KNN_diff_count_S_O_diff_4_pd_new = newdatatable(KNN_diff_count_S_O_diff_4_pd,'Sta')
KNN_diff_count_S_O_diff_5_pd_new = newdatatable(KNN_diff_count_S_O_diff_5_pd,'Sta')

MLP_diff_count_S_O_diff_1_pd_new = newdatatable(MLP_diff_count_S_O_diff_1_pd,'Sta')
MLP_diff_count_S_O_diff_2_pd_new = newdatatable(MLP_diff_count_S_O_diff_2_pd,'Sta')
MLP_diff_count_S_O_diff_3_pd_new = newdatatable(MLP_diff_count_S_O_diff_3_pd,'Sta')
MLP_diff_count_S_O_diff_4_pd_new = newdatatable(MLP_diff_count_S_O_diff_4_pd,'Sta')
MLP_diff_count_S_O_diff_5_pd_new = newdatatable(MLP_diff_count_S_O_diff_5_pd,'Sta')


print("重新设置表格数据的概率 增加other列表明差异超过2的概率 MLP_diff_count_S_O_diff_5_pd_new---------")
print(MLP_diff_count_S_O_diff_5_pd_new)


# 按 Log Min Sta 合并
RF_pd_1_new = pd.concat([RF_diff_count_L_O_diff_1_pd_new,RF_diff_count_M_O_diff_1_pd_new,RF_diff_count_S_O_diff_1_pd_new],axis=0)  # 纵向合并
RF_pd_2_new = pd.concat([RF_diff_count_L_O_diff_2_pd_new,RF_diff_count_M_O_diff_2_pd_new,RF_diff_count_S_O_diff_2_pd_new],axis=0)  # 纵向合并
RF_pd_3_new = pd.concat([RF_diff_count_L_O_diff_3_pd_new,RF_diff_count_M_O_diff_3_pd_new,RF_diff_count_S_O_diff_3_pd_new],axis=0)  # 纵向合并
RF_pd_4_new = pd.concat([RF_diff_count_L_O_diff_4_pd_new,RF_diff_count_M_O_diff_4_pd_new,RF_diff_count_S_O_diff_4_pd_new],axis=0)  # 纵向合并
RF_pd_5_new = pd.concat([RF_diff_count_L_O_diff_5_pd_new,RF_diff_count_M_O_diff_5_pd_new,RF_diff_count_S_O_diff_5_pd_new],axis=0)  # 纵向合并

LR_pd_1_new = pd.concat([LR_diff_count_L_O_diff_1_pd_new,LR_diff_count_M_O_diff_1_pd_new,LR_diff_count_S_O_diff_1_pd_new],axis=0)  # 纵向合并
LR_pd_2_new = pd.concat([LR_diff_count_L_O_diff_2_pd_new,LR_diff_count_M_O_diff_2_pd_new,LR_diff_count_S_O_diff_2_pd_new],axis=0)  # 纵向合并
LR_pd_3_new = pd.concat([LR_diff_count_L_O_diff_3_pd_new,LR_diff_count_M_O_diff_3_pd_new,LR_diff_count_S_O_diff_3_pd_new],axis=0)  # 纵向合并
LR_pd_4_new = pd.concat([LR_diff_count_L_O_diff_4_pd_new,LR_diff_count_M_O_diff_4_pd_new,LR_diff_count_S_O_diff_4_pd_new],axis=0)  # 纵向合并
LR_pd_5_new = pd.concat([LR_diff_count_L_O_diff_5_pd_new,LR_diff_count_M_O_diff_5_pd_new,LR_diff_count_S_O_diff_5_pd_new],axis=0)  # 纵向合并

NB_pd_1_new = pd.concat([NB_diff_count_L_O_diff_1_pd_new,NB_diff_count_M_O_diff_1_pd_new,NB_diff_count_S_O_diff_1_pd_new],axis=0)  # 纵向合并
NB_pd_2_new = pd.concat([NB_diff_count_L_O_diff_2_pd_new,NB_diff_count_M_O_diff_2_pd_new,NB_diff_count_S_O_diff_2_pd_new],axis=0)  # 纵向合并
NB_pd_3_new = pd.concat([NB_diff_count_L_O_diff_3_pd_new,NB_diff_count_M_O_diff_3_pd_new,NB_diff_count_S_O_diff_3_pd_new],axis=0)  # 纵向合并
NB_pd_4_new = pd.concat([NB_diff_count_L_O_diff_4_pd_new,NB_diff_count_M_O_diff_4_pd_new,NB_diff_count_S_O_diff_4_pd_new],axis=0)  # 纵向合并
NB_pd_5_new = pd.concat([NB_diff_count_L_O_diff_5_pd_new,NB_diff_count_M_O_diff_5_pd_new,NB_diff_count_S_O_diff_5_pd_new],axis=0)  # 纵向合并

DT_pd_1_new = pd.concat([DT_diff_count_L_O_diff_1_pd_new,DT_diff_count_M_O_diff_1_pd_new,DT_diff_count_S_O_diff_1_pd_new],axis=0)  # 纵向合并
DT_pd_2_new = pd.concat([DT_diff_count_L_O_diff_2_pd_new,DT_diff_count_M_O_diff_2_pd_new,DT_diff_count_S_O_diff_2_pd_new],axis=0)  # 纵向合并
DT_pd_3_new = pd.concat([DT_diff_count_L_O_diff_3_pd_new,DT_diff_count_M_O_diff_3_pd_new,DT_diff_count_S_O_diff_3_pd_new],axis=0)  # 纵向合并
DT_pd_4_new = pd.concat([DT_diff_count_L_O_diff_4_pd_new,DT_diff_count_M_O_diff_4_pd_new,DT_diff_count_S_O_diff_4_pd_new],axis=0)  # 纵向合并
DT_pd_5_new = pd.concat([DT_diff_count_L_O_diff_5_pd_new,DT_diff_count_M_O_diff_5_pd_new,DT_diff_count_S_O_diff_5_pd_new],axis=0)  # 纵向合并

KNN_pd_1_new = pd.concat([KNN_diff_count_L_O_diff_1_pd_new,KNN_diff_count_M_O_diff_1_pd_new,KNN_diff_count_S_O_diff_1_pd_new],axis=0)  # 纵向合并
KNN_pd_2_new = pd.concat([KNN_diff_count_L_O_diff_2_pd_new,KNN_diff_count_M_O_diff_2_pd_new,KNN_diff_count_S_O_diff_2_pd_new],axis=0)  # 纵向合并
KNN_pd_3_new = pd.concat([KNN_diff_count_L_O_diff_3_pd_new,KNN_diff_count_M_O_diff_3_pd_new,KNN_diff_count_S_O_diff_3_pd_new],axis=0)  # 纵向合并
KNN_pd_4_new = pd.concat([KNN_diff_count_L_O_diff_4_pd_new,KNN_diff_count_M_O_diff_4_pd_new,KNN_diff_count_S_O_diff_4_pd_new],axis=0)  # 纵向合并
KNN_pd_5_new = pd.concat([KNN_diff_count_L_O_diff_5_pd_new,KNN_diff_count_M_O_diff_5_pd_new,KNN_diff_count_S_O_diff_5_pd_new],axis=0)  # 纵向合并

MLP_pd_1_new = pd.concat([MLP_diff_count_L_O_diff_1_pd_new,MLP_diff_count_M_O_diff_1_pd_new,MLP_diff_count_S_O_diff_1_pd_new],axis=0)  # 纵向合并
MLP_pd_2_new = pd.concat([MLP_diff_count_L_O_diff_2_pd_new,MLP_diff_count_M_O_diff_2_pd_new,MLP_diff_count_S_O_diff_2_pd_new],axis=0)  # 纵向合并
MLP_pd_3_new = pd.concat([MLP_diff_count_L_O_diff_3_pd_new,MLP_diff_count_M_O_diff_3_pd_new,MLP_diff_count_S_O_diff_3_pd_new],axis=0)  # 纵向合并
MLP_pd_4_new = pd.concat([MLP_diff_count_L_O_diff_4_pd_new,MLP_diff_count_M_O_diff_4_pd_new,MLP_diff_count_S_O_diff_4_pd_new],axis=0)  # 纵向合并
MLP_pd_5_new = pd.concat([MLP_diff_count_L_O_diff_5_pd_new,MLP_diff_count_M_O_diff_5_pd_new,MLP_diff_count_S_O_diff_5_pd_new],axis=0)  # 纵向合并






print("合并后分类显示 MLP_pd_5_new rank -------------")
print(MLP_pd_5_new)

"""**作图**"""

#作图统计 用的是这个！！！！！！！！！！！！！！！！！！ 分类器作图

import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt

with sns.axes_style('darkgrid'):
  fig, axes = plt.subplots(6, 5, figsize=(20, 12), sharex=True, sharey=True, dpi=350) # sharey=True ,sharex=True, dpi=350
  fig.subplots_adjust(wspace=0.010,hspace=0.050)

  axes[0][0].set_title( "1st Rank Difference",loc='center'  )
  axes[0][1].set_title( "2nd Rank Difference",loc='center'  )
  axes[0][2].set_title( "3rd Rank Difference",loc='center'  )
  axes[0][3].set_title( "4th Rank Difference",loc='center'  )
  axes[0][4].set_title( "5th Rank Difference",loc='center'  )

  # color='darkblue' color='darkorange' color='darkgreen'


  p1 = sns.barplot(x='label',y='probability', hue='class', data=RF_pd_1_new, palette=['darkblue','darkorange','darkgreen'], saturation=2, ax=axes[0][0])
  p1.legend_.remove()
  p1.set_ylabel("RF-Ratio")
  #p1.set(xlabel='common xlabel', ylabel='common ylabel')
  #axes[0][0].set_ylabel("RF-Ratio")
  axes[0][0].set_xlabel("")

  axes[0][0].set_yticks([0.0,0.2,0.4,0.6,0.8,1.0])

  sns.barplot(x='label',y='probability', hue='class', data=RF_pd_2_new, palette=['darkblue','darkorange','darkgreen'], saturation=2, ax=axes[0][1]).legend_.remove()
  axes[0][1].set_xlabel("")
  axes[0][1].set_ylabel("")
  sns.barplot(x='label',y='probability', hue='class', data=RF_pd_3_new, palette=['darkblue','darkorange','darkgreen'], saturation=2, ax=axes[0][2]).legend_.remove()
  axes[0][2].set_xlabel("")
  axes[0][2].set_ylabel("")
  sns.barplot(x='label',y='probability', hue='class', data=RF_pd_4_new, palette=['darkblue','darkorange','darkgreen'], saturation=2, ax=axes[0][3]).legend_.remove()
  axes[0][3].set_xlabel("")
  axes[0][3].set_ylabel("")
  sns.barplot(x='label',y='probability', hue='class', data=RF_pd_5_new, palette=['darkblue','darkorange','darkgreen'], saturation=2, ax=axes[0][4]).legend_.remove()
  axes[0][4].set_xlabel("")
  axes[0][4].set_ylabel("")


  p2=sns.barplot(x='label',y='probability', hue='class', data=LR_pd_1_new, palette=['darkblue','darkorange','darkgreen'], saturation=2, ax=axes[1][0])
  p2.legend_.remove()
  p2.set_ylabel("LR-Ratio")
  axes[1][0].set_xlabel("")

  sns.barplot(x='label',y='probability', hue='class', data=LR_pd_2_new, palette=['darkblue','darkorange','darkgreen'], saturation=2, ax=axes[1][1]).legend_.remove()
  axes[1][1].set_xlabel("")
  axes[1][1].set_ylabel("")
  sns.barplot(x='label',y='probability', hue='class', data=LR_pd_3_new, palette=['darkblue','darkorange','darkgreen'], saturation=2, ax=axes[1][2]).legend_.remove()
  axes[1][2].set_xlabel("")
  axes[1][2].set_ylabel("")
  sns.barplot(x='label',y='probability', hue='class', data=LR_pd_4_new, palette=['darkblue','darkorange','darkgreen'], saturation=2, ax=axes[1][3]).legend_.remove()
  axes[1][3].set_xlabel("")
  axes[1][3].set_ylabel("")
  sns.barplot(x='label',y='probability', hue='class', data=LR_pd_5_new, palette=['darkblue','darkorange','darkgreen'], saturation=2, ax=axes[1][4]).legend_.remove()
  axes[1][4].set_xlabel("")
  axes[1][4].set_ylabel("")


  p3=sns.barplot(x='label',y='probability', hue='class', data=NB_pd_1_new, palette=['darkblue','darkorange','darkgreen'], saturation=2, ax=axes[2][0])
  p3.legend_.remove()
  p3.set_ylabel("NB-Ratio")
  axes[2][0].set_xlabel("")

  sns.barplot(x='label',y='probability', hue='class', data=NB_pd_2_new, palette=['darkblue','darkorange','darkgreen'], saturation=2, ax=axes[2][1]).legend_.remove()
  axes[2][1].set_xlabel("")
  axes[2][1].set_ylabel("")
  sns.barplot(x='label',y='probability', hue='class', data=NB_pd_3_new, palette=['darkblue','darkorange','darkgreen'], saturation=2, ax=axes[2][2]).legend_.remove()
  axes[2][2].set_xlabel("")
  axes[2][2].set_ylabel("")
  sns.barplot(x='label',y='probability', hue='class', data=NB_pd_4_new, palette=['darkblue','darkorange','darkgreen'], saturation=2, ax=axes[2][3]).legend_.remove()
  axes[2][3].set_xlabel("")
  axes[2][3].set_ylabel("")
  sns.barplot(x='label',y='probability', hue='class', data=NB_pd_5_new, palette=['darkblue','darkorange','darkgreen'], saturation=2, ax=axes[2][4]).legend_.remove()
  axes[2][4].set_xlabel("")
  axes[2][4].set_ylabel("")


  p4=sns.barplot(x='label',y='probability', hue='class', data=DT_pd_1_new, palette=['darkblue','darkorange','darkgreen'], saturation=2, ax=axes[3][0])
  p4.legend_.remove()
  p4.set_ylabel("DT-Ratio")
  axes[3][0].set_xlabel("")

  sns.barplot(x='label',y='probability', hue='class', data=DT_pd_2_new, palette=['darkblue','darkorange','darkgreen'], saturation=2, ax=axes[3][1]).legend_.remove()
  axes[3][1].set_xlabel("")
  axes[3][1].set_ylabel("")
  sns.barplot(x='label',y='probability', hue='class', data=DT_pd_3_new, palette=['darkblue','darkorange','darkgreen'], saturation=2, ax=axes[3][2]).legend_.remove()
  axes[3][2].set_xlabel("")
  axes[3][2].set_ylabel("")
  sns.barplot(x='label',y='probability', hue='class', data=DT_pd_4_new, palette=['darkblue','darkorange','darkgreen'], saturation=2, ax=axes[3][3]).legend_.remove()
  axes[3][3].set_xlabel("")
  axes[3][3].set_ylabel("")
  sns.barplot(x='label',y='probability', hue='class', data=DT_pd_5_new, palette=['darkblue','darkorange','darkgreen'], saturation=2, ax=axes[3][4]).legend_.remove()
  axes[3][4].set_xlabel("")
  axes[3][4].set_ylabel("")


  p5=sns.barplot(x='label',y='probability', hue='class', data=KNN_pd_1_new, palette=['darkblue','darkorange','darkgreen'], saturation=2, ax=axes[4][0])
  p5.legend_.remove()
  p5.set_ylabel("KNN-Ratio")
  axes[4][0].set_xlabel("")

  sns.barplot(x='label',y='probability', hue='class', data=KNN_pd_2_new, palette=['darkblue','darkorange','darkgreen'], saturation=2, ax=axes[4][1]).legend_.remove()
  axes[4][1].set_xlabel("")
  axes[4][1].set_ylabel("")
  sns.barplot(x='label',y='probability', hue='class', data=KNN_pd_3_new, palette=['darkblue','darkorange','darkgreen'], saturation=2, ax=axes[4][2]).legend_.remove()
  axes[4][2].set_xlabel("")
  axes[4][2].set_ylabel("")
  sns.barplot(x='label',y='probability', hue='class', data=KNN_pd_4_new, palette=['darkblue','darkorange','darkgreen'], saturation=2, ax=axes[4][3]).legend_.remove()
  axes[4][3].set_xlabel("")
  axes[4][3].set_ylabel("")
  sns.barplot(x='label',y='probability', hue='class', data=KNN_pd_5_new, palette=['darkblue','darkorange','darkgreen'], saturation=2, ax=axes[4][4]).legend_.remove()
  axes[4][4].set_xlabel("")
  axes[4][4].set_ylabel("")


  p6=sns.barplot(x='label',y='probability', hue='class', data=MLP_pd_1_new, palette=['darkblue','darkorange','darkgreen'], saturation=2, ax=axes[5][0])
  p6.legend_.remove()
  p6.set_ylabel("MLP-Ratio")
  axes[5][0].set_xlabel("")

  sns.barplot(x='label',y='probability', hue='class', data=MLP_pd_2_new, palette=['darkblue','darkorange','darkgreen'], saturation=2, ax=axes[5][1]).legend_.remove()
  axes[5][1].set_xlabel("")
  axes[5][1].set_ylabel("")
  sns.barplot(x='label',y='probability', hue='class', data=MLP_pd_3_new, palette=['darkblue','darkorange','darkgreen'], saturation=2, ax=axes[5][2]).legend_.remove()
  axes[5][2].set_xlabel("")
  axes[5][2].set_ylabel("")
  sns.barplot(x='label',y='probability', hue='class', data=MLP_pd_4_new, palette=['darkblue','darkorange','darkgreen'], saturation=2, ax=axes[5][3]).legend_.remove()
  axes[5][3].set_xlabel("")
  axes[5][3].set_ylabel("")
  sns.barplot(x='label',y='probability', hue='class', data=MLP_pd_5_new, palette=['darkblue','darkorange','darkgreen'], saturation=2, ax=axes[5][4]).legend_.remove()
  axes[5][4].set_xlabel("")
  axes[5][4].set_ylabel("")