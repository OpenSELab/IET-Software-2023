# -*- coding: utf-8 -*-
"""1-plot_all_performance

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NVbX88ItrgwF1aGH8Xtqjs1JdYrfKs7O
"""

!pip install cliffs-delta
!pip install researchpy
!pip install pingouin

# Commented out IPython magic to ensure Python compatibility.

import pandas as pd
import numpy as np

#Import graphical plotting libraries
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

from scipy import stats

from cliffs_delta import cliffs_delta

# 忽略警告
import warnings
warnings.filterwarnings('ignore')

# click load google drive
rootpath = "/content/drive/MyDrive/Colab Notebooks/1/"

results = "results/"

test_o = rootpath + results + "test-o.xlsx"
test_log = rootpath + results + "test-log.xlsx"
test_min = rootpath + results + "test-min.xlsx"
test_sta = rootpath + results + "test-sta.xlsx"

test_o_data = pd.DataFrame(pd.read_excel(test_o))
test_log_data = pd.DataFrame(pd.read_excel(test_log))
test_min_data = pd.DataFrame(pd.read_excel(test_min))
test_sta_data = pd.DataFrame(pd.read_excel(test_sta))

print(stats.wilcoxon(test_o_data.accuracy,test_log_data.accuracy))
print(stats.wilcoxon(test_o_data.accuracy,test_min_data.accuracy))
print(stats.wilcoxon(test_o_data.accuracy,test_sta_data.accuracy))
print(stats.wilcoxon(test_o_data.precision,test_log_data.precision)) #
print(stats.wilcoxon(test_o_data.precision,test_min_data.precision))
print(stats.wilcoxon(test_o_data.precision,test_sta_data.precision))
print(stats.wilcoxon(test_o_data.recall,test_log_data.recall))
print(stats.wilcoxon(test_o_data.recall,test_min_data.recall)) #
print(stats.wilcoxon(test_o_data.recall,test_sta_data.recall))
print(stats.wilcoxon(test_o_data.f1,test_log_data.f1))
print(stats.wilcoxon(test_o_data.f1,test_min_data.f1)) #
print(stats.wilcoxon(test_o_data.f1,test_sta_data.f1))
print(stats.wilcoxon(test_o_data.auc,test_log_data.auc))
print(stats.wilcoxon(test_o_data.auc,test_min_data.auc))
print(stats.wilcoxon(test_o_data.auc,test_sta_data.auc))
print(stats.wilcoxon(test_o_data.mcc,test_log_data.mcc))
print(stats.wilcoxon(test_o_data.mcc,test_min_data.mcc))
print(stats.wilcoxon(test_o_data.mcc,test_sta_data.mcc))


# 表示无显著性 其他表示有显著性 显著性很明显 性能有提升

print(cliffs_delta(test_o_data.accuracy,test_log_data.accuracy))
print(cliffs_delta(test_o_data.accuracy,test_min_data.accuracy))
print(cliffs_delta(test_o_data.accuracy,test_sta_data.accuracy))
print(cliffs_delta(test_o_data.precision,test_log_data.precision))
print(cliffs_delta(test_o_data.precision,test_min_data.precision))
print(cliffs_delta(test_o_data.precision,test_sta_data.precision))
print(cliffs_delta(test_o_data.recall,test_log_data.recall))
print(cliffs_delta(test_o_data.recall,test_min_data.recall))
print(cliffs_delta(test_o_data.recall,test_sta_data.recall))
print(cliffs_delta(test_o_data.f1,test_log_data.f1))
print(cliffs_delta(test_o_data.f1,test_min_data.f1))
print(cliffs_delta(test_o_data.f1,test_sta_data.f1))
print(cliffs_delta(test_o_data.auc,test_log_data.auc))
print(cliffs_delta(test_o_data.auc,test_min_data.auc))
print(cliffs_delta(test_o_data.auc,test_sta_data.auc))
print(cliffs_delta(test_o_data.mcc,test_log_data.mcc))
print(cliffs_delta(test_o_data.mcc,test_min_data.mcc))
print(cliffs_delta(test_o_data.mcc,test_sta_data.mcc))

import researchpy
import pingouin as pg
print(pg.compute_effsize(test_o_data.accuracy,test_log_data.accuracy))
print(pg.compute_effsize(test_o_data.accuracy,test_min_data.accuracy))
print(pg.compute_effsize(test_o_data.accuracy,test_sta_data.accuracy))
print(pg.compute_effsize(test_o_data.precision,test_log_data.precision))
print(pg.compute_effsize(test_o_data.precision,test_min_data.precision))
print(pg.compute_effsize(test_o_data.precision,test_sta_data.precision))
print(pg.compute_effsize(test_o_data.recall,test_log_data.recall))
print(pg.compute_effsize(test_o_data.recall,test_min_data.recall))
print(pg.compute_effsize(test_o_data.recall,test_sta_data.recall))
print(pg.compute_effsize(test_o_data.f1,test_log_data.f1))
print(pg.compute_effsize(test_o_data.f1,test_min_data.f1))
print(pg.compute_effsize(test_o_data.f1,test_sta_data.f1))
print(pg.compute_effsize(test_o_data.auc,test_log_data.auc))
print(pg.compute_effsize(test_o_data.auc,test_min_data.auc))
print(pg.compute_effsize(test_o_data.auc,test_sta_data.auc))
print(pg.compute_effsize(test_o_data.mcc,test_log_data.mcc))
print(pg.compute_effsize(test_o_data.mcc,test_min_data.mcc))
print(pg.compute_effsize(test_o_data.mcc,test_sta_data.mcc))

import researchpy
import pingouin as pg
np.random.seed(12345678)

df = pd.DataFrame(np.random.randint(10, size= (100, 2)),
                  columns= ['healthy', 'non-healthy'])
print(researchpy.ttest(df['healthy'], df['non-healthy']))
print(pg.compute_effsize(df['healthy'], df['non-healthy'], eftype='cohen'))

"""**下面作图**"""

# click load google drive 整体性能图
rootpath = "/content/drive/MyDrive/Colab Notebooks/1/"

results = "results/"

res_log = rootpath + results + "plot-log-o.xlsx"
res_min = rootpath + results + "plot-min-o.xlsx"
res_sta = rootpath + results + "plot-sta-o.xlsx"

res_log_data = pd.DataFrame(pd.read_excel(res_log))
res_min_data = pd.DataFrame(pd.read_excel(res_min))
res_sta_data = pd.DataFrame(pd.read_excel(res_sta))

data_accuracy = {
    'L-O': res_log_data.accuracy,
    'M-O': res_min_data.accuracy,
    'Z-O': res_sta_data.accuracy
}
data_precision = {
    'L-O': res_log_data.precision,
    'M-O': res_min_data.precision,
    'Z-O': res_sta_data.precision
}
data_recall = {
    'L-O': res_log_data.recall,
    'M-O': res_min_data.recall,
    'Z-O': res_sta_data.recall
}
data_f1 = {
    'L-O': res_log_data.f1,
    'M-O': res_min_data.f1,
    'Z-O': res_sta_data.f1
}
data_auc = {
    'L-O': res_log_data.auc,
    'M-O': res_min_data.auc,
    'Z-O': res_sta_data.auc
}
data_mcc = {
    'L-O': res_log_data.mcc,
    'M-O': res_min_data.mcc,
    'Z-O': res_sta_data.mcc
}

df1 = pd.DataFrame(data_accuracy)
df2 = pd.DataFrame(data_precision)
df3 = pd.DataFrame(data_recall)
df4 = pd.DataFrame(data_f1)
df5 = pd.DataFrame(data_auc)
df6 = pd.DataFrame(data_mcc)
# df.plot.box(title="Consumer spending in each country", vert=False)
df1.plot.box(title="accuracy")
df2.plot.box(title="precision")
df3.plot.box(title="recall")
df4.plot.box(title="f1")
df5.plot.box(title="auc")
df6.plot.box(title="mcc")

plt.grid(linestyle="--", alpha=0.3)

plt.show()

# 作图 初步图不美观 后期改良

ax = sns.boxplot(data=df1, palette="Set2")
ax = sns.swarmplot(data=df1, color=".25")

#绘制普通箱线图与增强箱线图


with sns.axes_style('darkgrid'):

  fig, axes = plt.subplots(2, 3, figsize=(12, 9), sharey=True)

  axes[0][0].set_title('Accuracy')
  #sns.boxenplot(data=df1, orient='v', ax=axes[0][0])  # 增强
  sns.boxplot(data=df1, orient='v', ax=axes[0][0], width=0.5)  # 普通

  axes[0][1].set_title('Precision')
  #sns.boxenplot(data=df2, orient='v', ax=axes[0][1])  # 增强
  sns.boxplot(data=df2, orient='v', ax=axes[0][1], width=0.5)  # 普通
  axes[0][2].set_title('Recall')
  #sns.boxenplot(data=df3, orient='v', ax=axes[0][2])  # 增强
  sns.boxplot(data=df3, orient='v', ax=axes[0][2], width=0.5)  # 普通
  axes[1][0].set_title('F1')
  #sns.boxenplot(data=df4, orient='v', ax=axes[1][0])  # 增强
  sns.boxplot(data=df4, orient='v', ax=axes[1][0], width=0.5)  # 普通
  axes[1][1].set_title('AUC')
  #sns.boxenplot(data=df5, orient='v', ax=axes[1][1])  # 增强
  sns.boxplot(data=df5, orient='v', ax=axes[1][1], width=0.5)  # 普通
  axes[1][2].set_title('MCC')
  #sns.boxenplot(data=df6, orient='v', ax=axes[1][2])  # 增强
  sns.boxplot(data=df6, orient='v', ax=axes[1][2], width=0.5)  # 普通

  #plt.yticks(np.arange(-1, 1, 0.05))
  plt.show()

#绘制普通箱线图与增强箱线图


with sns.axes_style('darkgrid'):

  fig, axes = plt.subplots(1, 6, figsize=(15, 4), sharey=True)

  axes[0].set_title('Accuracy')

  sns.boxplot(data=df1, orient='v', ax=axes[0], width=0.5)  # 普通

  axes[1].set_title('Precision')

  sns.boxplot(data=df2, orient='v', ax=axes[1], width=0.5)  # 普通
  axes[2].set_title('Recall')

  sns.boxplot(data=df3, orient='v', ax=axes[2], width=0.5)  # 普通
  axes[3].set_title('F1')

  sns.boxplot(data=df4, orient='v', ax=axes[3], width=0.5)  # 普通
  axes[4].set_title('AUC')

  sns.boxplot(data=df5, orient='v', ax=axes[4], width=0.5)  # 普通
  axes[5].set_title('MCC')

  sns.boxplot(data=df6, orient='v', ax=axes[5], width=0.5)  # 普通
  plt.show()

#绘制普通箱线图与增强箱线图
with sns.axes_style('darkgrid'):
  fig, axes = plt.subplots(2, 3, figsize=(15, 9))
  #axes[0].set_title('1')
  #sns.boxplot(data=df1, orient='v', ax=axes[0])  # 普通
  axes[0][0].set_title('accuracy')
  #sns.boxenplot(data=df1, orient='v', ax=axes[0][0])  # 增强
  sns.boxplot(data=df1, orient='v', ax=axes[0][0])  # 普通
  sns.swarmplot(data=df1, ax=axes[0][0], color=".25")
  axes[0][1].set_title('precision')
  #sns.boxenplot(data=df2, orient='v', ax=axes[0][1])  # 增强
  sns.boxplot(data=df2, orient='v', ax=axes[0][1])  # 普通
  sns.swarmplot(data=df2, ax=axes[0][1], color=".25")
  axes[0][2].set_title('recall')
  #sns.boxenplot(data=df3, orient='v', ax=axes[0][2])  # 增强
  sns.boxplot(data=df3, orient='v', ax=axes[0][2])  # 普通
  sns.swarmplot(data=df3, ax=axes[0][2], color=".25")
  axes[1][0].set_title('f1')
  #sns.boxenplot(data=df4, orient='v', ax=axes[1][0])  # 增强
  sns.boxplot(data=df4, orient='v', ax=axes[1][0])  # 普通
  sns.swarmplot(data=df4, ax=axes[1][0], color=".25")
  axes[1][1].set_title('auc')
  #sns.boxenplot(data=df5, orient='v', ax=axes[1][1])  # 增强
  sns.boxplot(data=df5, orient='v', ax=axes[1][1])  # 普通
  sns.swarmplot(data=df5, ax=axes[1][1], color=".25")
  axes[1][2].set_title('mcc')
  #sns.boxenplot(data=df6, orient='v', ax=axes[1][2])  # 增强
  sns.boxplot(data=df6, orient='v', ax=axes[1][2])  # 普通
  sns.swarmplot(data=df6, ax=axes[1][2], color=".25")
  plt.show()

#绘制增强箱线图-用的是这个
with sns.axes_style('darkgrid'):
  fig, axes = plt.subplots(2, 3, figsize=(12, 9), sharex=True, sharey=True, dpi=350)
  fig.subplots_adjust(wspace=0.055)

  #axes[0].set_title('1')
  #sns.boxplot(data=df1, orient='v', ax=axes[0])  # 普通
  axes[0][0].set_title('Accuracy')
  axes[0][0].set_ylabel("Performance Difference")


  sns.boxenplot(data=df1, orient='v', ax=axes[0][0])  # 增强

  axes[0][1].set_title('Precision')
  sns.boxenplot(data=df2, orient='v', ax=axes[0][1])  # 增强


  axes[0][2].set_title('Recall')
  sns.boxenplot(data=df3, orient='v', ax=axes[0][2])  # 增强


  axes[1][0].set_title('F1')
  axes[1][0].set_ylabel("Performance Difference")
  sns.boxenplot(data=df4, orient='v', ax=axes[1][0])  # 增强

  axes[1][1].set_title('AUC')
  sns.boxenplot(data=df5, orient='v', ax=axes[1][1])  # 增强

  axes[1][2].set_title('MCC')
  sns.boxenplot(data=df6, orient='v', ax=axes[1][2])  # 增强


  plt.show()
  #plt.savefig(rootpath + results + "boxenplotfig.png", dpi=350) #指定分辨率